/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/selenium-webdriver";
exports.ids = ["vendor-chunks/selenium-webdriver"];
exports.modules = {

/***/ "(rsc)/./node_modules/selenium-webdriver/bidi/addInterceptParameters.js":
/*!************************************************************************!*\
  !*** ./node_modules/selenium-webdriver/bidi/addInterceptParameters.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst { UrlPattern } = __webpack_require__(/*! ./urlPattern */ \"(rsc)/./node_modules/selenium-webdriver/bidi/urlPattern.js\")\n\nclass AddInterceptParameters {\n  #phases = []\n  #urlPatterns = []\n\n  constructor(phases) {\n    if (phases instanceof Array) {\n      phases.forEach((phase) => this.#phases.push(phase))\n    } else {\n      this.#phases.push(phases)\n    }\n  }\n\n  /**\n   * Adds a URL pattern to intercept.\n   *\n   * @param {UrlPattern} pattern - The URL pattern to add.\n   * @returns {AddInterceptParameters} - Returns the current instance of the class AddInterceptParameters for chaining.\n   * @throws {Error} - Throws an error if the pattern is not an instance of UrlPattern.\n   */\n  urlPattern(pattern) {\n    if (!(pattern instanceof UrlPattern)) {\n      throw new Error(`Pattern must be an instance of UrlPattern. Received: '${pattern})'`)\n    }\n    this.#urlPatterns.push(Object.fromEntries(pattern.asMap()))\n    return this\n  }\n\n  /**\n   * Adds array of URL patterns to intercept.\n   *\n   * @param {UrlPattern[]} patterns - An array of UrlPattern instances representing the URL patterns to intercept.\n   * @returns {AddInterceptParameters} - Returns the instance of AddInterceptParameters for chaining.\n   * @throws {Error} - Throws an error if the pattern is not an instance of UrlPattern.\n   */\n  urlPatterns(patterns) {\n    patterns.forEach((pattern) => {\n      if (!(pattern instanceof UrlPattern)) {\n        throw new Error(`Pattern must be an instance of UrlPattern. Received:'${pattern}'`)\n      }\n      this.#urlPatterns.push(Object.fromEntries(pattern.asMap()))\n    })\n    return this\n  }\n\n  /**\n   * Adds string URL to intercept.\n   *\n   * @param {string} pattern - The URL pattern to be added.\n   * @returns {AddInterceptParameters} - Returns the instance of AddInterceptParameters for chaining..\n   * @throws {Error} - If the pattern is not an instance of String.\n   */\n  urlStringPattern(pattern) {\n    if (typeof pattern !== 'string') {\n      throw new Error(`Pattern must be an instance of String. Received:'${pattern}'`)\n    }\n\n    this.#urlPatterns.push({ type: 'string', pattern: pattern })\n    return this\n  }\n\n  /**\n   * Adds array of string URLs to intercept.\n   * @param {string[]} patterns - An array of URL string patterns.\n   * @returns {this} - Returns the instance of AddInterceptParameters for chaining.\n   */\n  urlStringPatterns(patterns) {\n    patterns.forEach((pattern) => {\n      if (typeof pattern !== 'string') {\n        throw new Error(`Pattern must be an instance of String. Received:'${pattern}'`)\n      }\n      this.#urlPatterns.push({ type: 'string', pattern: pattern })\n    })\n    return this\n  }\n\n  asMap() {\n    const map = new Map()\n    map.set('phases', this.#phases)\n    if (this.#urlPatterns.length > 0) {\n      map.set('urlPatterns', this.#urlPatterns)\n    }\n\n    return map\n  }\n}\n\nmodule.exports = { AddInterceptParameters }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc2VsZW5pdW0td2ViZHJpdmVyL2JpZGkvYWRkSW50ZXJjZXB0UGFyYW1ldGVycy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFFBQVEsYUFBYSxFQUFFLG1CQUFPLENBQUMsZ0ZBQWM7O0FBRTdDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsWUFBWTtBQUN6QixlQUFlLHdCQUF3QjtBQUN2QyxjQUFjLE9BQU87QUFDckI7QUFDQTtBQUNBO0FBQ0EsK0VBQStFLFFBQVE7QUFDdkY7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxjQUFjO0FBQzNCLGVBQWUsd0JBQXdCO0FBQ3ZDLGNBQWMsT0FBTztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdGQUFnRixRQUFRO0FBQ3hGO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsZUFBZSx3QkFBd0I7QUFDdkMsY0FBYyxPQUFPO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBLDBFQUEwRSxRQUFRO0FBQ2xGOztBQUVBLDZCQUE2QixrQ0FBa0M7QUFDL0Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxVQUFVO0FBQ3ZCLGVBQWUsTUFBTTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRFQUE0RSxRQUFRO0FBQ3BGO0FBQ0EsK0JBQStCLGtDQUFrQztBQUNqRSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLG1CQUFtQiIsInNvdXJjZXMiOlsid2VicGFjazovL2dvb2dsZS1zaGVldHMtc2VsZW5pdW0tYXV0b21hdGlvbi8uL25vZGVfbW9kdWxlcy9zZWxlbml1bS13ZWJkcml2ZXIvYmlkaS9hZGRJbnRlcmNlcHRQYXJhbWV0ZXJzLmpzPzEyN2EiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIFNvZnR3YXJlIEZyZWVkb20gQ29uc2VydmFuY3kgKFNGQykgdW5kZXIgb25lXG4vLyBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbi8vIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4vLyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBTRkMgbGljZW5zZXMgdGhpcyBmaWxlXG4vLyB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4vLyBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbi8vIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbi8vIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4vLyBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuLy8gS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4vLyBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4vLyB1bmRlciB0aGUgTGljZW5zZS5cblxuY29uc3QgeyBVcmxQYXR0ZXJuIH0gPSByZXF1aXJlKCcuL3VybFBhdHRlcm4nKVxuXG5jbGFzcyBBZGRJbnRlcmNlcHRQYXJhbWV0ZXJzIHtcbiAgI3BoYXNlcyA9IFtdXG4gICN1cmxQYXR0ZXJucyA9IFtdXG5cbiAgY29uc3RydWN0b3IocGhhc2VzKSB7XG4gICAgaWYgKHBoYXNlcyBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICBwaGFzZXMuZm9yRWFjaCgocGhhc2UpID0+IHRoaXMuI3BoYXNlcy5wdXNoKHBoYXNlKSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy4jcGhhc2VzLnB1c2gocGhhc2VzKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGEgVVJMIHBhdHRlcm4gdG8gaW50ZXJjZXB0LlxuICAgKlxuICAgKiBAcGFyYW0ge1VybFBhdHRlcm59IHBhdHRlcm4gLSBUaGUgVVJMIHBhdHRlcm4gdG8gYWRkLlxuICAgKiBAcmV0dXJucyB7QWRkSW50ZXJjZXB0UGFyYW1ldGVyc30gLSBSZXR1cm5zIHRoZSBjdXJyZW50IGluc3RhbmNlIG9mIHRoZSBjbGFzcyBBZGRJbnRlcmNlcHRQYXJhbWV0ZXJzIGZvciBjaGFpbmluZy5cbiAgICogQHRocm93cyB7RXJyb3J9IC0gVGhyb3dzIGFuIGVycm9yIGlmIHRoZSBwYXR0ZXJuIGlzIG5vdCBhbiBpbnN0YW5jZSBvZiBVcmxQYXR0ZXJuLlxuICAgKi9cbiAgdXJsUGF0dGVybihwYXR0ZXJuKSB7XG4gICAgaWYgKCEocGF0dGVybiBpbnN0YW5jZW9mIFVybFBhdHRlcm4pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFBhdHRlcm4gbXVzdCBiZSBhbiBpbnN0YW5jZSBvZiBVcmxQYXR0ZXJuLiBSZWNlaXZlZDogJyR7cGF0dGVybn0pJ2ApXG4gICAgfVxuICAgIHRoaXMuI3VybFBhdHRlcm5zLnB1c2goT2JqZWN0LmZyb21FbnRyaWVzKHBhdHRlcm4uYXNNYXAoKSkpXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGFycmF5IG9mIFVSTCBwYXR0ZXJucyB0byBpbnRlcmNlcHQuXG4gICAqXG4gICAqIEBwYXJhbSB7VXJsUGF0dGVybltdfSBwYXR0ZXJucyAtIEFuIGFycmF5IG9mIFVybFBhdHRlcm4gaW5zdGFuY2VzIHJlcHJlc2VudGluZyB0aGUgVVJMIHBhdHRlcm5zIHRvIGludGVyY2VwdC5cbiAgICogQHJldHVybnMge0FkZEludGVyY2VwdFBhcmFtZXRlcnN9IC0gUmV0dXJucyB0aGUgaW5zdGFuY2Ugb2YgQWRkSW50ZXJjZXB0UGFyYW1ldGVycyBmb3IgY2hhaW5pbmcuXG4gICAqIEB0aHJvd3Mge0Vycm9yfSAtIFRocm93cyBhbiBlcnJvciBpZiB0aGUgcGF0dGVybiBpcyBub3QgYW4gaW5zdGFuY2Ugb2YgVXJsUGF0dGVybi5cbiAgICovXG4gIHVybFBhdHRlcm5zKHBhdHRlcm5zKSB7XG4gICAgcGF0dGVybnMuZm9yRWFjaCgocGF0dGVybikgPT4ge1xuICAgICAgaWYgKCEocGF0dGVybiBpbnN0YW5jZW9mIFVybFBhdHRlcm4pKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgUGF0dGVybiBtdXN0IGJlIGFuIGluc3RhbmNlIG9mIFVybFBhdHRlcm4uIFJlY2VpdmVkOicke3BhdHRlcm59J2ApXG4gICAgICB9XG4gICAgICB0aGlzLiN1cmxQYXR0ZXJucy5wdXNoKE9iamVjdC5mcm9tRW50cmllcyhwYXR0ZXJuLmFzTWFwKCkpKVxuICAgIH0pXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIHN0cmluZyBVUkwgdG8gaW50ZXJjZXB0LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0dGVybiAtIFRoZSBVUkwgcGF0dGVybiB0byBiZSBhZGRlZC5cbiAgICogQHJldHVybnMge0FkZEludGVyY2VwdFBhcmFtZXRlcnN9IC0gUmV0dXJucyB0aGUgaW5zdGFuY2Ugb2YgQWRkSW50ZXJjZXB0UGFyYW1ldGVycyBmb3IgY2hhaW5pbmcuLlxuICAgKiBAdGhyb3dzIHtFcnJvcn0gLSBJZiB0aGUgcGF0dGVybiBpcyBub3QgYW4gaW5zdGFuY2Ugb2YgU3RyaW5nLlxuICAgKi9cbiAgdXJsU3RyaW5nUGF0dGVybihwYXR0ZXJuKSB7XG4gICAgaWYgKHR5cGVvZiBwYXR0ZXJuICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBQYXR0ZXJuIG11c3QgYmUgYW4gaW5zdGFuY2Ugb2YgU3RyaW5nLiBSZWNlaXZlZDonJHtwYXR0ZXJufSdgKVxuICAgIH1cblxuICAgIHRoaXMuI3VybFBhdHRlcm5zLnB1c2goeyB0eXBlOiAnc3RyaW5nJywgcGF0dGVybjogcGF0dGVybiB9KVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhcnJheSBvZiBzdHJpbmcgVVJMcyB0byBpbnRlcmNlcHQuXG4gICAqIEBwYXJhbSB7c3RyaW5nW119IHBhdHRlcm5zIC0gQW4gYXJyYXkgb2YgVVJMIHN0cmluZyBwYXR0ZXJucy5cbiAgICogQHJldHVybnMge3RoaXN9IC0gUmV0dXJucyB0aGUgaW5zdGFuY2Ugb2YgQWRkSW50ZXJjZXB0UGFyYW1ldGVycyBmb3IgY2hhaW5pbmcuXG4gICAqL1xuICB1cmxTdHJpbmdQYXR0ZXJucyhwYXR0ZXJucykge1xuICAgIHBhdHRlcm5zLmZvckVhY2goKHBhdHRlcm4pID0+IHtcbiAgICAgIGlmICh0eXBlb2YgcGF0dGVybiAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBQYXR0ZXJuIG11c3QgYmUgYW4gaW5zdGFuY2Ugb2YgU3RyaW5nLiBSZWNlaXZlZDonJHtwYXR0ZXJufSdgKVxuICAgICAgfVxuICAgICAgdGhpcy4jdXJsUGF0dGVybnMucHVzaCh7IHR5cGU6ICdzdHJpbmcnLCBwYXR0ZXJuOiBwYXR0ZXJuIH0pXG4gICAgfSlcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgYXNNYXAoKSB7XG4gICAgY29uc3QgbWFwID0gbmV3IE1hcCgpXG4gICAgbWFwLnNldCgncGhhc2VzJywgdGhpcy4jcGhhc2VzKVxuICAgIGlmICh0aGlzLiN1cmxQYXR0ZXJucy5sZW5ndGggPiAwKSB7XG4gICAgICBtYXAuc2V0KCd1cmxQYXR0ZXJucycsIHRoaXMuI3VybFBhdHRlcm5zKVxuICAgIH1cblxuICAgIHJldHVybiBtYXBcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgQWRkSW50ZXJjZXB0UGFyYW1ldGVycyB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/bidi/addInterceptParameters.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/bidi/browsingContext.js":
/*!*****************************************************************!*\
  !*** ./node_modules/selenium-webdriver/bidi/browsingContext.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst { InvalidArgumentError, NoSuchFrameError } = __webpack_require__(/*! ../lib/error */ \"(rsc)/./node_modules/selenium-webdriver/lib/error.js\")\nconst { BrowsingContextInfo } = __webpack_require__(/*! ./browsingContextTypes */ \"(rsc)/./node_modules/selenium-webdriver/bidi/browsingContextTypes.js\")\nconst { SerializationOptions, ReferenceValue, RemoteValue } = __webpack_require__(/*! ./protocolValue */ \"(rsc)/./node_modules/selenium-webdriver/bidi/protocolValue.js\")\nconst { WebElement } = __webpack_require__(/*! ../lib/webdriver */ \"(rsc)/./node_modules/selenium-webdriver/lib/webdriver.js\")\nconst { CaptureScreenshotParameters } = __webpack_require__(/*! ./captureScreenshotParameters */ \"(rsc)/./node_modules/selenium-webdriver/bidi/captureScreenshotParameters.js\")\nconst { CreateContextParameters } = __webpack_require__(/*! ./createContextParameters */ \"(rsc)/./node_modules/selenium-webdriver/bidi/createContextParameters.js\")\n\n/**\n * Represents the locator to locate nodes in the browsing context.\n * Described in https://w3c.github.io/webdriver-bidi/#type-browsingContext-Locator.\n */\nclass Locator {\n  static Type = Object.freeze({\n    CSS: 'css',\n    INNER_TEXT: 'innerText',\n    XPATH: 'xpath',\n  })\n\n  #type\n  #value\n  #ignoreCase\n  #matchType\n  #maxDepth\n\n  constructor(type, value, ignoreCase = undefined, matchType = undefined, maxDepth = undefined) {\n    this.#type = type\n    this.#value = value\n    this.#ignoreCase = ignoreCase\n    this.#matchType = matchType\n    this.#maxDepth = maxDepth\n  }\n\n  /**\n   * Creates a new Locator object with CSS selector type.\n   *\n   * @param {string} value - The CSS selector value.\n   * @returns {Locator} A new Locator object with CSS selector type.\n   */\n  static css(value) {\n    return new Locator(Locator.Type.CSS, value)\n  }\n\n  /**\n   * Creates a new Locator object with the given XPath value.\n   *\n   * @param {string} value - The XPath value.\n   * @returns {Locator} A new Locator object.\n   */\n  static xpath(value) {\n    return new Locator(Locator.Type.XPATH, value)\n  }\n\n  /**\n   * Creates a new Locator object with the specified inner text value.\n   *\n   * @param {string} value - The inner text value to locate.\n   * @param {boolean|undefined} [ignoreCase] - Whether to ignore the case when matching the inner text value.\n   * @param {string|undefined} [matchType] - The type of matching to perform (full or partial).\n   * @param {number|undefined} [maxDepth] - The maximum depth to search for the inner text value.\n   * @returns {Locator} A new Locator object with the specified inner text value.\n   */\n  static innerText(value, ignoreCase = undefined, matchType = undefined, maxDepth = undefined) {\n    return new Locator(Locator.Type.INNER_TEXT, value, ignoreCase, matchType, maxDepth)\n  }\n\n  toMap() {\n    const map = new Map()\n\n    map.set('type', this.#type.toString())\n    map.set('value', this.#value)\n    map.set('ignoreCase', this.#ignoreCase)\n    map.set('matchType', this.#matchType)\n    map.set('maxDepth', this.#maxDepth)\n\n    return map\n  }\n}\n\n/**\n * Represents the contains under BrowsingContext module commands.\n * Described in https://w3c.github.io/webdriver-bidi/#module-browsingContext\n * Each browsing context command requires a browsing context id.\n * Hence, this class represent browsing context lifecycle.\n */\nclass BrowsingContext {\n  constructor(driver) {\n    this._driver = driver\n  }\n\n  /**\n   * @returns id\n   */\n  get id() {\n    return this._id\n  }\n\n  async init({ browsingContextId = undefined, type = undefined, createParameters = undefined }) {\n    if (!(await this._driver.getCapabilities()).get('webSocketUrl')) {\n      throw Error('WebDriver instance must support BiDi protocol')\n    }\n\n    if (browsingContextId === undefined && type === undefined && createParameters === undefined) {\n      throw Error('Either BrowsingContextId or Type or CreateParameters must be provided')\n    }\n\n    if (type === undefined && createParameters !== undefined) {\n      throw Error('Type must be provided with CreateParameters')\n    }\n\n    if (type !== undefined && !['window', 'tab'].includes(type)) {\n      throw Error(`Valid types are 'window' & 'tab'. Received: ${type}`)\n    }\n\n    this.bidi = await this._driver.getBidi()\n    this._id =\n      browsingContextId === undefined\n        ? (await this.create(type, createParameters))['result']['context']\n        : browsingContextId\n  }\n\n  /**\n   * Creates a browsing context for the given type with the given parameters\n   */\n  async create(type, createParameters = undefined) {\n    if (createParameters !== undefined && (!createParameters) instanceof CreateContextParameters) {\n      throw Error(`Pass in the instance of CreateContextParameters. Received: ${createParameters}`)\n    }\n\n    let parameters = new Map()\n    parameters.set('type', type)\n\n    if (createParameters !== undefined) {\n      createParameters.asMap().forEach((value, key) => {\n        parameters.set(key, value)\n      })\n    }\n\n    const params = {\n      method: 'browsingContext.create',\n      params: Object.fromEntries(parameters),\n    }\n    const res = await this.bidi.send(params)\n    return res\n  }\n\n  /**\n   * @param url the url to navigate to\n   * @param readinessState type of readiness state: \"none\" / \"interactive\" / \"complete\"\n   * @returns NavigateResult object\n   */\n  async navigate(url, readinessState = undefined) {\n    if (readinessState !== undefined && !['none', 'interactive', 'complete'].includes(readinessState)) {\n      throw Error(`Valid readiness states are 'none', 'interactive' & 'complete'. Received: ${readinessState}`)\n    }\n\n    const params = {\n      method: 'browsingContext.navigate',\n      params: {\n        context: this._id,\n        url: url,\n        wait: readinessState,\n      },\n    }\n    const navigateResult = (await this.bidi.send(params))['result']\n\n    return new NavigateResult(navigateResult['url'], navigateResult['navigation'])\n  }\n\n  /**\n   * @param maxDepth the max depth of the descendents of browsing context tree\n   * @returns BrowsingContextInfo object\n   */\n  async getTree(maxDepth = undefined) {\n    const params = {\n      method: 'browsingContext.getTree',\n      params: {\n        root: this._id,\n        maxDepth: maxDepth,\n      },\n    }\n\n    let result = await this.bidi.send(params)\n    if ('error' in result) {\n      throw Error(result['error'])\n    }\n\n    result = result['result']['contexts'][0]\n    return new BrowsingContextInfo(result['context'], result['url'], result['children'], result['parent'])\n  }\n\n  /**\n   * @returns {Promise<Array<BrowsingContextInfo>>} A Promise that resolves to an array of BrowsingContextInfo objects representing the top-level browsing contexts.\n   */\n  async getTopLevelContexts() {\n    const params = {\n      method: 'browsingContext.getTree',\n      params: {},\n    }\n\n    let result = await this.bidi.send(params)\n    if ('error' in result) {\n      throw Error(result['error'])\n    }\n\n    const contexts = result['result']['contexts']\n    const browsingContexts = contexts.map((context) => {\n      return new BrowsingContextInfo(context['id'], context['url'], context['children'], context['parent'])\n    })\n    return browsingContexts\n  }\n\n  /**\n   * Closes the browsing context\n   * @returns {Promise<void>}\n   */\n  async close() {\n    const params = {\n      method: 'browsingContext.close',\n      params: {\n        context: this._id,\n      },\n    }\n    await this.bidi.send(params)\n  }\n\n  /**\n   * Prints PDF of the webpage\n   * @param options print options given by the user\n   * @returns PrintResult object\n   */\n  async printPage(options = {}) {\n    let params = {\n      method: 'browsingContext.print',\n      // Setting default values for parameters\n      params: {\n        context: this._id,\n        background: false,\n        margin: {\n          bottom: 1.0,\n          left: 1.0,\n          right: 1.0,\n          top: 1.0,\n        },\n        orientation: 'portrait',\n        page: {\n          height: 27.94,\n          width: 21.59,\n        },\n        pageRanges: [],\n        scale: 1.0,\n        shrinkToFit: true,\n      },\n    }\n\n    // Updating parameter values based on the options passed\n    params.params = this._driver.validatePrintPageParams(options, params.params)\n\n    const response = await this.bidi.send(params)\n    return new PrintResult(response.result.data)\n  }\n\n  /**\n   * Captures a screenshot of the browsing context.\n   *\n   * @param {CaptureScreenshotParameters|undefined} [captureScreenshotParameters] - Optional parameters for capturing the screenshot.\n   * @returns {Promise<string>} - A promise that resolves to the base64-encoded string representation of the captured screenshot.\n   * @throws {InvalidArgumentError} - If the provided captureScreenshotParameters is not an instance of CaptureScreenshotParameters.\n   */\n  async captureScreenshot(captureScreenshotParameters = undefined) {\n    if (\n      captureScreenshotParameters !== undefined &&\n      !(captureScreenshotParameters instanceof CaptureScreenshotParameters)\n    ) {\n      throw new InvalidArgumentError(\n        `Pass in a CaptureScreenshotParameters object. Received: ${captureScreenshotParameters}`,\n      )\n    }\n\n    const screenshotParams = new Map()\n    screenshotParams.set('context', this._id)\n    if (captureScreenshotParameters !== undefined) {\n      captureScreenshotParameters.asMap().forEach((value, key) => {\n        screenshotParams.set(key, value)\n      })\n    }\n\n    let params = {\n      method: 'browsingContext.captureScreenshot',\n      params: Object.fromEntries(screenshotParams),\n    }\n\n    const response = await this.bidi.send(params)\n    this.checkErrorInScreenshot(response)\n    return response['result']['data']\n  }\n\n  async captureBoxScreenshot(x, y, width, height) {\n    let params = {\n      method: 'browsingContext.captureScreenshot',\n      params: {\n        context: this._id,\n        clip: {\n          type: 'box',\n          x: x,\n          y: y,\n          width: width,\n          height: height,\n        },\n      },\n    }\n\n    const response = await this.bidi.send(params)\n    this.checkErrorInScreenshot(response)\n    return response['result']['data']\n  }\n\n  /**\n   * Captures a screenshot of a specific element within the browsing context.\n   * @param {string} sharedId - The shared ID of the element to capture.\n   * @param {string} [handle] - The handle of the element to capture (optional).\n   * @returns {Promise<string>} A promise that resolves to the base64-encoded screenshot data.\n   */\n  async captureElementScreenshot(sharedId, handle = undefined) {\n    let params = {\n      method: 'browsingContext.captureScreenshot',\n      params: {\n        context: this._id,\n        clip: {\n          type: 'element',\n          element: {\n            sharedId: sharedId,\n            handle: handle,\n          },\n        },\n      },\n    }\n\n    const response = await this.bidi.send(params)\n    this.checkErrorInScreenshot(response)\n    return response['result']['data']\n  }\n\n  checkErrorInScreenshot(response) {\n    if ('error' in response) {\n      const { error, msg } = response\n\n      switch (error) {\n        case 'invalid argument':\n          throw new InvalidArgumentError(msg)\n\n        case 'no such frame':\n          throw new NoSuchFrameError(msg)\n      }\n    }\n  }\n\n  /**\n   * Activates and focuses the top-level browsing context.\n   * @returns {Promise<void>} A promise that resolves when the browsing context is activated.\n   * @throws {Error} If there is an error while activating the browsing context.\n   */\n  async activate() {\n    const params = {\n      method: 'browsingContext.activate',\n      params: {\n        context: this._id,\n      },\n    }\n\n    let result = await this.bidi.send(params)\n    if ('error' in result) {\n      throw Error(result['error'])\n    }\n  }\n\n  /**\n   * Handles a user prompt in the browsing context.\n   *\n   * @param {boolean} [accept] - Optional. Indicates whether to accept or dismiss the prompt.\n   * @param {string} [userText] - Optional. The text to enter.\n   * @throws {Error} If an error occurs while handling the user prompt.\n   */\n  async handleUserPrompt(accept = undefined, userText = undefined) {\n    const params = {\n      method: 'browsingContext.handleUserPrompt',\n      params: {\n        context: this._id,\n        accept: accept,\n        userText: userText,\n      },\n    }\n\n    let result = await this.bidi.send(params)\n    if ('error' in result) {\n      throw Error(result['error'])\n    }\n  }\n\n  /**\n   * Reloads the current browsing context.\n   *\n   * @param {boolean} [ignoreCache] - Whether to ignore the cache when reloading.\n   * @param {string} [readinessState] - The readiness state to wait for before returning.\n   *        Valid readiness states are 'none', 'interactive', and 'complete'.\n   * @returns {Promise<NavigateResult>} - A promise that resolves to the result of the reload operation.\n   * @throws {Error} - If an invalid readiness state is provided.\n   */\n  async reload(ignoreCache = undefined, readinessState = undefined) {\n    if (readinessState !== undefined && !['none', 'interactive', 'complete'].includes(readinessState)) {\n      throw Error(`Valid readiness states are 'none', 'interactive' & 'complete'. Received: ${readinessState}`)\n    }\n\n    const params = {\n      method: 'browsingContext.reload',\n      params: {\n        context: this._id,\n        ignoreCache: ignoreCache,\n        wait: readinessState,\n      },\n    }\n    const navigateResult = (await this.bidi.send(params))['result']\n\n    return new NavigateResult(navigateResult['url'], navigateResult['navigation'])\n  }\n\n  /**\n   * Sets the viewport size and device pixel ratio for the browsing context.\n   * @param {number} width - The width of the viewport.\n   * @param {number} height - The height of the viewport.\n   * @param {number} [devicePixelRatio] - The device pixel ratio (optional)\n   * @throws {Error} If an error occurs while setting the viewport.\n   */\n  async setViewport(width, height, devicePixelRatio = undefined) {\n    const params = {\n      method: 'browsingContext.setViewport',\n      params: {\n        context: this._id,\n        viewport: { width: width, height: height },\n        devicePixelRatio: devicePixelRatio,\n      },\n    }\n    let result = await this.bidi.send(params)\n    if ('error' in result) {\n      throw Error(result['error'])\n    }\n  }\n\n  /**\n   * Traverses the browsing context history by a given delta.\n   *\n   * @param {number} delta - The delta value to traverse the history. A positive value moves forward, while a negative value moves backward.\n   * @returns {Promise<void>} - A promise that resolves when the history traversal is complete.\n   */\n  async traverseHistory(delta) {\n    const params = {\n      method: 'browsingContext.traverseHistory',\n      params: {\n        context: this._id,\n        delta: delta,\n      },\n    }\n    await this.bidi.send(params)\n  }\n\n  /**\n   * Moves the browsing context forward by one step in the history.\n   * @returns {Promise<void>} A promise that resolves when the browsing context has moved forward.\n   */\n  async forward() {\n    await this.traverseHistory(1)\n  }\n\n  /**\n   * Navigates the browsing context to the previous page in the history.\n   * @returns {Promise<void>} A promise that resolves when the navigation is complete.\n   */\n  async back() {\n    await this.traverseHistory(-1)\n  }\n\n  /**\n   * Locates nodes in the browsing context.\n   *\n   * @param {Locator} locator - The locator object used to locate the nodes.\n   * @param {number} [maxNodeCount] - The maximum number of nodes to locate (optional).\n   * @param {string} [sandbox] - The sandbox name for locating nodes (optional).\n   * @param {SerializationOptions} [serializationOptions] - The serialization options for locating nodes (optional).\n   * @param {ReferenceValue[]} [startNodes] - The array of start nodes for locating nodes (optional).\n   * @returns {Promise<RemoteValue[]>} - A promise that resolves to the arrays of located nodes.\n   * @throws {Error} - If the locator is not an instance of Locator.\n   * @throws {Error} - If the serializationOptions is provided but not an instance of SerializationOptions.\n   * @throws {Error} - If the startNodes is provided but not an array of ReferenceValue objects.\n   * @throws {Error} - If any of the startNodes is not an instance of ReferenceValue.\n   */\n  async locateNodes(\n    locator,\n    maxNodeCount = undefined,\n    sandbox = undefined,\n    serializationOptions = undefined,\n    startNodes = undefined,\n  ) {\n    if (!(locator instanceof Locator)) {\n      throw Error(`Pass in a Locator object. Received: ${locator}`)\n    }\n\n    if (serializationOptions !== undefined && !(serializationOptions instanceof SerializationOptions)) {\n      throw Error(`Pass in SerializationOptions object. Received: ${serializationOptions} `)\n    }\n\n    if (startNodes !== undefined && !Array.isArray(startNodes)) {\n      throw Error(`Pass in an array of ReferenceValue objects. Received: ${startNodes}`)\n    }\n\n    if (startNodes !== undefined && Array.isArray(startNodes)) {\n      startNodes.forEach((node) => {\n        if (!(node instanceof ReferenceValue)) {\n          throw Error(`Pass in a ReferenceValue object. Received: ${node}`)\n        }\n      })\n    }\n\n    const params = {\n      method: 'browsingContext.locateNodes',\n      params: {\n        context: this._id,\n        locator: Object.fromEntries(locator.toMap()),\n        maxNodeCount: maxNodeCount,\n        sandbox: sandbox,\n        serializationOptions: serializationOptions,\n        startNodes: startNodes,\n      },\n    }\n\n    let response = await this.bidi.send(params)\n    if ('error' in response) {\n      throw Error(response['error'])\n    }\n\n    const nodes = response.result.nodes\n    const remoteValues = []\n\n    nodes.forEach((node) => {\n      remoteValues.push(new RemoteValue(node))\n    })\n    return remoteValues\n  }\n\n  /**\n   * Locates a single node in the browsing context.\n   *\n   * @param {Locator} locator - The locator used to find the node.\n   * @param {string} [sandbox] - The sandbox of the node (optional).\n   * @param {SerializationOptions} [serializationOptions] - The serialization options for the node (optional).\n   * @param {Array} [startNodes] - The starting nodes for the search (optional).\n   * @returns {Promise<RemoteValue>} - A promise that resolves to the located node.\n   */\n  async locateNode(locator, sandbox = undefined, serializationOptions = undefined, startNodes = undefined) {\n    const elements = await this.locateNodes(locator, 1, sandbox, serializationOptions, startNodes)\n    return elements[0]\n  }\n\n  async locateElement(locator) {\n    const elements = await this.locateNodes(locator, 1)\n    return new WebElement(this._driver, elements[0].sharedId)\n  }\n\n  async locateElements(locator) {\n    const elements = await this.locateNodes(locator)\n\n    let webElements = []\n    elements.forEach((element) => {\n      webElements.push(new WebElement(this._driver, element.sharedId))\n    })\n    return webElements\n  }\n}\n\n/**\n * Represents the result of a navigation operation.\n */\nclass NavigateResult {\n  constructor(url, navigationId) {\n    this._url = url\n    this._navigationId = navigationId\n  }\n\n  /**\n   * Gets the URL of the navigated page.\n   * @returns {string} The URL of the navigated page.\n   */\n  get url() {\n    return this._url\n  }\n\n  /**\n   * Gets the ID of the navigation operation.\n   * @returns {number} The ID of the navigation operation.\n   */\n  get navigationId() {\n    return this._navigationId\n  }\n}\n\n/**\n * Represents a print result.\n */\nclass PrintResult {\n  constructor(data) {\n    this._data = data\n  }\n\n  /**\n   * Gets the data associated with the print result.\n   * @returns {any} The data associated with the print result.\n   */\n  get data() {\n    return this._data\n  }\n}\n\n/**\n * initiate browsing context instance and return\n * @param driver\n * @param browsingContextId The browsing context of current window/tab\n * @param type \"window\" or \"tab\"\n * @param createParameters The parameters for creating a new browsing context\n * @returns {Promise<BrowsingContext>}\n */\nasync function getBrowsingContextInstance(\n  driver,\n  { browsingContextId = undefined, type = undefined, createParameters = undefined },\n) {\n  let instance = new BrowsingContext(driver)\n  await instance.init({ browsingContextId, type, createParameters })\n  return instance\n}\n\nmodule.exports = getBrowsingContextInstance\nmodule.exports.Locator = Locator\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/bidi/browsingContext.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/bidi/browsingContextInspector.js":
/*!**************************************************************************!*\
  !*** ./node_modules/selenium-webdriver/bidi/browsingContextInspector.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst { BrowsingContextInfo, NavigationInfo, UserPromptOpened, UserPromptClosed } = __webpack_require__(/*! ./browsingContextTypes */ \"(rsc)/./node_modules/selenium-webdriver/bidi/browsingContextTypes.js\")\n\n/**\n * Represents a browsing context related events.\n * Described in https://w3c.github.io/webdriver-bidi/#module-contexts-events.\n * While BrowsingContext class represents a browsing context lifecycle and related commands.\n * This class is specific to listening to events. Events can be subscribed to multiple browsing contexts or all of them.\n */\nclass BrowsingContextInspector {\n  constructor(driver, browsingContextIds) {\n    this._driver = driver\n    this._browsingContextIds = browsingContextIds\n  }\n\n  async init() {\n    this.bidi = await this._driver.getBidi()\n  }\n\n  /**\n   * Subscribes to the 'browsingContext.contextCreated' event.\n   * @param {Function} callback - The callback function to handle the event.\n   * @returns {Promise<void>} - A promise that resolves when the event is emitted.\n   */\n  async onBrowsingContextCreated(callback) {\n    await this.subscribeAndHandleEvent('browsingContext.contextCreated', callback)\n  }\n\n  /**\n   * Subscribes to the 'browsingContext.contextDestroyed' event.\n   * @param {Function} callback - The callback function to handle the event.\n   * @returns {Promise<void>} - A promise that resolves when the event is emitted.\n   */\n  async onBrowsingContextDestroyed(callback) {\n    await this.subscribeAndHandleEvent('browsingContext.contextDestroyed', callback)\n  }\n\n  /**\n   * Subscribe to the 'browsingContext.navigationStarted' event.\n   * @param {Function} callback - The callback function to handle the event.\n   * @returns {Promise<void>} - A promise that resolves when the event is emitted.\n   */\n  async onNavigationStarted(callback) {\n    await this.subscribeAndHandleEvent('browsingContext.navigationStarted', callback)\n  }\n\n  /**\n   * Subscribes to the 'browsingContext.fragmentNavigated' event.\n   *\n   * @param {Function} callback - The callback function to handle the event.\n   * @returns {Promise<void>} - A promise that resolves when the event is emitted.\n   */\n  async onFragmentNavigated(callback) {\n    await this.subscribeAndHandleEvent('browsingContext.fragmentNavigated', callback)\n  }\n\n  /**\n   * Subscribes to the 'browsingContext.userPromptClosed' event.\n   *\n   * @param {Function} callback - The callback function to handle the event.\n   * @returns {Promise<void>} - A promise that resolves when the event is emitted.\n   */\n  async onUserPromptClosed(callback) {\n    await this.subscribeAndHandleEvent('browsingContext.userPromptClosed', callback)\n  }\n\n  /**\n   * Subscribes to the 'browsingContext.userPromptOpened' event.\n   *\n   * @param {Function} callback - The callback function to handle the event.\n   * @returns {Promise<void>} - A promise that resolves when the event is emitted.\n   */\n  async onUserPromptOpened(callback) {\n    await this.subscribeAndHandleEvent('browsingContext.userPromptOpened', callback)\n  }\n\n  /**\n   * Subscribes to the 'browsingContext.domContentLoaded' event.\n   *\n   * @param {Function} callback - The callback function to handle the event.\n   * @returns {Promise<void>} - A promise that resolves when the event is emitted.\n   */\n  async onDomContentLoaded(callback) {\n    await this.subscribeAndHandleEvent('browsingContext.domContentLoaded', callback)\n  }\n\n  /**\n   * Subscribes to the 'browsingContext.load' event.\n   *\n   * @param {Function} callback - The callback function to handle the event.\n   * @returns {Promise<void>} - A promise that resolves when the event is emitted.\n   */\n  async onBrowsingContextLoaded(callback) {\n    await this.subscribeAndHandleEvent('browsingContext.load', callback)\n  }\n\n  async subscribeAndHandleEvent(eventType, callback) {\n    if (this._browsingContextIds != null) {\n      await this.bidi.subscribe(eventType, this._browsingContextIds)\n    } else {\n      await this.bidi.subscribe(eventType)\n    }\n    await this._on(callback)\n  }\n\n  async _on(callback) {\n    this.ws = await this.bidi.socket\n    this.ws.on('message', (event) => {\n      const { params } = JSON.parse(Buffer.from(event.toString()))\n      if (params) {\n        let response = null\n        if ('navigation' in params) {\n          response = new NavigationInfo(params.context, params.navigation, params.timestamp, params.url)\n        } else if ('accepted' in params) {\n          response = new UserPromptClosed(params.context, params.accepted, params.userText)\n        } else if ('type' in params) {\n          response = new UserPromptOpened(params.context, params.type, params.message)\n        } else {\n          response = new BrowsingContextInfo(params.context, params.url, params.children, params.parent)\n        }\n        callback(response)\n      }\n    })\n  }\n\n  async close() {\n    if (\n      this._browsingContextIds !== null &&\n      this._browsingContextIds !== undefined &&\n      this._browsingContextIds.length > 0\n    ) {\n      await this.bidi.unsubscribe(\n        'browsingContext.contextCreated',\n        'browsingContext.contextDestroyed',\n        'browsingContext.fragmentNavigated',\n        'browsingContext.userPromptClosed',\n        this._browsingContextIds,\n      )\n    } else {\n      await this.bidi.unsubscribe(\n        'browsingContext.contextCreated',\n        'browsingContext.contextDestroyed',\n        'browsingContext.fragmentNavigated',\n        'browsingContext.userPromptClosed',\n      )\n    }\n  }\n}\n\nasync function getBrowsingContextInstance(driver, browsingContextIds = null) {\n  let instance = new BrowsingContextInspector(driver, browsingContextIds)\n  await instance.init()\n  return instance\n}\n\nmodule.exports = getBrowsingContextInstance\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/bidi/browsingContextInspector.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/bidi/browsingContextTypes.js":
/*!**********************************************************************!*\
  !*** ./node_modules/selenium-webdriver/bidi/browsingContextTypes.js ***!
  \**********************************************************************/
/***/ ((module) => {

eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * Represents information about a browsing context.\n * Described in https://w3c.github.io/webdriver-bidi/#type-browsingContext-Info\n */\nclass BrowsingContextInfo {\n  constructor(id, url, children, parentBrowsingContext) {\n    this._id = id\n    this._url = url\n    this._children = children\n    this._parentBrowsingContext = parentBrowsingContext\n  }\n\n  /**\n   * Get the ID of the browsing context.\n   * @returns {string} The ID of the browsing context.\n   */\n  get id() {\n    return this._id\n  }\n\n  /**\n   * Get the URL of the browsing context.\n   * @returns {string} The URL of the browsing context.\n   */\n  get url() {\n    return this._url\n  }\n\n  /**\n   * Get the children of the browsing context.\n   * @returns {Array<BrowsingContextInfo>} The children of the browsing context.\n   */\n  get children() {\n    return this._children\n  }\n\n  /**\n   * Get the parent browsing context.\n   * @returns {BrowsingContextInfo} The parent browsing context.\n   */\n  get parentBrowsingContext() {\n    return this._parentBrowsingContext\n  }\n}\n\n/**\n * Represents information about a navigation.\n * Described in https://w3c.github.io/webdriver-bidi/#type-browsingContext-NavigationInfo.\n */\nclass NavigationInfo {\n  /**\n   * Constructs a new NavigationInfo object.\n   * @param {string} browsingContextId - The ID of the browsing context.\n   * @param {string} navigationId - The ID of the navigation.\n   * @param {number} timestamp - The timestamp of the navigation.\n   * @param {string} url - The URL of the page navigated to.\n   */\n  constructor(browsingContextId, navigationId, timestamp, url) {\n    this.browsingContextId = browsingContextId\n    this.navigationId = navigationId\n    this.timestamp = timestamp\n    this.url = url\n  }\n}\n\nclass UserPromptOpened {\n  constructor(browsingContextId, type, message) {\n    this.browsingContextId = browsingContextId\n    this.type = type\n    this.message = message\n  }\n}\n\nclass UserPromptClosed {\n  constructor(browsingContextId, accepted, userText = undefined) {\n    this.browsingContextId = browsingContextId\n    this.accepted = accepted\n    this.userText = userText\n  }\n}\n\nmodule.exports = { BrowsingContextInfo, NavigationInfo, UserPromptOpened, UserPromptClosed }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc2VsZW5pdW0td2ViZHJpdmVyL2JpZGkvYnJvd3NpbmdDb250ZXh0VHlwZXMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZSw0QkFBNEI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGVBQWUscUJBQXFCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxtQkFBbUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nb29nbGUtc2hlZXRzLXNlbGVuaXVtLWF1dG9tYXRpb24vLi9ub2RlX21vZHVsZXMvc2VsZW5pdW0td2ViZHJpdmVyL2JpZGkvYnJvd3NpbmdDb250ZXh0VHlwZXMuanM/YTgxZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgU29mdHdhcmUgRnJlZWRvbSBDb25zZXJ2YW5jeSAoU0ZDKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIFNGQyBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4vKipcbiAqIFJlcHJlc2VudHMgaW5mb3JtYXRpb24gYWJvdXQgYSBicm93c2luZyBjb250ZXh0LlxuICogRGVzY3JpYmVkIGluIGh0dHBzOi8vdzNjLmdpdGh1Yi5pby93ZWJkcml2ZXItYmlkaS8jdHlwZS1icm93c2luZ0NvbnRleHQtSW5mb1xuICovXG5jbGFzcyBCcm93c2luZ0NvbnRleHRJbmZvIHtcbiAgY29uc3RydWN0b3IoaWQsIHVybCwgY2hpbGRyZW4sIHBhcmVudEJyb3dzaW5nQ29udGV4dCkge1xuICAgIHRoaXMuX2lkID0gaWRcbiAgICB0aGlzLl91cmwgPSB1cmxcbiAgICB0aGlzLl9jaGlsZHJlbiA9IGNoaWxkcmVuXG4gICAgdGhpcy5fcGFyZW50QnJvd3NpbmdDb250ZXh0ID0gcGFyZW50QnJvd3NpbmdDb250ZXh0XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBJRCBvZiB0aGUgYnJvd3NpbmcgY29udGV4dC5cbiAgICogQHJldHVybnMge3N0cmluZ30gVGhlIElEIG9mIHRoZSBicm93c2luZyBjb250ZXh0LlxuICAgKi9cbiAgZ2V0IGlkKCkge1xuICAgIHJldHVybiB0aGlzLl9pZFxuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgVVJMIG9mIHRoZSBicm93c2luZyBjb250ZXh0LlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgVVJMIG9mIHRoZSBicm93c2luZyBjb250ZXh0LlxuICAgKi9cbiAgZ2V0IHVybCgpIHtcbiAgICByZXR1cm4gdGhpcy5fdXJsXG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBjaGlsZHJlbiBvZiB0aGUgYnJvd3NpbmcgY29udGV4dC5cbiAgICogQHJldHVybnMge0FycmF5PEJyb3dzaW5nQ29udGV4dEluZm8+fSBUaGUgY2hpbGRyZW4gb2YgdGhlIGJyb3dzaW5nIGNvbnRleHQuXG4gICAqL1xuICBnZXQgY2hpbGRyZW4oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NoaWxkcmVuXG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBwYXJlbnQgYnJvd3NpbmcgY29udGV4dC5cbiAgICogQHJldHVybnMge0Jyb3dzaW5nQ29udGV4dEluZm99IFRoZSBwYXJlbnQgYnJvd3NpbmcgY29udGV4dC5cbiAgICovXG4gIGdldCBwYXJlbnRCcm93c2luZ0NvbnRleHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3BhcmVudEJyb3dzaW5nQ29udGV4dFxuICB9XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBpbmZvcm1hdGlvbiBhYm91dCBhIG5hdmlnYXRpb24uXG4gKiBEZXNjcmliZWQgaW4gaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYmRyaXZlci1iaWRpLyN0eXBlLWJyb3dzaW5nQ29udGV4dC1OYXZpZ2F0aW9uSW5mby5cbiAqL1xuY2xhc3MgTmF2aWdhdGlvbkluZm8ge1xuICAvKipcbiAgICogQ29uc3RydWN0cyBhIG5ldyBOYXZpZ2F0aW9uSW5mbyBvYmplY3QuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBicm93c2luZ0NvbnRleHRJZCAtIFRoZSBJRCBvZiB0aGUgYnJvd3NpbmcgY29udGV4dC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hdmlnYXRpb25JZCAtIFRoZSBJRCBvZiB0aGUgbmF2aWdhdGlvbi5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHRpbWVzdGFtcCAtIFRoZSB0aW1lc3RhbXAgb2YgdGhlIG5hdmlnYXRpb24uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgLSBUaGUgVVJMIG9mIHRoZSBwYWdlIG5hdmlnYXRlZCB0by5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGJyb3dzaW5nQ29udGV4dElkLCBuYXZpZ2F0aW9uSWQsIHRpbWVzdGFtcCwgdXJsKSB7XG4gICAgdGhpcy5icm93c2luZ0NvbnRleHRJZCA9IGJyb3dzaW5nQ29udGV4dElkXG4gICAgdGhpcy5uYXZpZ2F0aW9uSWQgPSBuYXZpZ2F0aW9uSWRcbiAgICB0aGlzLnRpbWVzdGFtcCA9IHRpbWVzdGFtcFxuICAgIHRoaXMudXJsID0gdXJsXG4gIH1cbn1cblxuY2xhc3MgVXNlclByb21wdE9wZW5lZCB7XG4gIGNvbnN0cnVjdG9yKGJyb3dzaW5nQ29udGV4dElkLCB0eXBlLCBtZXNzYWdlKSB7XG4gICAgdGhpcy5icm93c2luZ0NvbnRleHRJZCA9IGJyb3dzaW5nQ29udGV4dElkXG4gICAgdGhpcy50eXBlID0gdHlwZVxuICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2VcbiAgfVxufVxuXG5jbGFzcyBVc2VyUHJvbXB0Q2xvc2VkIHtcbiAgY29uc3RydWN0b3IoYnJvd3NpbmdDb250ZXh0SWQsIGFjY2VwdGVkLCB1c2VyVGV4dCA9IHVuZGVmaW5lZCkge1xuICAgIHRoaXMuYnJvd3NpbmdDb250ZXh0SWQgPSBicm93c2luZ0NvbnRleHRJZFxuICAgIHRoaXMuYWNjZXB0ZWQgPSBhY2NlcHRlZFxuICAgIHRoaXMudXNlclRleHQgPSB1c2VyVGV4dFxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0geyBCcm93c2luZ0NvbnRleHRJbmZvLCBOYXZpZ2F0aW9uSW5mbywgVXNlclByb21wdE9wZW5lZCwgVXNlclByb21wdENsb3NlZCB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/bidi/browsingContextTypes.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/bidi/captureScreenshotParameters.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/selenium-webdriver/bidi/captureScreenshotParameters.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst { BoxClipRectangle, ElementClipRectangle } = __webpack_require__(/*! ./clipRectangle */ \"(rsc)/./node_modules/selenium-webdriver/bidi/clipRectangle.js\")\n\n/**\n * Defines the reference point from which to compute offsets for capturing screenshot.\n *\n * @enum {string}\n */\nconst Origin = {\n  VIEWPORT: 'viewport',\n  DOCUMENT: 'document',\n}\n\n/**\n * Represents the optional parameters for capturing a screenshot.\n * Described in https://w3c.github.io/webdriver-bidi/#command-browsingContext-captureScreenshot.\n */\nclass CaptureScreenshotParameters {\n  #map = new Map()\n\n  /**\n   * Sets the origin for capturing the screenshot.\n   *\n   * @param {Origin} origin - The origin for capturing the screenshot. Must be one of `Origin.VIEWPORT` or `Origin.DOCUMENT`.\n   * @returns {CaptureScreenshotParameters} - The current instance of the CaptureScreenshotParameters for chaining.\n   * @throws {Error} - If the provided origin is not valid.\n   */\n  origin(origin) {\n    if (origin !== Origin.VIEWPORT && origin !== Origin.DOCUMENT) {\n      throw new Error(`Origin must be one of ${Object.values(Origin)}. Received:'${origin}'`)\n    }\n    this.#map.set('origin', origin)\n    return this\n  }\n\n  /**\n   * Sets the image format and quality for capturing a screenshot.\n   *\n   * @param {string} type - The image format type.\n   * @param {number} [quality] - The image quality (optional).\n   * @throws {Error} If the type is not a string or if the quality is not a number.\n   * @returns {CaptureScreenshotParameters} - The current instance of the CaptureScreenshotParameters for chaining.\n   */\n  imageFormat(type, quality = undefined) {\n    if (typeof type !== 'string') {\n      throw new Error(`Type must be an instance of String. Received:'${type}'`)\n    }\n\n    this.#map.set('type', type)\n\n    if (quality !== undefined) {\n      if (typeof quality !== 'number') {\n        throw new Error(`Quality must be a number. Received:'${quality}'`)\n      }\n      this.#map.set('quality', quality)\n    }\n    return this\n  }\n\n  /**\n   * Sets the clip rectangle for capturing a screenshot.\n   *\n   * @param {BoxClipRectangle|ElementClipRectangle} clipRectangle - The clip rectangle to set.\n   * @throws {Error} If the clipRectangle is not an instance of ClipRectangle.\n   * @returns {CaptureScreenshotParameters} - The current instance of the CaptureScreenshotParameters for chaining.\n   */\n  clipRectangle(clipRectangle) {\n    if (!(clipRectangle instanceof BoxClipRectangle || clipRectangle instanceof ElementClipRectangle)) {\n      throw new Error(`ClipRectangle must be an instance of ClipRectangle. Received:'${clipRectangle}'`)\n    }\n    this.#map.set('clip', Object.fromEntries(clipRectangle.asMap()))\n    return this\n  }\n\n  asMap() {\n    return this.#map\n  }\n}\n\nmodule.exports = { CaptureScreenshotParameters, Origin }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc2VsZW5pdW0td2ViZHJpdmVyL2JpZGkvY2FwdHVyZVNjcmVlbnNob3RQYXJhbWV0ZXJzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsUUFBUSx5Q0FBeUMsRUFBRSxtQkFBTyxDQUFDLHNGQUFpQjs7QUFFNUU7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixlQUFlLDZCQUE2QjtBQUM1QyxjQUFjLE9BQU87QUFDckI7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLHNCQUFzQixjQUFjLE9BQU87QUFDMUY7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixjQUFjLE9BQU87QUFDckIsZUFBZSw2QkFBNkI7QUFDNUM7QUFDQTtBQUNBO0FBQ0EsdUVBQXVFLEtBQUs7QUFDNUU7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLCtEQUErRCxRQUFRO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSx1Q0FBdUM7QUFDcEQsY0FBYyxPQUFPO0FBQ3JCLGVBQWUsNkJBQTZCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBLHVGQUF1RixjQUFjO0FBQ3JHO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG1CQUFtQiIsInNvdXJjZXMiOlsid2VicGFjazovL2dvb2dsZS1zaGVldHMtc2VsZW5pdW0tYXV0b21hdGlvbi8uL25vZGVfbW9kdWxlcy9zZWxlbml1bS13ZWJkcml2ZXIvYmlkaS9jYXB0dXJlU2NyZWVuc2hvdFBhcmFtZXRlcnMuanM/NmQzZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgU29mdHdhcmUgRnJlZWRvbSBDb25zZXJ2YW5jeSAoU0ZDKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIFNGQyBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5jb25zdCB7IEJveENsaXBSZWN0YW5nbGUsIEVsZW1lbnRDbGlwUmVjdGFuZ2xlIH0gPSByZXF1aXJlKCcuL2NsaXBSZWN0YW5nbGUnKVxuXG4vKipcbiAqIERlZmluZXMgdGhlIHJlZmVyZW5jZSBwb2ludCBmcm9tIHdoaWNoIHRvIGNvbXB1dGUgb2Zmc2V0cyBmb3IgY2FwdHVyaW5nIHNjcmVlbnNob3QuXG4gKlxuICogQGVudW0ge3N0cmluZ31cbiAqL1xuY29uc3QgT3JpZ2luID0ge1xuICBWSUVXUE9SVDogJ3ZpZXdwb3J0JyxcbiAgRE9DVU1FTlQ6ICdkb2N1bWVudCcsXG59XG5cbi8qKlxuICogUmVwcmVzZW50cyB0aGUgb3B0aW9uYWwgcGFyYW1ldGVycyBmb3IgY2FwdHVyaW5nIGEgc2NyZWVuc2hvdC5cbiAqIERlc2NyaWJlZCBpbiBodHRwczovL3czYy5naXRodWIuaW8vd2ViZHJpdmVyLWJpZGkvI2NvbW1hbmQtYnJvd3NpbmdDb250ZXh0LWNhcHR1cmVTY3JlZW5zaG90LlxuICovXG5jbGFzcyBDYXB0dXJlU2NyZWVuc2hvdFBhcmFtZXRlcnMge1xuICAjbWFwID0gbmV3IE1hcCgpXG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIG9yaWdpbiBmb3IgY2FwdHVyaW5nIHRoZSBzY3JlZW5zaG90LlxuICAgKlxuICAgKiBAcGFyYW0ge09yaWdpbn0gb3JpZ2luIC0gVGhlIG9yaWdpbiBmb3IgY2FwdHVyaW5nIHRoZSBzY3JlZW5zaG90LiBNdXN0IGJlIG9uZSBvZiBgT3JpZ2luLlZJRVdQT1JUYCBvciBgT3JpZ2luLkRPQ1VNRU5UYC5cbiAgICogQHJldHVybnMge0NhcHR1cmVTY3JlZW5zaG90UGFyYW1ldGVyc30gLSBUaGUgY3VycmVudCBpbnN0YW5jZSBvZiB0aGUgQ2FwdHVyZVNjcmVlbnNob3RQYXJhbWV0ZXJzIGZvciBjaGFpbmluZy5cbiAgICogQHRocm93cyB7RXJyb3J9IC0gSWYgdGhlIHByb3ZpZGVkIG9yaWdpbiBpcyBub3QgdmFsaWQuXG4gICAqL1xuICBvcmlnaW4ob3JpZ2luKSB7XG4gICAgaWYgKG9yaWdpbiAhPT0gT3JpZ2luLlZJRVdQT1JUICYmIG9yaWdpbiAhPT0gT3JpZ2luLkRPQ1VNRU5UKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE9yaWdpbiBtdXN0IGJlIG9uZSBvZiAke09iamVjdC52YWx1ZXMoT3JpZ2luKX0uIFJlY2VpdmVkOicke29yaWdpbn0nYClcbiAgICB9XG4gICAgdGhpcy4jbWFwLnNldCgnb3JpZ2luJywgb3JpZ2luKVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgaW1hZ2UgZm9ybWF0IGFuZCBxdWFsaXR5IGZvciBjYXB0dXJpbmcgYSBzY3JlZW5zaG90LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIFRoZSBpbWFnZSBmb3JtYXQgdHlwZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IFtxdWFsaXR5XSAtIFRoZSBpbWFnZSBxdWFsaXR5IChvcHRpb25hbCkuXG4gICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgdHlwZSBpcyBub3QgYSBzdHJpbmcgb3IgaWYgdGhlIHF1YWxpdHkgaXMgbm90IGEgbnVtYmVyLlxuICAgKiBAcmV0dXJucyB7Q2FwdHVyZVNjcmVlbnNob3RQYXJhbWV0ZXJzfSAtIFRoZSBjdXJyZW50IGluc3RhbmNlIG9mIHRoZSBDYXB0dXJlU2NyZWVuc2hvdFBhcmFtZXRlcnMgZm9yIGNoYWluaW5nLlxuICAgKi9cbiAgaW1hZ2VGb3JtYXQodHlwZSwgcXVhbGl0eSA9IHVuZGVmaW5lZCkge1xuICAgIGlmICh0eXBlb2YgdHlwZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVHlwZSBtdXN0IGJlIGFuIGluc3RhbmNlIG9mIFN0cmluZy4gUmVjZWl2ZWQ6JyR7dHlwZX0nYClcbiAgICB9XG5cbiAgICB0aGlzLiNtYXAuc2V0KCd0eXBlJywgdHlwZSlcblxuICAgIGlmIChxdWFsaXR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh0eXBlb2YgcXVhbGl0eSAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBRdWFsaXR5IG11c3QgYmUgYSBudW1iZXIuIFJlY2VpdmVkOicke3F1YWxpdHl9J2ApXG4gICAgICB9XG4gICAgICB0aGlzLiNtYXAuc2V0KCdxdWFsaXR5JywgcXVhbGl0eSlcbiAgICB9XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBjbGlwIHJlY3RhbmdsZSBmb3IgY2FwdHVyaW5nIGEgc2NyZWVuc2hvdC5cbiAgICpcbiAgICogQHBhcmFtIHtCb3hDbGlwUmVjdGFuZ2xlfEVsZW1lbnRDbGlwUmVjdGFuZ2xlfSBjbGlwUmVjdGFuZ2xlIC0gVGhlIGNsaXAgcmVjdGFuZ2xlIHRvIHNldC5cbiAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBjbGlwUmVjdGFuZ2xlIGlzIG5vdCBhbiBpbnN0YW5jZSBvZiBDbGlwUmVjdGFuZ2xlLlxuICAgKiBAcmV0dXJucyB7Q2FwdHVyZVNjcmVlbnNob3RQYXJhbWV0ZXJzfSAtIFRoZSBjdXJyZW50IGluc3RhbmNlIG9mIHRoZSBDYXB0dXJlU2NyZWVuc2hvdFBhcmFtZXRlcnMgZm9yIGNoYWluaW5nLlxuICAgKi9cbiAgY2xpcFJlY3RhbmdsZShjbGlwUmVjdGFuZ2xlKSB7XG4gICAgaWYgKCEoY2xpcFJlY3RhbmdsZSBpbnN0YW5jZW9mIEJveENsaXBSZWN0YW5nbGUgfHwgY2xpcFJlY3RhbmdsZSBpbnN0YW5jZW9mIEVsZW1lbnRDbGlwUmVjdGFuZ2xlKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBDbGlwUmVjdGFuZ2xlIG11c3QgYmUgYW4gaW5zdGFuY2Ugb2YgQ2xpcFJlY3RhbmdsZS4gUmVjZWl2ZWQ6JyR7Y2xpcFJlY3RhbmdsZX0nYClcbiAgICB9XG4gICAgdGhpcy4jbWFwLnNldCgnY2xpcCcsIE9iamVjdC5mcm9tRW50cmllcyhjbGlwUmVjdGFuZ2xlLmFzTWFwKCkpKVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBhc01hcCgpIHtcbiAgICByZXR1cm4gdGhpcy4jbWFwXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7IENhcHR1cmVTY3JlZW5zaG90UGFyYW1ldGVycywgT3JpZ2luIH1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/bidi/captureScreenshotParameters.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/bidi/clipRectangle.js":
/*!***************************************************************!*\
  !*** ./node_modules/selenium-webdriver/bidi/clipRectangle.js ***!
  \***************************************************************/
/***/ ((module) => {

eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * Represents a clip rectangle.\n * Described in https://w3c.github.io/webdriver-bidi/#command-browsingContext-captureScreenshot.\n */\nclass ClipRectangle {\n  clipType\n\n  /**\n   * Constructs a new ClipRectangle object.\n   * @param {string} type - The type of the clip rectangle.\n   */\n  constructor(type) {\n    this.clipType = type\n  }\n\n  /**\n   * Gets the type of the clip rectangle.\n   * @returns {string} The type of the clip rectangle.\n   */\n  get type() {\n    return this.clipType\n  }\n\n  asMap() {}\n}\n\n/**\n * Represents a clip rectangle for an element.\n * @extends ClipRectangle\n */\nclass ElementClipRectangle extends ClipRectangle {\n  #sharedId\n  #handleId\n\n  /**\n   * Constructs a new ElementClipRectangle instance.\n   * @param {string} sharedId - The shared ID of the element.\n   * @param {string} [handleId] - The handle ID of the element (optional).\n   */\n  constructor(sharedId, handleId = undefined) {\n    super('element')\n    this.#sharedId = sharedId\n\n    if (handleId !== undefined) {\n      this.#handleId = handleId\n    }\n  }\n\n  /**\n   * Converts the ElementClipRectangle instance to a map.\n   * @returns {Map} - The converted map.\n   */\n  asMap() {\n    const map = new Map()\n    map.set('type', super.type)\n\n    const sharedReference = new Map()\n    sharedReference.set('sharedId', this.#sharedId)\n    if (this.#handleId !== undefined) {\n      sharedReference.set('handleId', this.#handleId)\n    }\n\n    map.set('element', Object.fromEntries(sharedReference))\n\n    return map\n  }\n}\n\n/**\n * Represents a box-shaped clip rectangle.\n * @extends ClipRectangle\n */\nclass BoxClipRectangle extends ClipRectangle {\n  #x\n  #y\n  #width\n  #height\n\n  /**\n   * Constructs a new BoxClipRectangle object.\n   * @param {number} x - The x-coordinate of the top-left corner of the rectangle.\n   * @param {number} y - The y-coordinate of the top-left corner of the rectangle.\n   * @param {number} width - The width of the rectangle.\n   * @param {number} height - The height of the rectangle.\n   */\n  constructor(x, y, width, height) {\n    super('box')\n    this.#x = x\n    this.#y = y\n    this.#width = width\n    this.#height = height\n  }\n\n  /**\n   * Converts the BoxClipRectangle object to a Map.\n   * @returns {Map<string, any>} - The Map representation of the BoxClipRectangle object.\n   */\n  asMap() {\n    const map = new Map()\n    map.set('type', super.type)\n    map.set('x', this.#x)\n    map.set('y', this.#y)\n    map.set('width', this.#width)\n    map.set('height', this.#height)\n\n    return map\n  }\n}\n\nmodule.exports = { BoxClipRectangle, ElementClipRectangle }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc2VsZW5pdW0td2ViZHJpdmVyL2JpZGkvY2xpcFJlY3RhbmdsZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZSxLQUFLO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGVBQWUsa0JBQWtCO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLG1CQUFtQiIsInNvdXJjZXMiOlsid2VicGFjazovL2dvb2dsZS1zaGVldHMtc2VsZW5pdW0tYXV0b21hdGlvbi8uL25vZGVfbW9kdWxlcy9zZWxlbml1bS13ZWJkcml2ZXIvYmlkaS9jbGlwUmVjdGFuZ2xlLmpzP2NkZDkiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIFNvZnR3YXJlIEZyZWVkb20gQ29uc2VydmFuY3kgKFNGQykgdW5kZXIgb25lXG4vLyBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbi8vIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4vLyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBTRkMgbGljZW5zZXMgdGhpcyBmaWxlXG4vLyB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4vLyBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbi8vIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbi8vIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4vLyBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuLy8gS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4vLyBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4vLyB1bmRlciB0aGUgTGljZW5zZS5cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgY2xpcCByZWN0YW5nbGUuXG4gKiBEZXNjcmliZWQgaW4gaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYmRyaXZlci1iaWRpLyNjb21tYW5kLWJyb3dzaW5nQ29udGV4dC1jYXB0dXJlU2NyZWVuc2hvdC5cbiAqL1xuY2xhc3MgQ2xpcFJlY3RhbmdsZSB7XG4gIGNsaXBUeXBlXG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdHMgYSBuZXcgQ2xpcFJlY3RhbmdsZSBvYmplY3QuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gVGhlIHR5cGUgb2YgdGhlIGNsaXAgcmVjdGFuZ2xlLlxuICAgKi9cbiAgY29uc3RydWN0b3IodHlwZSkge1xuICAgIHRoaXMuY2xpcFR5cGUgPSB0eXBlXG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgdHlwZSBvZiB0aGUgY2xpcCByZWN0YW5nbGUuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSB0eXBlIG9mIHRoZSBjbGlwIHJlY3RhbmdsZS5cbiAgICovXG4gIGdldCB0eXBlKCkge1xuICAgIHJldHVybiB0aGlzLmNsaXBUeXBlXG4gIH1cblxuICBhc01hcCgpIHt9XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIGNsaXAgcmVjdGFuZ2xlIGZvciBhbiBlbGVtZW50LlxuICogQGV4dGVuZHMgQ2xpcFJlY3RhbmdsZVxuICovXG5jbGFzcyBFbGVtZW50Q2xpcFJlY3RhbmdsZSBleHRlbmRzIENsaXBSZWN0YW5nbGUge1xuICAjc2hhcmVkSWRcbiAgI2hhbmRsZUlkXG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdHMgYSBuZXcgRWxlbWVudENsaXBSZWN0YW5nbGUgaW5zdGFuY2UuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzaGFyZWRJZCAtIFRoZSBzaGFyZWQgSUQgb2YgdGhlIGVsZW1lbnQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbaGFuZGxlSWRdIC0gVGhlIGhhbmRsZSBJRCBvZiB0aGUgZWxlbWVudCAob3B0aW9uYWwpLlxuICAgKi9cbiAgY29uc3RydWN0b3Ioc2hhcmVkSWQsIGhhbmRsZUlkID0gdW5kZWZpbmVkKSB7XG4gICAgc3VwZXIoJ2VsZW1lbnQnKVxuICAgIHRoaXMuI3NoYXJlZElkID0gc2hhcmVkSWRcblxuICAgIGlmIChoYW5kbGVJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLiNoYW5kbGVJZCA9IGhhbmRsZUlkXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIHRoZSBFbGVtZW50Q2xpcFJlY3RhbmdsZSBpbnN0YW5jZSB0byBhIG1hcC5cbiAgICogQHJldHVybnMge01hcH0gLSBUaGUgY29udmVydGVkIG1hcC5cbiAgICovXG4gIGFzTWFwKCkge1xuICAgIGNvbnN0IG1hcCA9IG5ldyBNYXAoKVxuICAgIG1hcC5zZXQoJ3R5cGUnLCBzdXBlci50eXBlKVxuXG4gICAgY29uc3Qgc2hhcmVkUmVmZXJlbmNlID0gbmV3IE1hcCgpXG4gICAgc2hhcmVkUmVmZXJlbmNlLnNldCgnc2hhcmVkSWQnLCB0aGlzLiNzaGFyZWRJZClcbiAgICBpZiAodGhpcy4jaGFuZGxlSWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgc2hhcmVkUmVmZXJlbmNlLnNldCgnaGFuZGxlSWQnLCB0aGlzLiNoYW5kbGVJZClcbiAgICB9XG5cbiAgICBtYXAuc2V0KCdlbGVtZW50JywgT2JqZWN0LmZyb21FbnRyaWVzKHNoYXJlZFJlZmVyZW5jZSkpXG5cbiAgICByZXR1cm4gbWFwXG4gIH1cbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgYm94LXNoYXBlZCBjbGlwIHJlY3RhbmdsZS5cbiAqIEBleHRlbmRzIENsaXBSZWN0YW5nbGVcbiAqL1xuY2xhc3MgQm94Q2xpcFJlY3RhbmdsZSBleHRlbmRzIENsaXBSZWN0YW5nbGUge1xuICAjeFxuICAjeVxuICAjd2lkdGhcbiAgI2hlaWdodFxuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RzIGEgbmV3IEJveENsaXBSZWN0YW5nbGUgb2JqZWN0LlxuICAgKiBAcGFyYW0ge251bWJlcn0geCAtIFRoZSB4LWNvb3JkaW5hdGUgb2YgdGhlIHRvcC1sZWZ0IGNvcm5lciBvZiB0aGUgcmVjdGFuZ2xlLlxuICAgKiBAcGFyYW0ge251bWJlcn0geSAtIFRoZSB5LWNvb3JkaW5hdGUgb2YgdGhlIHRvcC1sZWZ0IGNvcm5lciBvZiB0aGUgcmVjdGFuZ2xlLlxuICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGggLSBUaGUgd2lkdGggb2YgdGhlIHJlY3RhbmdsZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodCAtIFRoZSBoZWlnaHQgb2YgdGhlIHJlY3RhbmdsZS5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcbiAgICBzdXBlcignYm94JylcbiAgICB0aGlzLiN4ID0geFxuICAgIHRoaXMuI3kgPSB5XG4gICAgdGhpcy4jd2lkdGggPSB3aWR0aFxuICAgIHRoaXMuI2hlaWdodCA9IGhlaWdodFxuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIHRoZSBCb3hDbGlwUmVjdGFuZ2xlIG9iamVjdCB0byBhIE1hcC5cbiAgICogQHJldHVybnMge01hcDxzdHJpbmcsIGFueT59IC0gVGhlIE1hcCByZXByZXNlbnRhdGlvbiBvZiB0aGUgQm94Q2xpcFJlY3RhbmdsZSBvYmplY3QuXG4gICAqL1xuICBhc01hcCgpIHtcbiAgICBjb25zdCBtYXAgPSBuZXcgTWFwKClcbiAgICBtYXAuc2V0KCd0eXBlJywgc3VwZXIudHlwZSlcbiAgICBtYXAuc2V0KCd4JywgdGhpcy4jeClcbiAgICBtYXAuc2V0KCd5JywgdGhpcy4jeSlcbiAgICBtYXAuc2V0KCd3aWR0aCcsIHRoaXMuI3dpZHRoKVxuICAgIG1hcC5zZXQoJ2hlaWdodCcsIHRoaXMuI2hlaWdodClcblxuICAgIHJldHVybiBtYXBcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgQm94Q2xpcFJlY3RhbmdsZSwgRWxlbWVudENsaXBSZWN0YW5nbGUgfVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/bidi/clipRectangle.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/bidi/continueRequestParameters.js":
/*!***************************************************************************!*\
  !*** ./node_modules/selenium-webdriver/bidi/continueRequestParameters.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst { BytesValue, Header } = __webpack_require__(/*! ./networkTypes */ \"(rsc)/./node_modules/selenium-webdriver/bidi/networkTypes.js\")\n\n/**\n * Represents the parameters for a continue request command.\n * Described in https://w3c.github.io/webdriver-bidi/#command-network-continueRequest.\n */\nclass ContinueRequestParameters {\n  #map = new Map()\n\n  constructor(request) {\n    this.#map.set('request', request)\n  }\n\n  /**\n   * Sets the body value for the request.\n   *\n   * @param {BytesValue} value - The value to set as the body. Must be an instance of BytesValue.\n   * @returns {ContinueRequestParameters} - The current instance of the ContinueRequestParameters for chaining.\n   * @throws {Error} - If the value is not an instance of BytesValue.\n   */\n  body(value) {\n    if (!(value instanceof BytesValue)) {\n      throw new Error(`Value must be an instance of BytesValue. Received: '${value})'`)\n    }\n    this.#map.set('body', Object.fromEntries(value.asMap()))\n    return this\n  }\n\n  /**\n   * Sets the cookies for the request.\n   *\n   * @param {Header[]} cookieHeaders - An array of cookie headers.\n   * @returns {continueRequestParameters} - The current instance of the ContinueRequestParameters for chaining.\n   * @throws {Error} - If a cookie header is not an instance of Header.\n   */\n  cookies(cookieHeaders) {\n    const cookies = []\n    cookieHeaders.forEach((header) => {\n      if (!(header instanceof Header)) {\n        throw new Error(`CookieHeader must be an instance of Header. Received:'${header}'`)\n      }\n      cookies.push(Object.fromEntries(header.asMap()))\n    })\n\n    this.#map.set('cookies', cookies)\n    return this\n  }\n\n  /**\n   * Sets the headers for the request.\n   *\n   * @param {Header[]} headers - An array of Header objects.\n   * @returns {ContinueRequestParameters} - The current instance of the ContinueRequestParameters for chaining.\n   * @throws {Error} - If the header value is not an instance of Header.\n   */\n  headers(headers) {\n    const headerList = []\n    headers.forEach((header) => {\n      if (!(header instanceof Header)) {\n        throw new Error(`Header value must be an instance of Header. Received:'${header}'`)\n      }\n      headerList.push(Object.fromEntries(header.asMap()))\n    })\n\n    this.#map.set('headers', headerList)\n    return this\n  }\n\n  /**\n   * Sets the HTTP method for the request.\n   *\n   * @param {string} method - The HTTP method to be set.\n   * @returns {ContinueRequestParameters} - The updated `continueRequestParameters` object.\n   * @throws {Error} - If the method parameter is not a string.\n   */\n  method(method) {\n    if (typeof method !== 'string') {\n      throw new Error(`Http method must be a string. Received: '${method})'`)\n    }\n    this.#map.set('method', method)\n    return this\n  }\n\n  /**\n   * Sets the URL for the request.\n   *\n   * @param {string} url - The URL to set for the request.\n   * @returns {ContinueRequestParameters} - The current instance of the ContinueRequestParameters for chaining.\n   * @throws {Error} - If the url parameter is not a string.\n   */\n  url(url) {\n    if (typeof url !== 'string') {\n      throw new Error(`Url must be a string. Received:'${url}'`)\n    }\n\n    this.#map.set('url', url)\n    return this\n  }\n\n  asMap() {\n    return this.#map\n  }\n}\n\nmodule.exports = { ContinueRequestParameters }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc2VsZW5pdW0td2ViZHJpdmVyL2JpZGkvY29udGludWVSZXF1ZXN0UGFyYW1ldGVycy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFFBQVEscUJBQXFCLEVBQUUsbUJBQU8sQ0FBQyxvRkFBZ0I7O0FBRXZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxZQUFZO0FBQ3pCLGVBQWUsMkJBQTJCO0FBQzFDLGNBQWMsT0FBTztBQUNyQjtBQUNBO0FBQ0E7QUFDQSw2RUFBNkUsTUFBTTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFVBQVU7QUFDdkIsZUFBZSwyQkFBMkI7QUFDMUMsY0FBYyxPQUFPO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRkFBaUYsT0FBTztBQUN4RjtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxVQUFVO0FBQ3ZCLGVBQWUsMkJBQTJCO0FBQzFDLGNBQWMsT0FBTztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUZBQWlGLE9BQU87QUFDeEY7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixlQUFlLDJCQUEyQjtBQUMxQyxjQUFjLE9BQU87QUFDckI7QUFDQTtBQUNBO0FBQ0Esa0VBQWtFLE9BQU87QUFDekU7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGVBQWUsMkJBQTJCO0FBQzFDLGNBQWMsT0FBTztBQUNyQjtBQUNBO0FBQ0E7QUFDQSx5REFBeUQsSUFBSTtBQUM3RDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsbUJBQW1CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ29vZ2xlLXNoZWV0cy1zZWxlbml1bS1hdXRvbWF0aW9uLy4vbm9kZV9tb2R1bGVzL3NlbGVuaXVtLXdlYmRyaXZlci9iaWRpL2NvbnRpbnVlUmVxdWVzdFBhcmFtZXRlcnMuanM/ZTU5MCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgU29mdHdhcmUgRnJlZWRvbSBDb25zZXJ2YW5jeSAoU0ZDKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIFNGQyBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5jb25zdCB7IEJ5dGVzVmFsdWUsIEhlYWRlciB9ID0gcmVxdWlyZSgnLi9uZXR3b3JrVHlwZXMnKVxuXG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIHBhcmFtZXRlcnMgZm9yIGEgY29udGludWUgcmVxdWVzdCBjb21tYW5kLlxuICogRGVzY3JpYmVkIGluIGh0dHBzOi8vdzNjLmdpdGh1Yi5pby93ZWJkcml2ZXItYmlkaS8jY29tbWFuZC1uZXR3b3JrLWNvbnRpbnVlUmVxdWVzdC5cbiAqL1xuY2xhc3MgQ29udGludWVSZXF1ZXN0UGFyYW1ldGVycyB7XG4gICNtYXAgPSBuZXcgTWFwKClcblxuICBjb25zdHJ1Y3RvcihyZXF1ZXN0KSB7XG4gICAgdGhpcy4jbWFwLnNldCgncmVxdWVzdCcsIHJlcXVlc3QpXG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgYm9keSB2YWx1ZSBmb3IgdGhlIHJlcXVlc3QuXG4gICAqXG4gICAqIEBwYXJhbSB7Qnl0ZXNWYWx1ZX0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gc2V0IGFzIHRoZSBib2R5LiBNdXN0IGJlIGFuIGluc3RhbmNlIG9mIEJ5dGVzVmFsdWUuXG4gICAqIEByZXR1cm5zIHtDb250aW51ZVJlcXVlc3RQYXJhbWV0ZXJzfSAtIFRoZSBjdXJyZW50IGluc3RhbmNlIG9mIHRoZSBDb250aW51ZVJlcXVlc3RQYXJhbWV0ZXJzIGZvciBjaGFpbmluZy5cbiAgICogQHRocm93cyB7RXJyb3J9IC0gSWYgdGhlIHZhbHVlIGlzIG5vdCBhbiBpbnN0YW5jZSBvZiBCeXRlc1ZhbHVlLlxuICAgKi9cbiAgYm9keSh2YWx1ZSkge1xuICAgIGlmICghKHZhbHVlIGluc3RhbmNlb2YgQnl0ZXNWYWx1ZSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVmFsdWUgbXVzdCBiZSBhbiBpbnN0YW5jZSBvZiBCeXRlc1ZhbHVlLiBSZWNlaXZlZDogJyR7dmFsdWV9KSdgKVxuICAgIH1cbiAgICB0aGlzLiNtYXAuc2V0KCdib2R5JywgT2JqZWN0LmZyb21FbnRyaWVzKHZhbHVlLmFzTWFwKCkpKVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgY29va2llcyBmb3IgdGhlIHJlcXVlc3QuXG4gICAqXG4gICAqIEBwYXJhbSB7SGVhZGVyW119IGNvb2tpZUhlYWRlcnMgLSBBbiBhcnJheSBvZiBjb29raWUgaGVhZGVycy5cbiAgICogQHJldHVybnMge2NvbnRpbnVlUmVxdWVzdFBhcmFtZXRlcnN9IC0gVGhlIGN1cnJlbnQgaW5zdGFuY2Ugb2YgdGhlIENvbnRpbnVlUmVxdWVzdFBhcmFtZXRlcnMgZm9yIGNoYWluaW5nLlxuICAgKiBAdGhyb3dzIHtFcnJvcn0gLSBJZiBhIGNvb2tpZSBoZWFkZXIgaXMgbm90IGFuIGluc3RhbmNlIG9mIEhlYWRlci5cbiAgICovXG4gIGNvb2tpZXMoY29va2llSGVhZGVycykge1xuICAgIGNvbnN0IGNvb2tpZXMgPSBbXVxuICAgIGNvb2tpZUhlYWRlcnMuZm9yRWFjaCgoaGVhZGVyKSA9PiB7XG4gICAgICBpZiAoIShoZWFkZXIgaW5zdGFuY2VvZiBIZWFkZXIpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ29va2llSGVhZGVyIG11c3QgYmUgYW4gaW5zdGFuY2Ugb2YgSGVhZGVyLiBSZWNlaXZlZDonJHtoZWFkZXJ9J2ApXG4gICAgICB9XG4gICAgICBjb29raWVzLnB1c2goT2JqZWN0LmZyb21FbnRyaWVzKGhlYWRlci5hc01hcCgpKSlcbiAgICB9KVxuXG4gICAgdGhpcy4jbWFwLnNldCgnY29va2llcycsIGNvb2tpZXMpXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBoZWFkZXJzIGZvciB0aGUgcmVxdWVzdC5cbiAgICpcbiAgICogQHBhcmFtIHtIZWFkZXJbXX0gaGVhZGVycyAtIEFuIGFycmF5IG9mIEhlYWRlciBvYmplY3RzLlxuICAgKiBAcmV0dXJucyB7Q29udGludWVSZXF1ZXN0UGFyYW1ldGVyc30gLSBUaGUgY3VycmVudCBpbnN0YW5jZSBvZiB0aGUgQ29udGludWVSZXF1ZXN0UGFyYW1ldGVycyBmb3IgY2hhaW5pbmcuXG4gICAqIEB0aHJvd3Mge0Vycm9yfSAtIElmIHRoZSBoZWFkZXIgdmFsdWUgaXMgbm90IGFuIGluc3RhbmNlIG9mIEhlYWRlci5cbiAgICovXG4gIGhlYWRlcnMoaGVhZGVycykge1xuICAgIGNvbnN0IGhlYWRlckxpc3QgPSBbXVxuICAgIGhlYWRlcnMuZm9yRWFjaCgoaGVhZGVyKSA9PiB7XG4gICAgICBpZiAoIShoZWFkZXIgaW5zdGFuY2VvZiBIZWFkZXIpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSGVhZGVyIHZhbHVlIG11c3QgYmUgYW4gaW5zdGFuY2Ugb2YgSGVhZGVyLiBSZWNlaXZlZDonJHtoZWFkZXJ9J2ApXG4gICAgICB9XG4gICAgICBoZWFkZXJMaXN0LnB1c2goT2JqZWN0LmZyb21FbnRyaWVzKGhlYWRlci5hc01hcCgpKSlcbiAgICB9KVxuXG4gICAgdGhpcy4jbWFwLnNldCgnaGVhZGVycycsIGhlYWRlckxpc3QpXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBIVFRQIG1ldGhvZCBmb3IgdGhlIHJlcXVlc3QuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2QgLSBUaGUgSFRUUCBtZXRob2QgdG8gYmUgc2V0LlxuICAgKiBAcmV0dXJucyB7Q29udGludWVSZXF1ZXN0UGFyYW1ldGVyc30gLSBUaGUgdXBkYXRlZCBgY29udGludWVSZXF1ZXN0UGFyYW1ldGVyc2Agb2JqZWN0LlxuICAgKiBAdGhyb3dzIHtFcnJvcn0gLSBJZiB0aGUgbWV0aG9kIHBhcmFtZXRlciBpcyBub3QgYSBzdHJpbmcuXG4gICAqL1xuICBtZXRob2QobWV0aG9kKSB7XG4gICAgaWYgKHR5cGVvZiBtZXRob2QgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEh0dHAgbWV0aG9kIG11c3QgYmUgYSBzdHJpbmcuIFJlY2VpdmVkOiAnJHttZXRob2R9KSdgKVxuICAgIH1cbiAgICB0aGlzLiNtYXAuc2V0KCdtZXRob2QnLCBtZXRob2QpXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBVUkwgZm9yIHRoZSByZXF1ZXN0LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIC0gVGhlIFVSTCB0byBzZXQgZm9yIHRoZSByZXF1ZXN0LlxuICAgKiBAcmV0dXJucyB7Q29udGludWVSZXF1ZXN0UGFyYW1ldGVyc30gLSBUaGUgY3VycmVudCBpbnN0YW5jZSBvZiB0aGUgQ29udGludWVSZXF1ZXN0UGFyYW1ldGVycyBmb3IgY2hhaW5pbmcuXG4gICAqIEB0aHJvd3Mge0Vycm9yfSAtIElmIHRoZSB1cmwgcGFyYW1ldGVyIGlzIG5vdCBhIHN0cmluZy5cbiAgICovXG4gIHVybCh1cmwpIHtcbiAgICBpZiAodHlwZW9mIHVybCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVXJsIG11c3QgYmUgYSBzdHJpbmcuIFJlY2VpdmVkOicke3VybH0nYClcbiAgICB9XG5cbiAgICB0aGlzLiNtYXAuc2V0KCd1cmwnLCB1cmwpXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIGFzTWFwKCkge1xuICAgIHJldHVybiB0aGlzLiNtYXBcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgQ29udGludWVSZXF1ZXN0UGFyYW1ldGVycyB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/bidi/continueRequestParameters.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/bidi/continueResponseParameters.js":
/*!****************************************************************************!*\
  !*** ./node_modules/selenium-webdriver/bidi/continueResponseParameters.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst { Header } = __webpack_require__(/*! ./networkTypes */ \"(rsc)/./node_modules/selenium-webdriver/bidi/networkTypes.js\")\n\n/**\n * Represents the parameters for a continue response.\n * Described in https://w3c.github.io/webdriver-bidi/#command-network-continueResponse.\n */\nclass ContinueResponseParameters {\n  #map = new Map()\n\n  constructor(request) {\n    this.#map.set('request', request)\n  }\n\n  /**\n   * Sets the cookies for the response.\n   *\n   * @param {Header[]} cookieHeaders - The array of cookie headers.\n   * @returns {ContinueResponseParameters} - The current instance of the ContinueResponseParameters for chaining.\n   * @throws {Error} - If the cookieHeader is not an instance of Header.\n   */\n  cookies(cookieHeaders) {\n    const cookies = []\n    cookieHeaders.forEach((header) => {\n      if (!(header instanceof Header)) {\n        throw new Error(`CookieHeader must be an instance of Header. Received:'${header}'`)\n      }\n      cookies.push(Object.fromEntries(header.asMap()))\n    })\n\n    this.#map.set('cookies', cookies)\n    return this\n  }\n\n  /**\n   * Sets the credentials for authentication.\n   *\n   * @param {string} username - The username for authentication.\n   * @param {string} password - The password for authentication.\n   * @returns {ContinueResponseParameters} The current instance of the ContinueResponseParameters for chaining.\n   * @throws {Error} If username or password is not a string.\n   */\n  credentials(username, password) {\n    if (typeof username !== 'string') {\n      throw new Error(`Username must be a string. Received:'${username}'`)\n    }\n\n    if (typeof password !== 'string') {\n      throw new Error(`Password must be a string. Received:'${password}'`)\n    }\n\n    this.#map.set('credentials', { type: 'password', username: username, password: password })\n\n    return this\n  }\n\n  /**\n   * Sets the headers for the response.\n   *\n   * @param {Header[]} headers - An array of Header objects representing the headers.\n   * @returns {ContinueResponseParameters} - The current instance of the ContinueResponseParameters for chaining.\n   * @throws {Error} - If the header value is not an instance of Header.\n   */\n  headers(headers) {\n    const headerList = []\n    headers.forEach((header) => {\n      if (!(header instanceof Header)) {\n        throw new Error(`Header value must be an instance of Header. Received:'${header}'`)\n      }\n      headerList.push(Object.fromEntries(header.asMap()))\n    })\n\n    this.#map.set('headers', headerList)\n    return this\n  }\n\n  /**\n   * Sets the reason phrase for the response.\n   *\n   * @param {string} reasonPhrase - The reason phrase for the response.\n   * @returns {ContinueResponseParameters} - The current instance of the ContinueResponseParameters for chaining.\n   * @throws {Error} - If the reason phrase is not a string.\n   */\n  reasonPhrase(reasonPhrase) {\n    if (typeof reasonPhrase !== 'string') {\n      throw new Error(`Reason phrase must be a string. Received: '${reasonPhrase})'`)\n    }\n    this.#map.set('reasonPhrase', reasonPhrase)\n    return this\n  }\n\n  /**\n   * Sets the status code for the response.\n   *\n   * @param {number} statusCode - The status code to set.\n   * @returns {ContinueResponseParameters} - The current instance of the ContinueResponseParameters for chaining.\n   * @throws {Error} - If the `statusCode` parameter is not an integer.\n   */\n  statusCode(statusCode) {\n    if (!Number.isInteger(statusCode)) {\n      throw new Error(`Status must be an integer. Received:'${statusCode}'`)\n    }\n\n    this.#map.set('statusCode', statusCode)\n    return this\n  }\n\n  asMap() {\n    return this.#map\n  }\n}\n\nmodule.exports = { ContinueResponseParameters }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc2VsZW5pdW0td2ViZHJpdmVyL2JpZGkvY29udGludWVSZXNwb25zZVBhcmFtZXRlcnMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxRQUFRLFNBQVMsRUFBRSxtQkFBTyxDQUFDLG9GQUFnQjs7QUFFM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFVBQVU7QUFDdkIsZUFBZSw0QkFBNEI7QUFDM0MsY0FBYyxPQUFPO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRkFBaUYsT0FBTztBQUN4RjtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixlQUFlLDRCQUE0QjtBQUMzQyxjQUFjLE9BQU87QUFDckI7QUFDQTtBQUNBO0FBQ0EsOERBQThELFNBQVM7QUFDdkU7O0FBRUE7QUFDQSw4REFBOEQsU0FBUztBQUN2RTs7QUFFQSxtQ0FBbUMsMERBQTBEOztBQUU3RjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsVUFBVTtBQUN2QixlQUFlLDRCQUE0QjtBQUMzQyxjQUFjLE9BQU87QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlGQUFpRixPQUFPO0FBQ3hGO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsZUFBZSw0QkFBNEI7QUFDM0MsY0FBYyxPQUFPO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBLG9FQUFvRSxhQUFhO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixlQUFlLDRCQUE0QjtBQUMzQyxjQUFjLE9BQU87QUFDckI7QUFDQTtBQUNBO0FBQ0EsOERBQThELFdBQVc7QUFDekU7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG1CQUFtQiIsInNvdXJjZXMiOlsid2VicGFjazovL2dvb2dsZS1zaGVldHMtc2VsZW5pdW0tYXV0b21hdGlvbi8uL25vZGVfbW9kdWxlcy9zZWxlbml1bS13ZWJkcml2ZXIvYmlkaS9jb250aW51ZVJlc3BvbnNlUGFyYW1ldGVycy5qcz81MzNmIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBTb2Z0d2FyZSBGcmVlZG9tIENvbnNlcnZhbmN5IChTRkMpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgU0ZDIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmNvbnN0IHsgSGVhZGVyIH0gPSByZXF1aXJlKCcuL25ldHdvcmtUeXBlcycpXG5cbi8qKlxuICogUmVwcmVzZW50cyB0aGUgcGFyYW1ldGVycyBmb3IgYSBjb250aW51ZSByZXNwb25zZS5cbiAqIERlc2NyaWJlZCBpbiBodHRwczovL3czYy5naXRodWIuaW8vd2ViZHJpdmVyLWJpZGkvI2NvbW1hbmQtbmV0d29yay1jb250aW51ZVJlc3BvbnNlLlxuICovXG5jbGFzcyBDb250aW51ZVJlc3BvbnNlUGFyYW1ldGVycyB7XG4gICNtYXAgPSBuZXcgTWFwKClcblxuICBjb25zdHJ1Y3RvcihyZXF1ZXN0KSB7XG4gICAgdGhpcy4jbWFwLnNldCgncmVxdWVzdCcsIHJlcXVlc3QpXG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgY29va2llcyBmb3IgdGhlIHJlc3BvbnNlLlxuICAgKlxuICAgKiBAcGFyYW0ge0hlYWRlcltdfSBjb29raWVIZWFkZXJzIC0gVGhlIGFycmF5IG9mIGNvb2tpZSBoZWFkZXJzLlxuICAgKiBAcmV0dXJucyB7Q29udGludWVSZXNwb25zZVBhcmFtZXRlcnN9IC0gVGhlIGN1cnJlbnQgaW5zdGFuY2Ugb2YgdGhlIENvbnRpbnVlUmVzcG9uc2VQYXJhbWV0ZXJzIGZvciBjaGFpbmluZy5cbiAgICogQHRocm93cyB7RXJyb3J9IC0gSWYgdGhlIGNvb2tpZUhlYWRlciBpcyBub3QgYW4gaW5zdGFuY2Ugb2YgSGVhZGVyLlxuICAgKi9cbiAgY29va2llcyhjb29raWVIZWFkZXJzKSB7XG4gICAgY29uc3QgY29va2llcyA9IFtdXG4gICAgY29va2llSGVhZGVycy5mb3JFYWNoKChoZWFkZXIpID0+IHtcbiAgICAgIGlmICghKGhlYWRlciBpbnN0YW5jZW9mIEhlYWRlcikpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb29raWVIZWFkZXIgbXVzdCBiZSBhbiBpbnN0YW5jZSBvZiBIZWFkZXIuIFJlY2VpdmVkOicke2hlYWRlcn0nYClcbiAgICAgIH1cbiAgICAgIGNvb2tpZXMucHVzaChPYmplY3QuZnJvbUVudHJpZXMoaGVhZGVyLmFzTWFwKCkpKVxuICAgIH0pXG5cbiAgICB0aGlzLiNtYXAuc2V0KCdjb29raWVzJywgY29va2llcylcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGNyZWRlbnRpYWxzIGZvciBhdXRoZW50aWNhdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVzZXJuYW1lIC0gVGhlIHVzZXJuYW1lIGZvciBhdXRoZW50aWNhdGlvbi5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhc3N3b3JkIC0gVGhlIHBhc3N3b3JkIGZvciBhdXRoZW50aWNhdGlvbi5cbiAgICogQHJldHVybnMge0NvbnRpbnVlUmVzcG9uc2VQYXJhbWV0ZXJzfSBUaGUgY3VycmVudCBpbnN0YW5jZSBvZiB0aGUgQ29udGludWVSZXNwb25zZVBhcmFtZXRlcnMgZm9yIGNoYWluaW5nLlxuICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdXNlcm5hbWUgb3IgcGFzc3dvcmQgaXMgbm90IGEgc3RyaW5nLlxuICAgKi9cbiAgY3JlZGVudGlhbHModXNlcm5hbWUsIHBhc3N3b3JkKSB7XG4gICAgaWYgKHR5cGVvZiB1c2VybmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVXNlcm5hbWUgbXVzdCBiZSBhIHN0cmluZy4gUmVjZWl2ZWQ6JyR7dXNlcm5hbWV9J2ApXG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBwYXNzd29yZCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgUGFzc3dvcmQgbXVzdCBiZSBhIHN0cmluZy4gUmVjZWl2ZWQ6JyR7cGFzc3dvcmR9J2ApXG4gICAgfVxuXG4gICAgdGhpcy4jbWFwLnNldCgnY3JlZGVudGlhbHMnLCB7IHR5cGU6ICdwYXNzd29yZCcsIHVzZXJuYW1lOiB1c2VybmFtZSwgcGFzc3dvcmQ6IHBhc3N3b3JkIH0pXG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGhlYWRlcnMgZm9yIHRoZSByZXNwb25zZS5cbiAgICpcbiAgICogQHBhcmFtIHtIZWFkZXJbXX0gaGVhZGVycyAtIEFuIGFycmF5IG9mIEhlYWRlciBvYmplY3RzIHJlcHJlc2VudGluZyB0aGUgaGVhZGVycy5cbiAgICogQHJldHVybnMge0NvbnRpbnVlUmVzcG9uc2VQYXJhbWV0ZXJzfSAtIFRoZSBjdXJyZW50IGluc3RhbmNlIG9mIHRoZSBDb250aW51ZVJlc3BvbnNlUGFyYW1ldGVycyBmb3IgY2hhaW5pbmcuXG4gICAqIEB0aHJvd3Mge0Vycm9yfSAtIElmIHRoZSBoZWFkZXIgdmFsdWUgaXMgbm90IGFuIGluc3RhbmNlIG9mIEhlYWRlci5cbiAgICovXG4gIGhlYWRlcnMoaGVhZGVycykge1xuICAgIGNvbnN0IGhlYWRlckxpc3QgPSBbXVxuICAgIGhlYWRlcnMuZm9yRWFjaCgoaGVhZGVyKSA9PiB7XG4gICAgICBpZiAoIShoZWFkZXIgaW5zdGFuY2VvZiBIZWFkZXIpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSGVhZGVyIHZhbHVlIG11c3QgYmUgYW4gaW5zdGFuY2Ugb2YgSGVhZGVyLiBSZWNlaXZlZDonJHtoZWFkZXJ9J2ApXG4gICAgICB9XG4gICAgICBoZWFkZXJMaXN0LnB1c2goT2JqZWN0LmZyb21FbnRyaWVzKGhlYWRlci5hc01hcCgpKSlcbiAgICB9KVxuXG4gICAgdGhpcy4jbWFwLnNldCgnaGVhZGVycycsIGhlYWRlckxpc3QpXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSByZWFzb24gcGhyYXNlIGZvciB0aGUgcmVzcG9uc2UuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWFzb25QaHJhc2UgLSBUaGUgcmVhc29uIHBocmFzZSBmb3IgdGhlIHJlc3BvbnNlLlxuICAgKiBAcmV0dXJucyB7Q29udGludWVSZXNwb25zZVBhcmFtZXRlcnN9IC0gVGhlIGN1cnJlbnQgaW5zdGFuY2Ugb2YgdGhlIENvbnRpbnVlUmVzcG9uc2VQYXJhbWV0ZXJzIGZvciBjaGFpbmluZy5cbiAgICogQHRocm93cyB7RXJyb3J9IC0gSWYgdGhlIHJlYXNvbiBwaHJhc2UgaXMgbm90IGEgc3RyaW5nLlxuICAgKi9cbiAgcmVhc29uUGhyYXNlKHJlYXNvblBocmFzZSkge1xuICAgIGlmICh0eXBlb2YgcmVhc29uUGhyYXNlICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBSZWFzb24gcGhyYXNlIG11c3QgYmUgYSBzdHJpbmcuIFJlY2VpdmVkOiAnJHtyZWFzb25QaHJhc2V9KSdgKVxuICAgIH1cbiAgICB0aGlzLiNtYXAuc2V0KCdyZWFzb25QaHJhc2UnLCByZWFzb25QaHJhc2UpXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBzdGF0dXMgY29kZSBmb3IgdGhlIHJlc3BvbnNlLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gc3RhdHVzQ29kZSAtIFRoZSBzdGF0dXMgY29kZSB0byBzZXQuXG4gICAqIEByZXR1cm5zIHtDb250aW51ZVJlc3BvbnNlUGFyYW1ldGVyc30gLSBUaGUgY3VycmVudCBpbnN0YW5jZSBvZiB0aGUgQ29udGludWVSZXNwb25zZVBhcmFtZXRlcnMgZm9yIGNoYWluaW5nLlxuICAgKiBAdGhyb3dzIHtFcnJvcn0gLSBJZiB0aGUgYHN0YXR1c0NvZGVgIHBhcmFtZXRlciBpcyBub3QgYW4gaW50ZWdlci5cbiAgICovXG4gIHN0YXR1c0NvZGUoc3RhdHVzQ29kZSkge1xuICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihzdGF0dXNDb2RlKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBTdGF0dXMgbXVzdCBiZSBhbiBpbnRlZ2VyLiBSZWNlaXZlZDonJHtzdGF0dXNDb2RlfSdgKVxuICAgIH1cblxuICAgIHRoaXMuI21hcC5zZXQoJ3N0YXR1c0NvZGUnLCBzdGF0dXNDb2RlKVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBhc01hcCgpIHtcbiAgICByZXR1cm4gdGhpcy4jbWFwXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7IENvbnRpbnVlUmVzcG9uc2VQYXJhbWV0ZXJzIH1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/bidi/continueResponseParameters.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/bidi/createContextParameters.js":
/*!*************************************************************************!*\
  !*** ./node_modules/selenium-webdriver/bidi/createContextParameters.js ***!
  \*************************************************************************/
/***/ ((module) => {

eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * Represents a set of parameters for creating a context.\n * Described in https://w3c.github.io/webdriver-bidi/#command-browsingContext-create.\n */\nclass CreateContextParameters {\n  #map = new Map()\n\n  /**\n   * Sets the reference context.\n   * @param {string} id - The ID of the reference context.\n   * @returns {CreateContextParameters} - The updated instance of CreateContextParameters for chaining.\n   * @throws {Error} - If the provided ID is not a string.\n   */\n  referenceContext(id) {\n    if (typeof id !== 'string') {\n      throw new Error(`ReferenceContext must be string. Received:'${id}'`)\n    }\n    this.#map.set('referenceContext', id)\n    return this\n  }\n\n  /**\n   * Sets the background parameter.\n   *\n   * @param {boolean} background - The background value to set.\n   * @returns {CreateContextParameters} - The updated instance of CreateContextParameters for chaining.\n   * @throws {Error} - If the background parameter is not a boolean.\n   */\n  background(background) {\n    if (typeof background !== 'boolean') {\n      throw new Error(`Background must be boolean. Received:'${background}'`)\n    }\n    this.#map.set('background', background)\n    return this\n  }\n\n  /**\n   * Sets the user context.\n   * @param {string} userContext - The user context to set.\n   * @returns {CreateContextParameters} - The updated instance of CreateContextParameters for chaining.\n   * @throws {Error} - If the userContext parameter is not a string.\n   */\n  userContext(userContext) {\n    if (typeof userContext !== 'string') {\n      throw new Error(`UserContext must be string. Received:'${userContext}'`)\n    }\n    this.#map.set('userContext', userContext)\n    return this\n  }\n\n  asMap() {\n    return this.#map\n  }\n}\n\nmodule.exports = { CreateContextParameters }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc2VsZW5pdW0td2ViZHJpdmVyL2JpZGkvY3JlYXRlQ29udGV4dFBhcmFtZXRlcnMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixlQUFlLHlCQUF5QjtBQUN4QyxjQUFjLE9BQU87QUFDckI7QUFDQTtBQUNBO0FBQ0Esb0VBQW9FLEdBQUc7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxTQUFTO0FBQ3RCLGVBQWUseUJBQXlCO0FBQ3hDLGNBQWMsT0FBTztBQUNyQjtBQUNBO0FBQ0E7QUFDQSwrREFBK0QsV0FBVztBQUMxRTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGVBQWUseUJBQXlCO0FBQ3hDLGNBQWMsT0FBTztBQUNyQjtBQUNBO0FBQ0E7QUFDQSwrREFBK0QsWUFBWTtBQUMzRTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxtQkFBbUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nb29nbGUtc2hlZXRzLXNlbGVuaXVtLWF1dG9tYXRpb24vLi9ub2RlX21vZHVsZXMvc2VsZW5pdW0td2ViZHJpdmVyL2JpZGkvY3JlYXRlQ29udGV4dFBhcmFtZXRlcnMuanM/YWE2NiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgU29mdHdhcmUgRnJlZWRvbSBDb25zZXJ2YW5jeSAoU0ZDKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIFNGQyBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBzZXQgb2YgcGFyYW1ldGVycyBmb3IgY3JlYXRpbmcgYSBjb250ZXh0LlxuICogRGVzY3JpYmVkIGluIGh0dHBzOi8vdzNjLmdpdGh1Yi5pby93ZWJkcml2ZXItYmlkaS8jY29tbWFuZC1icm93c2luZ0NvbnRleHQtY3JlYXRlLlxuICovXG5jbGFzcyBDcmVhdGVDb250ZXh0UGFyYW1ldGVycyB7XG4gICNtYXAgPSBuZXcgTWFwKClcblxuICAvKipcbiAgICogU2V0cyB0aGUgcmVmZXJlbmNlIGNvbnRleHQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCAtIFRoZSBJRCBvZiB0aGUgcmVmZXJlbmNlIGNvbnRleHQuXG4gICAqIEByZXR1cm5zIHtDcmVhdGVDb250ZXh0UGFyYW1ldGVyc30gLSBUaGUgdXBkYXRlZCBpbnN0YW5jZSBvZiBDcmVhdGVDb250ZXh0UGFyYW1ldGVycyBmb3IgY2hhaW5pbmcuXG4gICAqIEB0aHJvd3Mge0Vycm9yfSAtIElmIHRoZSBwcm92aWRlZCBJRCBpcyBub3QgYSBzdHJpbmcuXG4gICAqL1xuICByZWZlcmVuY2VDb250ZXh0KGlkKSB7XG4gICAgaWYgKHR5cGVvZiBpZCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgUmVmZXJlbmNlQ29udGV4dCBtdXN0IGJlIHN0cmluZy4gUmVjZWl2ZWQ6JyR7aWR9J2ApXG4gICAgfVxuICAgIHRoaXMuI21hcC5zZXQoJ3JlZmVyZW5jZUNvbnRleHQnLCBpZClcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGJhY2tncm91bmQgcGFyYW1ldGVyLlxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGJhY2tncm91bmQgLSBUaGUgYmFja2dyb3VuZCB2YWx1ZSB0byBzZXQuXG4gICAqIEByZXR1cm5zIHtDcmVhdGVDb250ZXh0UGFyYW1ldGVyc30gLSBUaGUgdXBkYXRlZCBpbnN0YW5jZSBvZiBDcmVhdGVDb250ZXh0UGFyYW1ldGVycyBmb3IgY2hhaW5pbmcuXG4gICAqIEB0aHJvd3Mge0Vycm9yfSAtIElmIHRoZSBiYWNrZ3JvdW5kIHBhcmFtZXRlciBpcyBub3QgYSBib29sZWFuLlxuICAgKi9cbiAgYmFja2dyb3VuZChiYWNrZ3JvdW5kKSB7XG4gICAgaWYgKHR5cGVvZiBiYWNrZ3JvdW5kICE9PSAnYm9vbGVhbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQmFja2dyb3VuZCBtdXN0IGJlIGJvb2xlYW4uIFJlY2VpdmVkOicke2JhY2tncm91bmR9J2ApXG4gICAgfVxuICAgIHRoaXMuI21hcC5zZXQoJ2JhY2tncm91bmQnLCBiYWNrZ3JvdW5kKVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgdXNlciBjb250ZXh0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdXNlckNvbnRleHQgLSBUaGUgdXNlciBjb250ZXh0IHRvIHNldC5cbiAgICogQHJldHVybnMge0NyZWF0ZUNvbnRleHRQYXJhbWV0ZXJzfSAtIFRoZSB1cGRhdGVkIGluc3RhbmNlIG9mIENyZWF0ZUNvbnRleHRQYXJhbWV0ZXJzIGZvciBjaGFpbmluZy5cbiAgICogQHRocm93cyB7RXJyb3J9IC0gSWYgdGhlIHVzZXJDb250ZXh0IHBhcmFtZXRlciBpcyBub3QgYSBzdHJpbmcuXG4gICAqL1xuICB1c2VyQ29udGV4dCh1c2VyQ29udGV4dCkge1xuICAgIGlmICh0eXBlb2YgdXNlckNvbnRleHQgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFVzZXJDb250ZXh0IG11c3QgYmUgc3RyaW5nLiBSZWNlaXZlZDonJHt1c2VyQ29udGV4dH0nYClcbiAgICB9XG4gICAgdGhpcy4jbWFwLnNldCgndXNlckNvbnRleHQnLCB1c2VyQ29udGV4dClcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgYXNNYXAoKSB7XG4gICAgcmV0dXJuIHRoaXMuI21hcFxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0geyBDcmVhdGVDb250ZXh0UGFyYW1ldGVycyB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/bidi/createContextParameters.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/bidi/evaluateResult.js":
/*!****************************************************************!*\
  !*** ./node_modules/selenium-webdriver/bidi/evaluateResult.js ***!
  \****************************************************************/
/***/ ((module) => {

eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * Represents the type of script evaluation result.\n * Described in https://w3c.github.io/webdriver-bidi/#type-script-EvaluateResult.\n * @enum {string}\n */\nconst EvaluateResultType = {\n  SUCCESS: 'success',\n  EXCEPTION: 'exception',\n}\n\n/**\n * Represents a successful evaluation result.\n * @class\n */\nclass EvaluateResultSuccess {\n  constructor(realmId, value) {\n    this.resultType = EvaluateResultType.SUCCESS\n    this.realmId = realmId\n    this.result = value\n  }\n}\n\n/**\n * Represents an exception that occurred during evaluation of a result.\n * @class\n */\nclass EvaluateResultException {\n  constructor(realmId, exceptionDetails) {\n    this.resultType = EvaluateResultType.EXCEPTION\n    this.realmId = realmId\n    this.exceptionDetails = exceptionDetails\n  }\n}\n\n/**\n * Represents details of an exception.\n * @class\n */\nclass ExceptionDetails {\n  constructor(exceptionDetails) {\n    this.columnNumber = 'columnNumber' in exceptionDetails ? exceptionDetails['columnNumber'] : null\n    this.exception = 'exception' in exceptionDetails ? exceptionDetails['exception'] : null\n    this.lineNumber = 'lineNumber' in exceptionDetails ? exceptionDetails['lineNumber'] : null\n    this.stackTrace = 'stackTrace' in exceptionDetails ? exceptionDetails['stackTrace'] : null\n    this.text = 'text' in exceptionDetails ? exceptionDetails['text'] : null\n  }\n}\n\nmodule.exports = {\n  EvaluateResultType,\n  EvaluateResultSuccess,\n  EvaluateResultException,\n  ExceptionDetails,\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc2VsZW5pdW0td2ViZHJpdmVyL2JpZGkvZXZhbHVhdGVSZXN1bHQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ29vZ2xlLXNoZWV0cy1zZWxlbml1bS1hdXRvbWF0aW9uLy4vbm9kZV9tb2R1bGVzL3NlbGVuaXVtLXdlYmRyaXZlci9iaWRpL2V2YWx1YXRlUmVzdWx0LmpzPzk3ZjUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIFNvZnR3YXJlIEZyZWVkb20gQ29uc2VydmFuY3kgKFNGQykgdW5kZXIgb25lXG4vLyBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbi8vIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4vLyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBTRkMgbGljZW5zZXMgdGhpcyBmaWxlXG4vLyB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4vLyBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbi8vIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbi8vIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4vLyBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuLy8gS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4vLyBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4vLyB1bmRlciB0aGUgTGljZW5zZS5cblxuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSB0eXBlIG9mIHNjcmlwdCBldmFsdWF0aW9uIHJlc3VsdC5cbiAqIERlc2NyaWJlZCBpbiBodHRwczovL3czYy5naXRodWIuaW8vd2ViZHJpdmVyLWJpZGkvI3R5cGUtc2NyaXB0LUV2YWx1YXRlUmVzdWx0LlxuICogQGVudW0ge3N0cmluZ31cbiAqL1xuY29uc3QgRXZhbHVhdGVSZXN1bHRUeXBlID0ge1xuICBTVUNDRVNTOiAnc3VjY2VzcycsXG4gIEVYQ0VQVElPTjogJ2V4Y2VwdGlvbicsXG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIHN1Y2Nlc3NmdWwgZXZhbHVhdGlvbiByZXN1bHQuXG4gKiBAY2xhc3NcbiAqL1xuY2xhc3MgRXZhbHVhdGVSZXN1bHRTdWNjZXNzIHtcbiAgY29uc3RydWN0b3IocmVhbG1JZCwgdmFsdWUpIHtcbiAgICB0aGlzLnJlc3VsdFR5cGUgPSBFdmFsdWF0ZVJlc3VsdFR5cGUuU1VDQ0VTU1xuICAgIHRoaXMucmVhbG1JZCA9IHJlYWxtSWRcbiAgICB0aGlzLnJlc3VsdCA9IHZhbHVlXG4gIH1cbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGFuIGV4Y2VwdGlvbiB0aGF0IG9jY3VycmVkIGR1cmluZyBldmFsdWF0aW9uIG9mIGEgcmVzdWx0LlxuICogQGNsYXNzXG4gKi9cbmNsYXNzIEV2YWx1YXRlUmVzdWx0RXhjZXB0aW9uIHtcbiAgY29uc3RydWN0b3IocmVhbG1JZCwgZXhjZXB0aW9uRGV0YWlscykge1xuICAgIHRoaXMucmVzdWx0VHlwZSA9IEV2YWx1YXRlUmVzdWx0VHlwZS5FWENFUFRJT05cbiAgICB0aGlzLnJlYWxtSWQgPSByZWFsbUlkXG4gICAgdGhpcy5leGNlcHRpb25EZXRhaWxzID0gZXhjZXB0aW9uRGV0YWlsc1xuICB9XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBkZXRhaWxzIG9mIGFuIGV4Y2VwdGlvbi5cbiAqIEBjbGFzc1xuICovXG5jbGFzcyBFeGNlcHRpb25EZXRhaWxzIHtcbiAgY29uc3RydWN0b3IoZXhjZXB0aW9uRGV0YWlscykge1xuICAgIHRoaXMuY29sdW1uTnVtYmVyID0gJ2NvbHVtbk51bWJlcicgaW4gZXhjZXB0aW9uRGV0YWlscyA/IGV4Y2VwdGlvbkRldGFpbHNbJ2NvbHVtbk51bWJlciddIDogbnVsbFxuICAgIHRoaXMuZXhjZXB0aW9uID0gJ2V4Y2VwdGlvbicgaW4gZXhjZXB0aW9uRGV0YWlscyA/IGV4Y2VwdGlvbkRldGFpbHNbJ2V4Y2VwdGlvbiddIDogbnVsbFxuICAgIHRoaXMubGluZU51bWJlciA9ICdsaW5lTnVtYmVyJyBpbiBleGNlcHRpb25EZXRhaWxzID8gZXhjZXB0aW9uRGV0YWlsc1snbGluZU51bWJlciddIDogbnVsbFxuICAgIHRoaXMuc3RhY2tUcmFjZSA9ICdzdGFja1RyYWNlJyBpbiBleGNlcHRpb25EZXRhaWxzID8gZXhjZXB0aW9uRGV0YWlsc1snc3RhY2tUcmFjZSddIDogbnVsbFxuICAgIHRoaXMudGV4dCA9ICd0ZXh0JyBpbiBleGNlcHRpb25EZXRhaWxzID8gZXhjZXB0aW9uRGV0YWlsc1sndGV4dCddIDogbnVsbFxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBFdmFsdWF0ZVJlc3VsdFR5cGUsXG4gIEV2YWx1YXRlUmVzdWx0U3VjY2VzcyxcbiAgRXZhbHVhdGVSZXN1bHRFeGNlcHRpb24sXG4gIEV4Y2VwdGlvbkRldGFpbHMsXG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/bidi/evaluateResult.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/bidi/filterBy.js":
/*!**********************************************************!*\
  !*** ./node_modules/selenium-webdriver/bidi/filterBy.js ***!
  \**********************************************************/
/***/ ((module) => {

eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nclass FilterBy {\n  constructor(level) {\n    this.level_ = level\n  }\n\n  static logLevel(level) {\n    if (level === undefined || (level != undefined && !['debug', 'error', 'info', 'warning'].includes(level))) {\n      throw Error(\n        `Please pass valid log level. Valid log levels are 'debug', 'error', 'info' and 'warning'. Received: ${level}`,\n      )\n    }\n\n    return new FilterBy(level)\n  }\n\n  getLevel() {\n    return this.level_\n  }\n}\n\n// PUBLIC API\n\nmodule.exports = {\n  FilterBy,\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc2VsZW5pdW0td2ViZHJpdmVyL2JpZGkvZmlsdGVyQnkuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSwrR0FBK0csTUFBTTtBQUNySDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ29vZ2xlLXNoZWV0cy1zZWxlbml1bS1hdXRvbWF0aW9uLy4vbm9kZV9tb2R1bGVzL3NlbGVuaXVtLXdlYmRyaXZlci9iaWRpL2ZpbHRlckJ5LmpzPzMwYzUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIFNvZnR3YXJlIEZyZWVkb20gQ29uc2VydmFuY3kgKFNGQykgdW5kZXIgb25lXG4vLyBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbi8vIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4vLyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBTRkMgbGljZW5zZXMgdGhpcyBmaWxlXG4vLyB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4vLyBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbi8vIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbi8vIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4vLyBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuLy8gS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4vLyBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4vLyB1bmRlciB0aGUgTGljZW5zZS5cblxuY2xhc3MgRmlsdGVyQnkge1xuICBjb25zdHJ1Y3RvcihsZXZlbCkge1xuICAgIHRoaXMubGV2ZWxfID0gbGV2ZWxcbiAgfVxuXG4gIHN0YXRpYyBsb2dMZXZlbChsZXZlbCkge1xuICAgIGlmIChsZXZlbCA9PT0gdW5kZWZpbmVkIHx8IChsZXZlbCAhPSB1bmRlZmluZWQgJiYgIVsnZGVidWcnLCAnZXJyb3InLCAnaW5mbycsICd3YXJuaW5nJ10uaW5jbHVkZXMobGV2ZWwpKSkge1xuICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgIGBQbGVhc2UgcGFzcyB2YWxpZCBsb2cgbGV2ZWwuIFZhbGlkIGxvZyBsZXZlbHMgYXJlICdkZWJ1ZycsICdlcnJvcicsICdpbmZvJyBhbmQgJ3dhcm5pbmcnLiBSZWNlaXZlZDogJHtsZXZlbH1gLFxuICAgICAgKVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgRmlsdGVyQnkobGV2ZWwpXG4gIH1cblxuICBnZXRMZXZlbCgpIHtcbiAgICByZXR1cm4gdGhpcy5sZXZlbF9cbiAgfVxufVxuXG4vLyBQVUJMSUMgQVBJXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBGaWx0ZXJCeSxcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/bidi/filterBy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/bidi/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/selenium-webdriver/bidi/index.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst { EventEmitter } = __webpack_require__(/*! node:events */ \"node:events\")\nconst WebSocket = __webpack_require__(/*! ws */ \"(rsc)/./node_modules/ws/index.js\")\n\nconst RESPONSE_TIMEOUT = 1000 * 30\n\nclass Index extends EventEmitter {\n  id = 0\n  connected = false\n  events = []\n  browsingContexts = []\n\n  /**\n   * Create a new websocket connection\n   * @param _webSocketUrl\n   */\n  constructor(_webSocketUrl) {\n    super()\n    this.connected = false\n    this._ws = new WebSocket(_webSocketUrl)\n    this._ws.on('open', () => {\n      this.connected = true\n    })\n  }\n\n  /**\n   * @returns {WebSocket}\n   */\n  get socket() {\n    return this._ws\n  }\n\n  /**\n   * @returns {boolean|*}\n   */\n  get isConnected() {\n    return this.connected\n  }\n\n  /**\n   * Get Bidi Status\n   * @returns {Promise<*>}\n   */\n  get status() {\n    return this.send({\n      method: 'session.status',\n      params: {},\n    })\n  }\n\n  /**\n   * Resolve connection\n   * @returns {Promise<unknown>}\n   */\n  async waitForConnection() {\n    return new Promise((resolve) => {\n      if (this.connected) {\n        resolve()\n      } else {\n        this._ws.once('open', () => {\n          resolve()\n        })\n      }\n    })\n  }\n\n  /**\n   * Sends a bidi request\n   * @param params\n   * @returns {Promise<unknown>}\n   */\n  async send(params) {\n    if (!this.connected) {\n      await this.waitForConnection()\n    }\n\n    const id = ++this.id\n\n    this._ws.send(JSON.stringify({ id, ...params }))\n\n    return new Promise((resolve, reject) => {\n      const timeoutId = setTimeout(() => {\n        reject(new Error(`Request with id ${id} timed out`))\n        handler.off('message', listener)\n      }, RESPONSE_TIMEOUT)\n\n      const listener = (data) => {\n        try {\n          const payload = JSON.parse(data.toString())\n          if (payload.id === id) {\n            clearTimeout(timeoutId)\n            handler.off('message', listener)\n            resolve(payload)\n          }\n        } catch (err) {\n          // eslint-disable-next-line no-undef\n          log.error(`Failed parse message: ${err.message}`)\n        }\n      }\n\n      const handler = this._ws.on('message', listener)\n    })\n  }\n\n  /**\n   * Subscribe to events\n   * @param events\n   * @param browsingContexts\n   * @returns {Promise<void>}\n   */\n  async subscribe(events, browsingContexts) {\n    function toArray(arg) {\n      if (arg === undefined) {\n        return []\n      }\n\n      return Array.isArray(arg) ? [...arg] : [arg]\n    }\n\n    const eventsArray = toArray(events)\n    const contextsArray = toArray(browsingContexts)\n\n    const params = {\n      method: 'session.subscribe',\n      params: {},\n    }\n\n    if (eventsArray.length && eventsArray.some((event) => typeof event !== 'string')) {\n      throw new TypeError('events should be string or string array')\n    }\n\n    if (contextsArray.length && contextsArray.some((context) => typeof context !== 'string')) {\n      throw new TypeError('browsingContexts should be string or string array')\n    }\n\n    if (eventsArray.length) {\n      params.params.events = eventsArray\n    }\n\n    if (contextsArray.length) {\n      params.params.contexts = contextsArray\n    }\n\n    this.events.push(...eventsArray)\n\n    await this.send(params)\n  }\n\n  /**\n   * Unsubscribe to events\n   * @param events\n   * @param browsingContexts\n   * @returns {Promise<void>}\n   */\n  async unsubscribe(events, browsingContexts) {\n    const eventsToRemove = typeof events === 'string' ? [events] : events\n\n    // Check if the eventsToRemove are in the subscribed events array\n    // Filter out events that are not in this.events before filtering\n    const existingEvents = eventsToRemove.filter((event) => this.events.includes(event))\n\n    // Remove the events from the subscribed events array\n    this.events = this.events.filter((event) => !existingEvents.includes(event))\n\n    if (typeof browsingContexts === 'string') {\n      this.browsingContexts.pop()\n    } else if (Array.isArray(browsingContexts)) {\n      this.browsingContexts = this.browsingContexts.filter((id) => !browsingContexts.includes(id))\n    }\n\n    if (existingEvents.length === 0) {\n      return\n    }\n    const params = {\n      method: 'session.unsubscribe',\n      params: {\n        events: existingEvents,\n      },\n    }\n\n    if (this.browsingContexts.length > 0) {\n      params.params.contexts = this.browsingContexts\n    }\n\n    await this.send(params)\n  }\n\n  /**\n   * Close ws connection.\n   * @returns {Promise<unknown>}\n   */\n  close() {\n    const closeWebSocket = (callback) => {\n      // don't close if it's already closed\n      if (this._ws.readyState === 3) {\n        callback()\n      } else {\n        // don't notify on user-initiated shutdown ('disconnect' event)\n        this._ws.removeAllListeners('close')\n        this._ws.once('close', () => {\n          this._ws.removeAllListeners()\n          callback()\n        })\n        this._ws.close()\n      }\n    }\n    return new Promise((fulfill, _) => {\n      closeWebSocket(fulfill)\n    })\n  }\n}\n\n/**\n * API\n * @type {function(*): Promise<Index>}\n */\nmodule.exports = Index\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/bidi/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/bidi/interceptPhase.js":
/*!****************************************************************!*\
  !*** ./node_modules/selenium-webdriver/bidi/interceptPhase.js ***!
  \****************************************************************/
/***/ ((module) => {

eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * Represents the different phases of intercepting network requests and responses.\n * @enum {string}\n */\nconst InterceptPhase = {\n  BEFORE_REQUEST_SENT: 'beforeRequestSent',\n  RESPONSE_STARTED: 'responseStarted',\n  AUTH_REQUIRED: 'authRequired',\n}\n\nmodule.exports = { InterceptPhase }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc2VsZW5pdW0td2ViZHJpdmVyL2JpZGkvaW50ZXJjZXB0UGhhc2UuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxtQkFBbUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nb29nbGUtc2hlZXRzLXNlbGVuaXVtLWF1dG9tYXRpb24vLi9ub2RlX21vZHVsZXMvc2VsZW5pdW0td2ViZHJpdmVyL2JpZGkvaW50ZXJjZXB0UGhhc2UuanM/YmZkYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgU29mdHdhcmUgRnJlZWRvbSBDb25zZXJ2YW5jeSAoU0ZDKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIFNGQyBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIGRpZmZlcmVudCBwaGFzZXMgb2YgaW50ZXJjZXB0aW5nIG5ldHdvcmsgcmVxdWVzdHMgYW5kIHJlc3BvbnNlcy5cbiAqIEBlbnVtIHtzdHJpbmd9XG4gKi9cbmNvbnN0IEludGVyY2VwdFBoYXNlID0ge1xuICBCRUZPUkVfUkVRVUVTVF9TRU5UOiAnYmVmb3JlUmVxdWVzdFNlbnQnLFxuICBSRVNQT05TRV9TVEFSVEVEOiAncmVzcG9uc2VTdGFydGVkJyxcbiAgQVVUSF9SRVFVSVJFRDogJ2F1dGhSZXF1aXJlZCcsXG59XG5cbm1vZHVsZS5leHBvcnRzID0geyBJbnRlcmNlcHRQaGFzZSB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/bidi/interceptPhase.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/bidi/logEntries.js":
/*!************************************************************!*\
  !*** ./node_modules/selenium-webdriver/bidi/logEntries.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\n\nconst { Source } = __webpack_require__(/*! ./scriptTypes */ \"(rsc)/./node_modules/selenium-webdriver/bidi/scriptTypes.js\")\n\n/**\n * Represents a base log entry.\n * Desribed in https://w3c.github.io/webdriver-bidi/#types-log-logentry.\n */\nclass BaseLogEntry {\n  /**\n   * Creates a new instance of BaseLogEntry.\n   * @param {string} level - The log level.\n   * @param {string} text - The log source.\n   * @param {string} text - The log text.\n   * @param {number} timeStamp - The log timestamp.\n   * @param {string} stackTrace - The log stack trace.\n   */\n  constructor(level, source, text, timeStamp, stackTrace) {\n    this._level = level\n    this._source = new Source(source)\n    this._text = text\n    this._timeStamp = timeStamp\n    this._stackTrace = stackTrace\n  }\n\n  /**\n   * Gets the log level.\n   * @returns {string} The log level.\n   */\n  get level() {\n    return this._level\n  }\n\n  /**\n   * Gets the log text.\n   * @returns {string} The log text.\n   */\n  get text() {\n    return this._text\n  }\n\n  /**\n   * Gets the log timestamp.\n   * @returns {number} The log timestamp.\n   */\n  get timeStamp() {\n    return this._timeStamp\n  }\n\n  /**\n   * Gets the log stack trace.\n   * @returns {string} The log stack trace.\n   */\n  get stackTrace() {\n    return this._stackTrace\n  }\n\n  get source() {\n    return this._source\n  }\n}\n\n/**\n * Represents a generic log entry.\n * @class\n * @extends BaseLogEntry\n */\nclass GenericLogEntry extends BaseLogEntry {\n  /**\n   * Creates an instance of GenericLogEntry.\n   * @param {string} level - The log level.\n   * @param {string} text - The log text.\n   * @param {Date} timeStamp - The log timestamp.\n   * @param {string} type - The log type.\n   * @param {string} stackTrace - The log stack trace.\n   */\n  constructor(level, source, text, timeStamp, type, stackTrace) {\n    super(level, source, text, timeStamp, stackTrace)\n    this._type = type\n  }\n\n  /**\n   * Gets the log type.\n   * @returns {string} The log type.\n   */\n  get type() {\n    return this._type\n  }\n}\n\n/**\n * Represents a log entry for console logs.\n * @class\n * @extends GenericLogEntry\n */\nclass ConsoleLogEntry extends GenericLogEntry {\n  constructor(level, source, text, timeStamp, type, method, args, stackTrace) {\n    super(level, source, text, timeStamp, type, stackTrace)\n    this._method = method\n    this._args = args\n  }\n\n  /**\n   * Gets the method associated with the log entry.\n   * @returns {string} The method associated with the log entry.\n   */\n  get method() {\n    return this._method\n  }\n  /**\n   * Gets the arguments associated with the log entry.\n   * @returns {Array} The arguments associated with the log entry.\n   */\n  get args() {\n    return this._args\n  }\n}\n\n/**\n * Represents a log entry for JavaScript logs.\n * @class\n * @extends GenericLogEntry\n */\nclass JavascriptLogEntry extends GenericLogEntry {\n  constructor(level, source, text, timeStamp, type, stackTrace) {\n    super(level, source, text, timeStamp, type, stackTrace)\n  }\n}\n\n// PUBLIC API\n\nmodule.exports = {\n  BaseLogEntry,\n  GenericLogEntry,\n  ConsoleLogEntry,\n  JavascriptLogEntry,\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc2VsZW5pdW0td2ViZHJpdmVyL2JpZGkvbG9nRW50cmllcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVZOztBQUVaLFFBQVEsU0FBUyxFQUFFLG1CQUFPLENBQUMsa0ZBQWU7O0FBRTFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSxNQUFNO0FBQ25CLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2dvb2dsZS1zaGVldHMtc2VsZW5pdW0tYXV0b21hdGlvbi8uL25vZGVfbW9kdWxlcy9zZWxlbml1bS13ZWJkcml2ZXIvYmlkaS9sb2dFbnRyaWVzLmpzPzExNjIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIFNvZnR3YXJlIEZyZWVkb20gQ29uc2VydmFuY3kgKFNGQykgdW5kZXIgb25lXG4vLyBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbi8vIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4vLyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBTRkMgbGljZW5zZXMgdGhpcyBmaWxlXG4vLyB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4vLyBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbi8vIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbi8vIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4vLyBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuLy8gS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4vLyBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4vLyB1bmRlciB0aGUgTGljZW5zZS5cblxuJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IHsgU291cmNlIH0gPSByZXF1aXJlKCcuL3NjcmlwdFR5cGVzJylcblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgYmFzZSBsb2cgZW50cnkuXG4gKiBEZXNyaWJlZCBpbiBodHRwczovL3czYy5naXRodWIuaW8vd2ViZHJpdmVyLWJpZGkvI3R5cGVzLWxvZy1sb2dlbnRyeS5cbiAqL1xuY2xhc3MgQmFzZUxvZ0VudHJ5IHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgQmFzZUxvZ0VudHJ5LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbGV2ZWwgLSBUaGUgbG9nIGxldmVsLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCAtIFRoZSBsb2cgc291cmNlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCAtIFRoZSBsb2cgdGV4dC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHRpbWVTdGFtcCAtIFRoZSBsb2cgdGltZXN0YW1wLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RhY2tUcmFjZSAtIFRoZSBsb2cgc3RhY2sgdHJhY2UuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihsZXZlbCwgc291cmNlLCB0ZXh0LCB0aW1lU3RhbXAsIHN0YWNrVHJhY2UpIHtcbiAgICB0aGlzLl9sZXZlbCA9IGxldmVsXG4gICAgdGhpcy5fc291cmNlID0gbmV3IFNvdXJjZShzb3VyY2UpXG4gICAgdGhpcy5fdGV4dCA9IHRleHRcbiAgICB0aGlzLl90aW1lU3RhbXAgPSB0aW1lU3RhbXBcbiAgICB0aGlzLl9zdGFja1RyYWNlID0gc3RhY2tUcmFjZVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGxvZyBsZXZlbC5cbiAgICogQHJldHVybnMge3N0cmluZ30gVGhlIGxvZyBsZXZlbC5cbiAgICovXG4gIGdldCBsZXZlbCgpIHtcbiAgICByZXR1cm4gdGhpcy5fbGV2ZWxcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBsb2cgdGV4dC5cbiAgICogQHJldHVybnMge3N0cmluZ30gVGhlIGxvZyB0ZXh0LlxuICAgKi9cbiAgZ2V0IHRleHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RleHRcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBsb2cgdGltZXN0YW1wLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgbG9nIHRpbWVzdGFtcC5cbiAgICovXG4gIGdldCB0aW1lU3RhbXAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RpbWVTdGFtcFxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGxvZyBzdGFjayB0cmFjZS5cbiAgICogQHJldHVybnMge3N0cmluZ30gVGhlIGxvZyBzdGFjayB0cmFjZS5cbiAgICovXG4gIGdldCBzdGFja1RyYWNlKCkge1xuICAgIHJldHVybiB0aGlzLl9zdGFja1RyYWNlXG4gIH1cblxuICBnZXQgc291cmNlKCkge1xuICAgIHJldHVybiB0aGlzLl9zb3VyY2VcbiAgfVxufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBnZW5lcmljIGxvZyBlbnRyeS5cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgQmFzZUxvZ0VudHJ5XG4gKi9cbmNsYXNzIEdlbmVyaWNMb2dFbnRyeSBleHRlbmRzIEJhc2VMb2dFbnRyeSB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIEdlbmVyaWNMb2dFbnRyeS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGxldmVsIC0gVGhlIGxvZyBsZXZlbC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgLSBUaGUgbG9nIHRleHQuXG4gICAqIEBwYXJhbSB7RGF0ZX0gdGltZVN0YW1wIC0gVGhlIGxvZyB0aW1lc3RhbXAuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gVGhlIGxvZyB0eXBlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RhY2tUcmFjZSAtIFRoZSBsb2cgc3RhY2sgdHJhY2UuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihsZXZlbCwgc291cmNlLCB0ZXh0LCB0aW1lU3RhbXAsIHR5cGUsIHN0YWNrVHJhY2UpIHtcbiAgICBzdXBlcihsZXZlbCwgc291cmNlLCB0ZXh0LCB0aW1lU3RhbXAsIHN0YWNrVHJhY2UpXG4gICAgdGhpcy5fdHlwZSA9IHR5cGVcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBsb2cgdHlwZS5cbiAgICogQHJldHVybnMge3N0cmluZ30gVGhlIGxvZyB0eXBlLlxuICAgKi9cbiAgZ2V0IHR5cGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3R5cGVcbiAgfVxufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBsb2cgZW50cnkgZm9yIGNvbnNvbGUgbG9ncy5cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgR2VuZXJpY0xvZ0VudHJ5XG4gKi9cbmNsYXNzIENvbnNvbGVMb2dFbnRyeSBleHRlbmRzIEdlbmVyaWNMb2dFbnRyeSB7XG4gIGNvbnN0cnVjdG9yKGxldmVsLCBzb3VyY2UsIHRleHQsIHRpbWVTdGFtcCwgdHlwZSwgbWV0aG9kLCBhcmdzLCBzdGFja1RyYWNlKSB7XG4gICAgc3VwZXIobGV2ZWwsIHNvdXJjZSwgdGV4dCwgdGltZVN0YW1wLCB0eXBlLCBzdGFja1RyYWNlKVxuICAgIHRoaXMuX21ldGhvZCA9IG1ldGhvZFxuICAgIHRoaXMuX2FyZ3MgPSBhcmdzXG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgbWV0aG9kIGFzc29jaWF0ZWQgd2l0aCB0aGUgbG9nIGVudHJ5LlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgbWV0aG9kIGFzc29jaWF0ZWQgd2l0aCB0aGUgbG9nIGVudHJ5LlxuICAgKi9cbiAgZ2V0IG1ldGhvZCgpIHtcbiAgICByZXR1cm4gdGhpcy5fbWV0aG9kXG4gIH1cbiAgLyoqXG4gICAqIEdldHMgdGhlIGFyZ3VtZW50cyBhc3NvY2lhdGVkIHdpdGggdGhlIGxvZyBlbnRyeS5cbiAgICogQHJldHVybnMge0FycmF5fSBUaGUgYXJndW1lbnRzIGFzc29jaWF0ZWQgd2l0aCB0aGUgbG9nIGVudHJ5LlxuICAgKi9cbiAgZ2V0IGFyZ3MoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FyZ3NcbiAgfVxufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBsb2cgZW50cnkgZm9yIEphdmFTY3JpcHQgbG9ncy5cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgR2VuZXJpY0xvZ0VudHJ5XG4gKi9cbmNsYXNzIEphdmFzY3JpcHRMb2dFbnRyeSBleHRlbmRzIEdlbmVyaWNMb2dFbnRyeSB7XG4gIGNvbnN0cnVjdG9yKGxldmVsLCBzb3VyY2UsIHRleHQsIHRpbWVTdGFtcCwgdHlwZSwgc3RhY2tUcmFjZSkge1xuICAgIHN1cGVyKGxldmVsLCBzb3VyY2UsIHRleHQsIHRpbWVTdGFtcCwgdHlwZSwgc3RhY2tUcmFjZSlcbiAgfVxufVxuXG4vLyBQVUJMSUMgQVBJXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBCYXNlTG9nRW50cnksXG4gIEdlbmVyaWNMb2dFbnRyeSxcbiAgQ29uc29sZUxvZ0VudHJ5LFxuICBKYXZhc2NyaXB0TG9nRW50cnksXG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/bidi/logEntries.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/bidi/logInspector.js":
/*!**************************************************************!*\
  !*** ./node_modules/selenium-webdriver/bidi/logInspector.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst { FilterBy } = __webpack_require__(/*! ./filterBy */ \"(rsc)/./node_modules/selenium-webdriver/bidi/filterBy.js\")\nconst { ConsoleLogEntry, JavascriptLogEntry, GenericLogEntry } = __webpack_require__(/*! ./logEntries */ \"(rsc)/./node_modules/selenium-webdriver/bidi/logEntries.js\")\n\nconst LOG = {\n  TYPE_CONSOLE: 'console',\n  TYPE_JS_LOGS: 'javascript',\n  TYPE_JS_EXCEPTION: 'javascriptException',\n  TYPE_LOGS: 'logs',\n  TYPE_CONSOLE_FILTER: 'console_filter',\n  TYPE_JS_LOGS_FILTER: 'javascript_filter',\n  TYPE_JS_EXCEPTION_FILTER: 'javascriptException_filter',\n  TYPE_LOGS_FILTER: 'logs_filter',\n}\n\nclass LogInspector {\n  bidi\n  ws\n  #callbackId = 0\n\n  constructor(driver, browsingContextIds) {\n    this._driver = driver\n    this._browsingContextIds = browsingContextIds\n    this.listener = new Map()\n    this.listener.set(LOG.TYPE_CONSOLE, new Map())\n    this.listener.set(LOG.TYPE_JS_LOGS, new Map())\n    this.listener.set(LOG.TYPE_JS_EXCEPTION, new Map())\n    this.listener.set(LOG.TYPE_LOGS, new Map())\n    this.listener.set(LOG.TYPE_CONSOLE_FILTER, new Map())\n    this.listener.set(LOG.TYPE_JS_LOGS_FILTER, new Map())\n    this.listener.set(LOG.TYPE_JS_EXCEPTION_FILTER, new Map())\n    this.listener.set(LOG.TYPE_LOGS_FILTER, new Map())\n  }\n\n  /**\n   * Subscribe to log event\n   * @returns {Promise<void>}\n   */\n  async init() {\n    this.bidi = await this._driver.getBidi()\n    await this.bidi.subscribe('log.entryAdded', this._browsingContextIds)\n  }\n\n  addCallback(eventType, callback) {\n    const id = ++this.#callbackId\n\n    const eventCallbackMap = this.listener.get(eventType)\n    eventCallbackMap.set(id, callback)\n    return id\n  }\n\n  removeCallback(id) {\n    let hasId = false\n    for (const [, callbacks] of this.listener) {\n      if (callbacks.has(id)) {\n        callbacks.delete(id)\n        hasId = true\n      }\n    }\n\n    if (!hasId) {\n      throw Error(`Callback with id ${id} not found`)\n    }\n  }\n\n  invokeCallbacks(eventType, data) {\n    const callbacks = this.listener.get(eventType)\n    if (callbacks) {\n      for (const [, callback] of callbacks) {\n        callback(data)\n      }\n    }\n  }\n\n  invokeCallbacksWithFilter(eventType, data, filterLevel) {\n    const callbacks = this.listener.get(eventType)\n    if (callbacks) {\n      for (const [, value] of callbacks) {\n        const callback = value.callback\n        const filter = value.filter\n        if (filterLevel === filter.getLevel()) {\n          callback(data)\n        }\n      }\n    }\n  }\n\n  /**\n   * Listen to Console logs\n   * @param callback\n   * @param filterBy\n   * @returns {Promise<number>}\n   */\n  async onConsoleEntry(callback, filterBy = undefined) {\n    if (filterBy !== undefined && !(filterBy instanceof FilterBy)) {\n      throw Error(`Pass valid FilterBy object. Received: ${filterBy}`)\n    }\n\n    let id\n\n    if (filterBy !== undefined) {\n      id = this.addCallback(LOG.TYPE_CONSOLE_FILTER, { callback: callback, filter: filterBy })\n    } else {\n      id = this.addCallback(LOG.TYPE_CONSOLE, callback)\n    }\n\n    this.ws = await this.bidi.socket\n\n    this.ws.on('message', (event) => {\n      const { params } = JSON.parse(Buffer.from(event.toString()))\n\n      if (params?.type === LOG.TYPE_CONSOLE) {\n        let consoleEntry = new ConsoleLogEntry(\n          params.level,\n          params.source,\n          params.text,\n          params.timestamp,\n          params.type,\n          params.method,\n          params.args,\n          params.stackTrace,\n        )\n\n        if (filterBy !== undefined) {\n          if (params?.level === filterBy.getLevel()) {\n            this.invokeCallbacksWithFilter(LOG.TYPE_CONSOLE_FILTER, consoleEntry, filterBy.getLevel())\n          }\n          return\n        }\n\n        this.invokeCallbacks(LOG.TYPE_CONSOLE, consoleEntry)\n      }\n    })\n\n    return id\n  }\n\n  /**\n   * Listen to JS logs\n   * @param callback\n   * @param filterBy\n   * @returns {Promise<number>}\n   */\n  async onJavascriptLog(callback, filterBy = undefined) {\n    if (filterBy !== undefined && !(filterBy instanceof FilterBy)) {\n      throw Error(`Pass valid FilterBy object. Received: ${filterBy}`)\n    }\n\n    let id\n\n    if (filterBy !== undefined) {\n      id = this.addCallback(LOG.TYPE_JS_LOGS_FILTER, { callback: callback, filter: filterBy })\n    } else {\n      id = this.addCallback(LOG.TYPE_JS_LOGS, callback)\n    }\n\n    this.ws = await this.bidi.socket\n\n    this.ws.on('message', (event) => {\n      const { params } = JSON.parse(Buffer.from(event.toString()))\n\n      if (params?.type === LOG.TYPE_JS_LOGS) {\n        let jsEntry = new JavascriptLogEntry(\n          params.level,\n          params.source,\n          params.text,\n          params.timestamp,\n          params.type,\n          params.stackTrace,\n        )\n\n        if (filterBy !== undefined) {\n          if (params?.level === filterBy.getLevel()) {\n            this.invokeCallbacksWithFilter(LOG.TYPE_JS_LOGS_FILTER, jsEntry, filterBy.getLevel())\n          }\n          return\n        }\n\n        this.invokeCallbacks(LOG.TYPE_JS_LOGS, jsEntry)\n      }\n    })\n\n    return id\n  }\n\n  /**\n   * Listen to JS Exceptions\n   * @param callback\n   * @returns {Promise<number>}\n   */\n  async onJavascriptException(callback) {\n    const id = this.addCallback(LOG.TYPE_JS_EXCEPTION, callback)\n    this.ws = await this.bidi.socket\n\n    this.ws.on('message', (event) => {\n      const { params } = JSON.parse(Buffer.from(event.toString()))\n      if (params?.type === 'javascript' && params?.level === 'error') {\n        let jsErrorEntry = new JavascriptLogEntry(\n          params.level,\n          params.source,\n          params.text,\n          params.timestamp,\n          params.type,\n          params.stackTrace,\n        )\n\n        this.invokeCallbacks(LOG.TYPE_JS_EXCEPTION, jsErrorEntry)\n      }\n    })\n\n    return id\n  }\n\n  /**\n   * Listen to any logs\n   * @param callback\n   * @param filterBy\n   * @returns {Promise<number>}\n   */\n  async onLog(callback, filterBy = undefined) {\n    if (filterBy !== undefined && !(filterBy instanceof FilterBy)) {\n      throw Error(`Pass valid FilterBy object. Received: ${filterBy}`)\n    }\n\n    let id\n    if (filterBy !== undefined) {\n      id = this.addCallback(LOG.TYPE_LOGS_FILTER, { callback: callback, filter: filterBy })\n    } else {\n      id = this.addCallback(LOG.TYPE_LOGS, callback)\n    }\n\n    this.ws = await this.bidi.socket\n\n    this.ws.on('message', (event) => {\n      const { params } = JSON.parse(Buffer.from(event.toString()))\n      if (params?.type === 'javascript') {\n        let jsEntry = new JavascriptLogEntry(\n          params.level,\n          params.source,\n          params.text,\n          params.timestamp,\n          params.type,\n          params.stackTrace,\n        )\n\n        if (filterBy !== undefined) {\n          if (params?.level === filterBy.getLevel()) {\n            callback(jsEntry)\n          }\n          return\n        }\n\n        if (filterBy !== undefined) {\n          if (params?.level === filterBy.getLevel()) {\n            {\n              this.invokeCallbacksWithFilter(LOG.TYPE_LOGS_FILTER, jsEntry, filterBy.getLevel())\n            }\n            return\n          }\n        }\n\n        this.invokeCallbacks(LOG.TYPE_LOGS, jsEntry)\n        return\n      }\n\n      if (params?.type === 'console') {\n        let consoleEntry = new ConsoleLogEntry(\n          params.level,\n          params.source,\n          params.text,\n          params.timestamp,\n          params.type,\n          params.method,\n          params.args,\n          params.stackTrace,\n        )\n\n        if (filterBy !== undefined) {\n          if (params?.level === filterBy.getLevel()) {\n            this.invokeCallbacksWithFilter(LOG.TYPE_LOGS_FILTER, consoleEntry, filterBy.getLevel())\n          }\n          return\n        }\n\n        this.invokeCallbacks(LOG.TYPE_LOGS, consoleEntry)\n        return\n      }\n\n      if (params !== undefined && !['console', 'javascript'].includes(params?.type)) {\n        let genericEntry = new GenericLogEntry(\n          params.level,\n          params.source,\n          params.text,\n          params.timestamp,\n          params.type,\n          params.stackTrace,\n        )\n\n        if (filterBy !== undefined) {\n          if (params?.level === filterBy.getLevel()) {\n            {\n              this.invokeCallbacksWithFilter(LOG.TYPE_LOGS_FILTER, genericEntry, filterBy.getLevel())\n            }\n            return\n          }\n        }\n\n        this.invokeCallbacks(LOG.TYPE_LOGS, genericEntry)\n        return\n      }\n    })\n\n    return id\n  }\n\n  /**\n   * Unsubscribe to log event\n   * @returns {Promise<void>}\n   */\n  async close() {\n    if (\n      this._browsingContextIds !== null &&\n      this._browsingContextIds !== undefined &&\n      this._browsingContextIds.length > 0\n    ) {\n      await this.bidi.unsubscribe('log.entryAdded', this._browsingContextIds)\n    } else {\n      await this.bidi.unsubscribe('log.entryAdded')\n    }\n  }\n}\n\n/**\n * initiate inspector instance and return\n * @param driver\n * @param browsingContextIds\n * @returns {Promise<LogInspector>}\n */\nasync function getLogInspectorInstance(driver, browsingContextIds) {\n  let instance = new LogInspector(driver, browsingContextIds)\n  await instance.init()\n  return instance\n}\n\n/**\n * API\n * @type {function(*, *): Promise<LogInspector>}\n */\nmodule.exports = getLogInspectorInstance\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/bidi/logInspector.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/bidi/network.js":
/*!*********************************************************!*\
  !*** ./node_modules/selenium-webdriver/bidi/network.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst { BeforeRequestSent, ResponseStarted, FetchError } = __webpack_require__(/*! ./networkTypes */ \"(rsc)/./node_modules/selenium-webdriver/bidi/networkTypes.js\")\nconst { AddInterceptParameters } = __webpack_require__(/*! ./addInterceptParameters */ \"(rsc)/./node_modules/selenium-webdriver/bidi/addInterceptParameters.js\")\nconst { ContinueResponseParameters } = __webpack_require__(/*! ./continueResponseParameters */ \"(rsc)/./node_modules/selenium-webdriver/bidi/continueResponseParameters.js\")\nconst { ContinueRequestParameters } = __webpack_require__(/*! ./continueRequestParameters */ \"(rsc)/./node_modules/selenium-webdriver/bidi/continueRequestParameters.js\")\nconst { ProvideResponseParameters } = __webpack_require__(/*! ./provideResponseParameters */ \"(rsc)/./node_modules/selenium-webdriver/bidi/provideResponseParameters.js\")\n\nconst NetworkEvent = {\n  BEFORE_REQUEST_SENT: 'network.beforeRequestSent',\n  RESPONSE_STARTED: 'network.responseStarted',\n  RESPONSE_COMPLETED: 'network.responseCompleted',\n  AUTH_REQUIRED: 'network.authRequired',\n  FETCH_ERROR: 'network.fetchError',\n}\n\n/**\n * Represents all commands and events of Network module.\n * Described in https://w3c.github.io/webdriver-bidi/#module-network.\n */\nclass Network {\n  #callbackId = 0\n  #listener\n\n  /**\n   * Represents a Network object.\n   * @constructor\n   * @param {Driver} driver - The driver to fetch the BiDi connection.\n   * @param {Array} browsingContextIds - An array of browsing context IDs that the network events will be subscribed to.\n   */\n  constructor(driver, browsingContextIds) {\n    this._driver = driver\n    this._browsingContextIds = browsingContextIds\n    this.#listener = new Map()\n    this.#listener.set(NetworkEvent.AUTH_REQUIRED, new Map())\n    this.#listener.set(NetworkEvent.BEFORE_REQUEST_SENT, new Map())\n    this.#listener.set(NetworkEvent.FETCH_ERROR, new Map())\n    this.#listener.set(NetworkEvent.RESPONSE_STARTED, new Map())\n    this.#listener.set(NetworkEvent.RESPONSE_COMPLETED, new Map())\n  }\n\n  addCallback(eventType, callback) {\n    const id = ++this.#callbackId\n\n    const eventCallbackMap = this.#listener.get(eventType)\n    eventCallbackMap.set(id, callback)\n    return id\n  }\n\n  removeCallback(id) {\n    let hasId = false\n    for (const [, callbacks] of this.#listener) {\n      if (callbacks.has(id)) {\n        callbacks.delete(id)\n        hasId = true\n      }\n    }\n\n    if (!hasId) {\n      throw Error(`Callback with id ${id} not found`)\n    }\n  }\n\n  invokeCallbacks(eventType, data) {\n    const callbacks = this.#listener.get(eventType)\n    if (callbacks) {\n      for (const [, callback] of callbacks) {\n        callback(data)\n      }\n    }\n  }\n\n  async init() {\n    this.bidi = await this._driver.getBidi()\n  }\n\n  /**\n   * Subscribes to the 'network.beforeRequestSent' event and handles it with the provided callback.\n   *\n   * @param {Function} callback - The callback function to handle the event.\n   * @returns {Promise<void>} - A promise that resolves when the subscription is successful.\n   */\n  async beforeRequestSent(callback) {\n    await this.subscribeAndHandleEvent('network.beforeRequestSent', callback)\n  }\n\n  /**\n   * Subscribes to the 'network.responseStarted' event and handles it with the provided callback.\n   *\n   * @param {Function} callback - The callback function to handle the event.\n   * @returns {Promise<void>} - A promise that resolves when the subscription is successful.\n   */\n  async responseStarted(callback) {\n    await this.subscribeAndHandleEvent('network.responseStarted', callback)\n  }\n\n  /**\n   * Subscribes to the 'network.responseCompleted' event and handles it with the provided callback.\n   *\n   * @param {Function} callback - The callback function to handle the event.\n   * @returns {Promise<void>} - A promise that resolves when the subscription is successful.\n   */\n  async responseCompleted(callback) {\n    await this.subscribeAndHandleEvent('network.responseCompleted', callback)\n  }\n\n  /**\n   * Subscribes to the 'network.authRequired' event and handles it with the provided callback.\n   *\n   * @param {Function} callback - The callback function to handle the event.\n   * @returns {Promise<number>} - A promise that resolves when the subscription is successful.\n   */\n  async authRequired(callback) {\n    return await this.subscribeAndHandleEvent('network.authRequired', callback)\n  }\n\n  /**\n   * Subscribes to the 'network.fetchError' event and handles it with the provided callback.\n   *\n   * @param {Function} callback - The callback function to handle the event.\n   * @returns {Promise<void>} - A promise that resolves when the subscription is successful.\n   */\n  async fetchError(callback) {\n    await this.subscribeAndHandleEvent('network.fetchError', callback)\n  }\n\n  async subscribeAndHandleEvent(eventType, callback) {\n    if (this._browsingContextIds != null) {\n      await this.bidi.subscribe(eventType, this._browsingContextIds)\n    } else {\n      await this.bidi.subscribe(eventType)\n    }\n    let id = this.addCallback(eventType, callback)\n\n    this.ws = await this.bidi.socket\n    this.ws.on('message', (event) => {\n      const { params } = JSON.parse(Buffer.from(event.toString()))\n      if (params) {\n        let response = null\n        if ('initiator' in params) {\n          response = new BeforeRequestSent(\n            params.context,\n            params.navigation,\n            params.redirectCount,\n            params.request,\n            params.timestamp,\n            params.initiator,\n          )\n        } else if ('response' in params) {\n          response = new ResponseStarted(\n            params.context,\n            params.navigation,\n            params.redirectCount,\n            params.request,\n            params.timestamp,\n            params.response,\n          )\n        } else if ('errorText' in params) {\n          response = new FetchError(\n            params.context,\n            params.navigation,\n            params.redirectCount,\n            params.request,\n            params.timestamp,\n            params.errorText,\n          )\n        }\n        this.invokeCallbacks(eventType, response)\n      }\n    })\n    return id\n  }\n\n  /**\n   * Adds a network intercept.\n   *\n   * @param {AddInterceptParameters} params - The parameters for the network intercept.\n   * @returns {Promise<string>} - A promise that resolves to the added intercept's id.\n   * @throws {Error} - If params is not an instance of AddInterceptParameters.\n   */\n  async addIntercept(params) {\n    if (!(params instanceof AddInterceptParameters)) {\n      throw new Error(`Params must be an instance of AddInterceptParameters. Received:'${params}'`)\n    }\n\n    const command = {\n      method: 'network.addIntercept',\n      params: Object.fromEntries(params.asMap()),\n    }\n\n    let response = await this.bidi.send(command)\n\n    return response.result.intercept\n  }\n\n  /**\n   * Removes an intercept.\n   *\n   * @param {string} interceptId - The ID of the intercept to be removed.\n   * @returns {Promise<void>} - A promise that resolves when the intercept is successfully removed.\n   */\n  async removeIntercept(interceptId) {\n    const command = {\n      method: 'network.removeIntercept',\n      params: { intercept: interceptId },\n    }\n\n    await this.bidi.send(command)\n  }\n\n  /**\n   * Continues the network request with authentication credentials.\n   * @param {string} requestId - The ID of the request to continue.\n   * @param {string} username - The username for authentication.\n   * @param {string} password - The password for authentication.\n   * @returns {Promise<void>} - A promise that resolves when the command is sent.\n   */\n  async continueWithAuth(requestId, username, password) {\n    const command = {\n      method: 'network.continueWithAuth',\n      params: {\n        request: requestId.toString(),\n        action: 'provideCredentials',\n        credentials: {\n          type: 'password',\n          username: username,\n          password: password,\n        },\n      },\n    }\n    await this.bidi.send(command)\n  }\n\n  /**\n   * Fails a network request.\n   *\n   * @param {number} requestId - The ID of the request to fail.\n   * @returns {Promise<void>} - A promise that resolves when the command is sent.\n   */\n  async failRequest(requestId) {\n    const command = {\n      method: 'network.failRequest',\n      params: {\n        request: requestId.toString(),\n      },\n    }\n    await this.bidi.send(command)\n  }\n\n  /**\n   * Continues the network request with authentication but without providing credentials.\n   * @param {string} requestId - The ID of the request to continue with authentication.\n   * @returns {Promise<void>} - A promise that resolves when the command is sent.\n   */\n  async continueWithAuthNoCredentials(requestId) {\n    const command = {\n      method: 'network.continueWithAuth',\n      params: {\n        request: requestId.toString(),\n        action: 'default',\n      },\n    }\n    await this.bidi.send(command)\n  }\n\n  /**\n   * Cancels the authentication for a specific request.\n   *\n   * @param {string} requestId - The ID of the request to cancel authentication for.\n   * @returns {Promise<void>} - A promise that resolves when the command is sent.\n   */\n  async cancelAuth(requestId) {\n    const command = {\n      method: 'network.continueWithAuth',\n      params: {\n        request: requestId.toString(),\n        action: 'cancel',\n      },\n    }\n    await this.bidi.send(command)\n  }\n\n  /**\n   * Continues the network request with the provided parameters.\n   *\n   * @param {ContinueRequestParameters} params - The parameters for continuing the request.\n   * @throws {Error} If params is not an instance of ContinueRequestParameters.\n   * @returns {Promise<void>} A promise that resolves when the command is sent.\n   */\n  async continueRequest(params) {\n    if (!(params instanceof ContinueRequestParameters)) {\n      throw new Error(`Params must be an instance of ContinueRequestParameters. Received:'${params}'`)\n    }\n\n    const command = {\n      method: 'network.continueRequest',\n      params: Object.fromEntries(params.asMap()),\n    }\n\n    await this.bidi.send(command)\n  }\n\n  /**\n   * Continues the network response with the given parameters.\n   *\n   * @param {ContinueResponseParameters} params - The parameters for continuing the response.\n   * @throws {Error} If params is not an instance of ContinueResponseParameters.\n   * @returns {Promise<void>} A promise that resolves when the command is sent.\n   */\n  async continueResponse(params) {\n    if (!(params instanceof ContinueResponseParameters)) {\n      throw new Error(`Params must be an instance of ContinueResponseParameters. Received:'${params}'`)\n    }\n\n    const command = {\n      method: 'network.continueResponse',\n      params: Object.fromEntries(params.asMap()),\n    }\n\n    await this.bidi.send(command)\n  }\n\n  /**\n   * Provides a response for the network.\n   *\n   * @param {ProvideResponseParameters} params - The parameters for providing the response.\n   * @throws {Error} If params is not an instance of ProvideResponseParameters.\n   * @returns {Promise<void>} A promise that resolves when the command is sent.\n   */\n  async provideResponse(params) {\n    if (!(params instanceof ProvideResponseParameters)) {\n      throw new Error(`Params must be an instance of ProvideResponseParameters. Received:'${params}'`)\n    }\n\n    const command = {\n      method: 'network.provideResponse',\n      params: Object.fromEntries(params.asMap()),\n    }\n\n    await this.bidi.send(command)\n  }\n\n  /**\n   * Unsubscribes from network events for all browsing contexts.\n   * @returns {Promise<void>} A promise that resolves when the network connection is closed.\n   */\n  async close() {\n    if (\n      this._browsingContextIds !== null &&\n      this._browsingContextIds !== undefined &&\n      this._browsingContextIds.length > 0\n    ) {\n      await this.bidi.unsubscribe(\n        'network.beforeRequestSent',\n        'network.responseStarted',\n        'network.responseCompleted',\n        'network.authRequired',\n        this._browsingContextIds,\n      )\n    } else {\n      await this.bidi.unsubscribe(\n        'network.beforeRequestSent',\n        'network.responseStarted',\n        'network.responseCompleted',\n        'network.authRequired',\n      )\n    }\n  }\n}\n\nasync function getNetworkInstance(driver, browsingContextIds = null) {\n  let instance = new Network(driver, browsingContextIds)\n  await instance.init()\n  return instance\n}\n\nmodule.exports = getNetworkInstance\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/bidi/network.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/bidi/networkInspector.js":
/*!******************************************************************!*\
  !*** ./node_modules/selenium-webdriver/bidi/networkInspector.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst { BeforeRequestSent, ResponseStarted } = __webpack_require__(/*! ./networkTypes */ \"(rsc)/./node_modules/selenium-webdriver/bidi/networkTypes.js\")\n\n/**\n * @deprecated\n * in favor of using the `Network` class from `bidi/network.js`\n *  Inspector is specific to listening to events.\n *  Goal is to club commands and events under one class called Network.\n */\nclass NetworkInspector {\n  constructor(driver, browsingContextIds) {\n    this._driver = driver\n    this._browsingContextIds = browsingContextIds\n  }\n\n  async init() {\n    this.bidi = await this._driver.getBidi()\n  }\n\n  async beforeRequestSent(callback) {\n    await this.subscribeAndHandleEvent('network.beforeRequestSent', callback)\n  }\n\n  async responseStarted(callback) {\n    await this.subscribeAndHandleEvent('network.responseStarted', callback)\n  }\n\n  async responseCompleted(callback) {\n    await this.subscribeAndHandleEvent('network.responseCompleted', callback)\n  }\n\n  async authRequired(callback) {\n    await this.subscribeAndHandleEvent('network.authRequired', callback)\n  }\n\n  async subscribeAndHandleEvent(eventType, callback) {\n    if (this._browsingContextIds != null) {\n      await this.bidi.subscribe(eventType, this._browsingContextIds)\n    } else {\n      await this.bidi.subscribe(eventType)\n    }\n    await this._on(callback)\n  }\n\n  async _on(callback) {\n    this.ws = await this.bidi.socket\n    this.ws.on('message', (event) => {\n      const { params } = JSON.parse(Buffer.from(event.toString()))\n      if (params) {\n        let response = null\n        if ('initiator' in params) {\n          response = new BeforeRequestSent(\n            params.context,\n            params.navigation,\n            params.redirectCount,\n            params.request,\n            params.timestamp,\n            params.initiator,\n          )\n        } else if ('response' in params) {\n          response = new ResponseStarted(\n            params.context,\n            params.navigation,\n            params.redirectCount,\n            params.request,\n            params.timestamp,\n            params.response,\n          )\n        }\n        callback(response)\n      }\n    })\n  }\n}\n\nasync function getNetworkInspectorInstance(driver, browsingContextIds = null) {\n  let instance = new NetworkInspector(driver, browsingContextIds)\n  await instance.init()\n  return instance\n}\n\nmodule.exports = getNetworkInspectorInstance\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc2VsZW5pdW0td2ViZHJpdmVyL2JpZGkvbmV0d29ya0luc3BlY3Rvci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFFBQVEscUNBQXFDLEVBQUUsbUJBQU8sQ0FBQyxvRkFBZ0I7O0FBRXZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsY0FBYyxTQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nb29nbGUtc2hlZXRzLXNlbGVuaXVtLWF1dG9tYXRpb24vLi9ub2RlX21vZHVsZXMvc2VsZW5pdW0td2ViZHJpdmVyL2JpZGkvbmV0d29ya0luc3BlY3Rvci5qcz9lODIzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBTb2Z0d2FyZSBGcmVlZG9tIENvbnNlcnZhbmN5IChTRkMpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgU0ZDIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmNvbnN0IHsgQmVmb3JlUmVxdWVzdFNlbnQsIFJlc3BvbnNlU3RhcnRlZCB9ID0gcmVxdWlyZSgnLi9uZXR3b3JrVHlwZXMnKVxuXG4vKipcbiAqIEBkZXByZWNhdGVkXG4gKiBpbiBmYXZvciBvZiB1c2luZyB0aGUgYE5ldHdvcmtgIGNsYXNzIGZyb20gYGJpZGkvbmV0d29yay5qc2BcbiAqICBJbnNwZWN0b3IgaXMgc3BlY2lmaWMgdG8gbGlzdGVuaW5nIHRvIGV2ZW50cy5cbiAqICBHb2FsIGlzIHRvIGNsdWIgY29tbWFuZHMgYW5kIGV2ZW50cyB1bmRlciBvbmUgY2xhc3MgY2FsbGVkIE5ldHdvcmsuXG4gKi9cbmNsYXNzIE5ldHdvcmtJbnNwZWN0b3Ige1xuICBjb25zdHJ1Y3Rvcihkcml2ZXIsIGJyb3dzaW5nQ29udGV4dElkcykge1xuICAgIHRoaXMuX2RyaXZlciA9IGRyaXZlclxuICAgIHRoaXMuX2Jyb3dzaW5nQ29udGV4dElkcyA9IGJyb3dzaW5nQ29udGV4dElkc1xuICB9XG5cbiAgYXN5bmMgaW5pdCgpIHtcbiAgICB0aGlzLmJpZGkgPSBhd2FpdCB0aGlzLl9kcml2ZXIuZ2V0QmlkaSgpXG4gIH1cblxuICBhc3luYyBiZWZvcmVSZXF1ZXN0U2VudChjYWxsYmFjaykge1xuICAgIGF3YWl0IHRoaXMuc3Vic2NyaWJlQW5kSGFuZGxlRXZlbnQoJ25ldHdvcmsuYmVmb3JlUmVxdWVzdFNlbnQnLCBjYWxsYmFjaylcbiAgfVxuXG4gIGFzeW5jIHJlc3BvbnNlU3RhcnRlZChjYWxsYmFjaykge1xuICAgIGF3YWl0IHRoaXMuc3Vic2NyaWJlQW5kSGFuZGxlRXZlbnQoJ25ldHdvcmsucmVzcG9uc2VTdGFydGVkJywgY2FsbGJhY2spXG4gIH1cblxuICBhc3luYyByZXNwb25zZUNvbXBsZXRlZChjYWxsYmFjaykge1xuICAgIGF3YWl0IHRoaXMuc3Vic2NyaWJlQW5kSGFuZGxlRXZlbnQoJ25ldHdvcmsucmVzcG9uc2VDb21wbGV0ZWQnLCBjYWxsYmFjaylcbiAgfVxuXG4gIGFzeW5jIGF1dGhSZXF1aXJlZChjYWxsYmFjaykge1xuICAgIGF3YWl0IHRoaXMuc3Vic2NyaWJlQW5kSGFuZGxlRXZlbnQoJ25ldHdvcmsuYXV0aFJlcXVpcmVkJywgY2FsbGJhY2spXG4gIH1cblxuICBhc3luYyBzdWJzY3JpYmVBbmRIYW5kbGVFdmVudChldmVudFR5cGUsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHRoaXMuX2Jyb3dzaW5nQ29udGV4dElkcyAhPSBudWxsKSB7XG4gICAgICBhd2FpdCB0aGlzLmJpZGkuc3Vic2NyaWJlKGV2ZW50VHlwZSwgdGhpcy5fYnJvd3NpbmdDb250ZXh0SWRzKVxuICAgIH0gZWxzZSB7XG4gICAgICBhd2FpdCB0aGlzLmJpZGkuc3Vic2NyaWJlKGV2ZW50VHlwZSlcbiAgICB9XG4gICAgYXdhaXQgdGhpcy5fb24oY2FsbGJhY2spXG4gIH1cblxuICBhc3luYyBfb24oY2FsbGJhY2spIHtcbiAgICB0aGlzLndzID0gYXdhaXQgdGhpcy5iaWRpLnNvY2tldFxuICAgIHRoaXMud3Mub24oJ21lc3NhZ2UnLCAoZXZlbnQpID0+IHtcbiAgICAgIGNvbnN0IHsgcGFyYW1zIH0gPSBKU09OLnBhcnNlKEJ1ZmZlci5mcm9tKGV2ZW50LnRvU3RyaW5nKCkpKVxuICAgICAgaWYgKHBhcmFtcykge1xuICAgICAgICBsZXQgcmVzcG9uc2UgPSBudWxsXG4gICAgICAgIGlmICgnaW5pdGlhdG9yJyBpbiBwYXJhbXMpIHtcbiAgICAgICAgICByZXNwb25zZSA9IG5ldyBCZWZvcmVSZXF1ZXN0U2VudChcbiAgICAgICAgICAgIHBhcmFtcy5jb250ZXh0LFxuICAgICAgICAgICAgcGFyYW1zLm5hdmlnYXRpb24sXG4gICAgICAgICAgICBwYXJhbXMucmVkaXJlY3RDb3VudCxcbiAgICAgICAgICAgIHBhcmFtcy5yZXF1ZXN0LFxuICAgICAgICAgICAgcGFyYW1zLnRpbWVzdGFtcCxcbiAgICAgICAgICAgIHBhcmFtcy5pbml0aWF0b3IsXG4gICAgICAgICAgKVxuICAgICAgICB9IGVsc2UgaWYgKCdyZXNwb25zZScgaW4gcGFyYW1zKSB7XG4gICAgICAgICAgcmVzcG9uc2UgPSBuZXcgUmVzcG9uc2VTdGFydGVkKFxuICAgICAgICAgICAgcGFyYW1zLmNvbnRleHQsXG4gICAgICAgICAgICBwYXJhbXMubmF2aWdhdGlvbixcbiAgICAgICAgICAgIHBhcmFtcy5yZWRpcmVjdENvdW50LFxuICAgICAgICAgICAgcGFyYW1zLnJlcXVlc3QsXG4gICAgICAgICAgICBwYXJhbXMudGltZXN0YW1wLFxuICAgICAgICAgICAgcGFyYW1zLnJlc3BvbnNlLFxuICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgICBjYWxsYmFjayhyZXNwb25zZSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldE5ldHdvcmtJbnNwZWN0b3JJbnN0YW5jZShkcml2ZXIsIGJyb3dzaW5nQ29udGV4dElkcyA9IG51bGwpIHtcbiAgbGV0IGluc3RhbmNlID0gbmV3IE5ldHdvcmtJbnNwZWN0b3IoZHJpdmVyLCBicm93c2luZ0NvbnRleHRJZHMpXG4gIGF3YWl0IGluc3RhbmNlLmluaXQoKVxuICByZXR1cm4gaW5zdGFuY2Vcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXROZXR3b3JrSW5zcGVjdG9ySW5zdGFuY2VcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/bidi/networkInspector.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/bidi/networkTypes.js":
/*!**************************************************************!*\
  !*** ./node_modules/selenium-webdriver/bidi/networkTypes.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst { NavigationInfo } = __webpack_require__(/*! ./browsingContextTypes */ \"(rsc)/./node_modules/selenium-webdriver/bidi/browsingContextTypes.js\")\n\n/**\n * Represents the possible values for the SameSite attribute of a cookie.\n * @enum {string}\n */\n\nconst SameSite = {\n  STRICT: 'strict',\n  LAX: 'lax',\n  NONE: 'none',\n\n  findByName(name) {\n    return (\n      Object.values(this).find((type) => {\n        return typeof type === 'string' && name.toLowerCase() === type.toLowerCase()\n      }) || null\n    )\n  },\n}\n\n/**\n * Represents a BytesValue object.\n * Described in https://w3c.github.io/webdriver-bidi/#type-network-BytesValue.\n */\nclass BytesValue {\n  static Type = {\n    STRING: 'string',\n    BASE64: 'base64',\n  }\n\n  /**\n   * Creates a new BytesValue instance.\n   * @param {string} type - The type of the BytesValue.\n   * @param {string} value - The value of the BytesValue.\n   */\n  constructor(type, value) {\n    this._type = type\n    this._value = value\n  }\n\n  /**\n   * Gets the type of the BytesValue.\n   * @returns {string} The type of the BytesValue.\n   */\n  get type() {\n    return this._type\n  }\n\n  /**\n   * Gets the value of the BytesValue.\n   * @returns {string} The value of the BytesValue.\n   */\n  get value() {\n    return this._value\n  }\n\n  /**\n   * Converts the BytesValue to a map.\n   * @returns {Map<string, string>} A map representation of the BytesValue.\n   */\n  asMap() {\n    const map = new Map()\n    map.set('type', this._type)\n    map.set('value', this._value)\n    return map\n  }\n}\n\n/**\n * Represents a header with a name and value.\n * Described in https://w3c.github.io/webdriver-bidi/#type-network-Header.\n */\nclass Header {\n  /**\n   * Creates a new Header instance.\n   * @param {string} name - The name of the header.\n   * @param {BytesValue} value - The value of the header.\n   * @throws {Error} If the value is not an instance of BytesValue.\n   */\n  constructor(name, value) {\n    this._name = name\n    if (!(value instanceof BytesValue)) {\n      throw new Error(`Value must be an instance of BytesValue. Received: '${value}'`)\n    }\n    this._value = value\n  }\n\n  /**\n   * Gets the name of the header.\n   * @returns {string} The name of the header.\n   */\n  get name() {\n    return this._name\n  }\n\n  /**\n   * Gets the value of the header.\n   * @returns {BytesValue} The value of the header.\n   */\n  get value() {\n    return this._value\n  }\n}\n\n/**\n * Represents a cookie.\n * Described in https://w3c.github.io/webdriver-bidi/#type-network-Cookie.\n * @class\n */\nclass Cookie {\n  constructor(name, value, domain, path, size, httpOnly, secure, sameSite, expires) {\n    this._name = name\n    this._value = value\n    this._domain = domain\n    this._path = path\n    this._expires = expires\n    this._size = size\n    this._httpOnly = httpOnly\n    this._secure = secure\n    this._sameSite = sameSite\n  }\n\n  /**\n   * Gets the name of the cookie.\n   * @returns {string} The name of the cookie.\n   */\n  get name() {\n    return this._name\n  }\n\n  /**\n   * Gets the value of the cookie.\n   * @returns {BytesValue} The value of the cookie.\n   */\n  get value() {\n    return this._value\n  }\n\n  /**\n   * Gets the domain of the cookie.\n   * @returns {string} The domain of the cookie.\n   */\n  get domain() {\n    return this._domain\n  }\n\n  /**\n   * Gets the path of the cookie.\n   * @returns {string} The path of the cookie.\n   */\n  get path() {\n    return this._path\n  }\n\n  /**\n   * Gets the expiration date of the cookie.\n   * @returns {number} The expiration date of the cookie.\n   */\n  get expires() {\n    return this._expires\n  }\n\n  /**\n   * Gets the size of the cookie.\n   * @returns {number} The size of the cookie.\n   */\n  get size() {\n    return this._size\n  }\n\n  /**\n   * Checks if the cookie is HTTP-only.\n   * @returns {boolean} True if the cookie is HTTP-only, false otherwise.\n   */\n  get httpOnly() {\n    return this._httpOnly\n  }\n\n  /**\n   * Checks if the cookie is secure.\n   * @returns {boolean} True if the cookie is secure, false otherwise.\n   */\n  get secure() {\n    return this._secure\n  }\n\n  /**\n   * Gets the same-site attribute of the cookie.\n   * @returns {string} The same-site attribute of the cookie.\n   */\n  get sameSite() {\n    return this._sameSite\n  }\n}\n\n// No tests written for FetchTimingInfo. Must be updated after browsers implment it and corresponding WPT test are written.\n/**\n * Represents the time of each part of the request.\n * Described in https://w3c.github.io/webdriver-bidi/#type-network-FetchTimingInfo.\n * @class\n */\nclass FetchTimingInfo {\n  constructor(\n    originTime,\n    requestTime,\n    redirectStart,\n    redirectEnd,\n    fetchStart,\n    dnsStart,\n    dnsEnd,\n    connectStart,\n    connectEnd,\n    tlsStart,\n    requestStart,\n    responseStart,\n    responseEnd,\n  ) {\n    this._originTime = originTime\n    this._requestTime = requestTime\n    this._redirectStart = redirectStart\n    this._redirectEnd = redirectEnd\n    this._fetchStart = fetchStart\n    this._dnsStart = dnsStart\n    this._dnsEnd = dnsEnd\n    this._connectStart = connectStart\n    this._connectEnd = connectEnd\n    this._tlsStart = tlsStart\n    this._requestStart = requestStart\n    this._responseStart = responseStart\n    this._responseEnd = responseEnd\n  }\n\n  /**\n   * Gets the origin time.\n   *\n   * @returns {number} The origin time.\n   */\n  get originTime() {\n    return this._originTime\n  }\n\n  /**\n   * Get the request time.\n   *\n   * @returns {number} The request time.\n   */\n  get requestTime() {\n    return this._requestTime\n  }\n\n  /**\n   * Gets the timestamp when the redirect started.\n   *\n   * @returns {number} The timestamp when the redirect started.\n   */\n  get redirectStart() {\n    return this._redirectStart\n  }\n\n  /**\n   * Gets the timestamp when the redirect ended.\n   *\n   * @returns {number} The timestamp when the redirect ended.\n   */\n  get redirectEnd() {\n    return this._redirectEnd\n  }\n\n  /**\n   * Gets the timestamp when the fetch started.\n   *\n   * @returns {number} The timestamp when the fetch started.\n   */\n  get fetchStart() {\n    return this._fetchStart\n  }\n\n  /**\n   * Gets the timestamp when the domain lookup started.\n   *\n   * @returns {number} The timestamp when the domain lookup started.\n   */\n  get dnsStart() {\n    return this._dnsStart\n  }\n\n  /**\n   * Gets the timestamp when the domain lookup ended.\n   *\n   * @returns {number} The timestamp when the domain lookup ended.\n   */\n  get dnsEnd() {\n    return this._dnsEnd\n  }\n\n  /**\n   * Gets the timestamp when the connection started.\n   *\n   * @returns {number} The timestamp when the connection ended.\n   */\n  get connectStart() {\n    return this._connectStart\n  }\n\n  /**\n   * Gets the timestamp when the connection ended.\n   *\n   * @returns {number} The timestamp when the connection ended.\n   */\n  get connectEnd() {\n    return this._connectEnd\n  }\n\n  /**\n   * Gets the timestamp when the secure connection started.\n   *\n   * @returns {number} The timestamp when the secure connection started.\n   */\n  get tlsStart() {\n    return this._tlsStart\n  }\n\n  /**\n   * Gets the timestamp when the request started.\n   *\n   * @returns {number} The timestamp when the request started.\n   */\n  get requestStart() {\n    return this._requestStart\n  }\n\n  /**\n   * Gets the timestamp when the response started.\n   *\n   * @returns {number} The timestamp when the response started.\n   */\n  get responseStart() {\n    return this._responseStart\n  }\n\n  /**\n   * Gets the timestamp when the response ended.\n   *\n   * @returns {number} The timestamp when the response ended.\n   */\n  get responseEnd() {\n    return this._responseEnd\n  }\n}\n\n/**\n * Represents the data of a network request.\n * Described in https://w3c.github.io/webdriver-bidi/#type-network-RequestData.\n */\nclass RequestData {\n  constructor(request, url, method, headers, cookies, headersSize, bodySize, timings) {\n    this._request = request\n    this._url = url\n    this._method = method\n    this._headers = []\n    headers.forEach((header) => {\n      let name = header.name\n      let value = 'value' in header ? header.value : null\n\n      this._headers.push(new Header(name, new BytesValue(value.type, value.value)))\n    })\n\n    this._cookies = []\n    cookies.forEach((cookie) => {\n      let name = cookie.name\n      let domain = cookie.domain\n      let path = cookie.path\n      let size = cookie.size\n      let httpOnly = cookie.httpOnly\n      let secure = cookie.secure\n      let sameSite = cookie.sameSite\n      let value = 'value' in cookie ? cookie.value : null\n      let expires = 'expires' in cookie ? cookie.expires : null\n\n      this._cookies.push(new Cookie(name, value, domain, path, size, httpOnly, secure, sameSite, expires))\n    })\n    this._headersSize = headersSize\n    this._bodySize = bodySize\n    this._timings = new FetchTimingInfo(\n      timings.originTime,\n      timings.requestTime,\n      timings.redirectStart,\n      timings.redirectEnd,\n      timings.fetchStart,\n      timings.dnsStart,\n      timings.dnsEnd,\n      timings.connectStart,\n      timings.connectEnd,\n      timings.tlsStart,\n      timings.requestStart,\n      timings.responseStart,\n      timings.responseEnd,\n    )\n  }\n\n  /**\n   * Get the request id.\n   * @returns {string} The request id.\n   */\n  get request() {\n    return this._request\n  }\n\n  /**\n   * Get the URL of the request.\n   * @returns {string} The URL of the request.\n   */\n  get url() {\n    return this._url\n  }\n\n  /**\n   * Get the HTTP method of the request.\n   * @returns {string} The HTTP method of the request.\n   */\n  get method() {\n    return this._method\n  }\n\n  /**\n   * Get the headers of the request.\n   * @returns {Header[]} An array of header objects.\n   */\n  get headers() {\n    return this._headers\n  }\n\n  /**\n   * Get the cookies of the request.\n   * @returns {Cookie[]} An array of cookie objects.\n   */\n  get cookies() {\n    return this._cookies\n  }\n\n  /**\n   * Get the size of the headers in bytes.\n   * @returns {number} The size of the headers in bytes.\n   */\n  get headersSize() {\n    return this._headersSize\n  }\n\n  /**\n   * Get the size of the request body in bytes.\n   * @returns {number} The size of the request body in bytes.\n   */\n  get bodySize() {\n    return this._bodySize\n  }\n\n  /**\n   * Get the timing information of the request.\n   * @returns {FetchTimingInfo} The timing information of the request.\n   */\n  get timings() {\n    return this._timings\n  }\n}\n\n/**\n * Represents the base parameters for a network request.\n * Described in https://w3c.github.io/webdriver-bidi/#type-network-BaseParameters.\n */\nclass BaseParameters {\n  constructor(id, navigation, redirectCount, request, timestamp) {\n    this._id = id\n    this._navigation =\n      navigation != null\n        ? new NavigationInfo(navigation.context, navigation.navigation, navigation.timestamp, navigation.url)\n        : null\n    this._redirectCount = redirectCount\n    this._request = new RequestData(\n      request.request,\n      request.url,\n      request.method,\n      request.headers,\n      request.cookies,\n      request.headersSize,\n      request.bodySize,\n      request.timings,\n    )\n    this._timestamp = timestamp\n  }\n\n  /**\n   * Gets the browsing context ID of the network request.\n   * @returns {string|null} The browsing context ID of the network request.\n   */\n  get id() {\n    return this._id\n  }\n\n  /**\n   * Gets the navigation information associated with the network request.\n   * @returns {NavigationInfo|null} The navigation information associated with the network request, or null if not available.\n   */\n  get navigation() {\n    return this._navigation\n  }\n\n  /**\n   * Gets the number of redirects that occurred during the network request.\n   * @returns {number} The number of redirects that occurred during the network request.\n   */\n  get redirectCount() {\n    return this._redirectCount\n  }\n\n  /**\n   * Gets the request data for the network request.\n   * @returns {RequestData} The request data for the network request.\n   */\n  get request() {\n    return this._request\n  }\n\n  /**\n   * Gets the timestamp of the network request.\n   * @returns {number} The timestamp of the network request.\n   */\n  get timestamp() {\n    return this._timestamp\n  }\n}\n\n/**\n * Represents source in the network.\n * Described in https://w3c.github.io/webdriver-bidi/#type-network-Initiator.\n */\nclass Initiator {\n  /**\n   * Constructs a new Initiator instance.\n   * @param {string} type - The type of the initiator.\n   * @param {number} columnNumber - The column number.\n   * @param {number} lineNumber - The line number.\n   * @param {string} stackTrace - The stack trace.\n   * @param {string} request - The request id.\n   */\n  constructor(type, columnNumber, lineNumber, stackTrace, request) {\n    this._type = type\n    this._columnNumber = columnNumber\n    this._lineNumber = lineNumber\n    this._stackTrace = stackTrace\n    this._request = request\n  }\n\n  /**\n   * Gets the type of the initiator.\n   * @returns {string} The type of the initiator.\n   */\n  get type() {\n    return this._type\n  }\n\n  /**\n   * Gets the column number.\n   * @returns {number} The column number.\n   */\n  get columnNumber() {\n    return this._columnNumber\n  }\n\n  /**\n   * Gets the line number.\n   * @returns {number} The line number.\n   */\n  get lineNumber() {\n    return this._lineNumber\n  }\n\n  /**\n   * Gets the stack trace.\n   * @returns {string} The stack trace.\n   */\n  get stackTrace() {\n    return this._stackTrace\n  }\n\n  /**\n   * Gets the request ID.\n   * @returns {string} The request ID.\n   */\n  get request() {\n    return this._request\n  }\n}\n\n/**\n * Represents the BeforeRequestSent event parameters.\n * @class\n * @extends BaseParameters\n * Described in https://w3c.github.io/webdriver-bidi/#event-network-beforeSendRequest.\n */\nclass BeforeRequestSent extends BaseParameters {\n  constructor(id, navigation, redirectCount, request, timestamp, initiator) {\n    super(id, navigation, redirectCount, request, timestamp)\n    this._initiator = new Initiator(\n      initiator.type,\n      initiator.columnNumber,\n      initiator.lineNumber,\n      initiator.stackTrace,\n      initiator.request,\n    )\n  }\n\n  /**\n   * Get the initiator of the request.\n   * @returns {Initiator} The initiator object.\n   */\n  get initiator() {\n    return this._initiator\n  }\n}\n\n/**\n * Represents the FetchError event parameters.\n * Described https://w3c.github.io/webdriver-bidi/#event-network-fetchError\n * @extends BaseParameters\n */\nclass FetchError extends BaseParameters {\n  /**\n   * Creates a new FetchError instance.\n   * @param {string} id - The ID of the error.\n   * @param {string} navigation - The navigation information.\n   * @param {number} redirectCount - The number of redirects.\n   * @param {RequestData} request - The request object.\n   * @param {number} timestamp - The timestamp of the error.\n   * @param {string} errorText - The error text.\n   */\n  constructor(id, navigation, redirectCount, request, timestamp, errorText) {\n    super(id, navigation, redirectCount, request, timestamp)\n    this._errorText = errorText\n  }\n\n  /**\n   * Gets the error text.\n   * @returns {string} The error text.\n   */\n  get errorText() {\n    return this._errorText\n  }\n}\n\n/**\n * Represents the response data received from a network request.\n * Described in https://w3c.github.io/webdriver-bidi/#type-network-ResponseData.\n * @class\n */\nclass ResponseData {\n  constructor(\n    url,\n    protocol,\n    status,\n    statusText,\n    fromCache,\n    headers,\n    mimeType,\n    bytesReceived,\n    headersSize,\n    bodySize,\n    content,\n  ) {\n    this._url = url\n    this._protocol = protocol\n    this._status = status\n    this._statusText = statusText\n    this._fromCache = fromCache\n    this._headers = headers\n    this._mimeType = mimeType\n    this._bytesReceived = bytesReceived\n    this._headersSize = headersSize\n    this._bodySize = bodySize\n    this._content = content\n  }\n\n  /**\n   * Get the URL.\n   *\n   * @returns {string} The URL.\n   */\n  get url() {\n    return this._url\n  }\n\n  /**\n   * Get the protocol.\n   *\n   * @returns {string} The protocol.\n   */\n  get protocol() {\n    return this._protocol\n  }\n\n  /**\n   * Get the HTTP status.\n   *\n   * @returns {string} The HTTP status.\n   */\n  get status() {\n    return this._status\n  }\n\n  /**\n   * Gets the status text.\n   *\n   * @returns {string} The status text.\n   */\n  get statusText() {\n    return this._statusText\n  }\n\n  /**\n   * Gets the value indicating whether the data is retrieved from cache.\n   *\n   * @returns {boolean} The value indicating whether the data is retrieved from cache.\n   */\n  get fromCache() {\n    return this._fromCache\n  }\n\n  /**\n   * Get the headers.\n   *\n   * @returns {Object} The headers object.\n   */\n  get headers() {\n    return this._headers\n  }\n\n  /**\n   * The MIME type of the network resource.\n   *\n   * @type {string}\n   */\n  get mimeType() {\n    return this._mimeType\n  }\n\n  /**\n   * Gets the number of bytes received.\n   *\n   * @returns {number} The number of bytes received.\n   */\n  get bytesReceived() {\n    return this._bytesReceived\n  }\n\n  /**\n   * Get the size of the headers.\n   *\n   * @returns {number} The size of the headers.\n   */\n  get headerSize() {\n    return this._headersSize\n  }\n\n  /**\n   * Get the size of the body.\n   *\n   * @returns {number} The size of the body.\n   */\n  get bodySize() {\n    return this._bodySize\n  }\n\n  /**\n   * Gets the content.\n   *\n   * @returns {any} The content.\n   */\n  get content() {\n    return this._content\n  }\n}\n\n/**\n * Represents the ResponseStarted event parameters.\n * Described in https://w3c.github.io/webdriver-bidi/#event-network-responseStarted.\n * @class\n * @extends BaseParameters\n */\nclass ResponseStarted extends BaseParameters {\n  constructor(id, navigation, redirectCount, request, timestamp, response) {\n    super(id, navigation, redirectCount, request, timestamp)\n    this._response = new ResponseData(\n      response.url,\n      response.protocol,\n      response.status,\n      response.statusText,\n      response.fromCache,\n      response.headers,\n      response.mimeType,\n      response.bytesReceived,\n      response.headerSize,\n      response.bodySize,\n      response.content,\n    )\n  }\n\n  /**\n   * Get the response data.\n   * @returns {ResponseData} The response data.\n   */\n  get response() {\n    return this._response\n  }\n}\n\nmodule.exports = { Header, BytesValue, Cookie, SameSite, BeforeRequestSent, ResponseStarted, FetchError }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/bidi/networkTypes.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/bidi/protocolType.js":
/*!**************************************************************!*\
  !*** ./node_modules/selenium-webdriver/bidi/protocolType.js ***!
  \**************************************************************/
/***/ ((module) => {

eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * Represents a primitive type.\n * @enum\n * Described in https://w3c.github.io/webdriver-bidi/#type-script-PrimitiveProtocolValue.\n */\nconst PrimitiveType = {\n  UNDEFINED: 'undefined',\n  NULL: 'null',\n  STRING: 'string',\n  NUMBER: 'number',\n  SPECIAL_NUMBER: 'number',\n  BOOLEAN: 'boolean',\n  BIGINT: 'bigint',\n\n  findByName(name) {\n    return (\n      Object.values(this).find((type) => {\n        return typeof type === 'string' && name.toLowerCase() === type.toLowerCase()\n      }) || null\n    )\n  },\n}\n\n/**\n * Represents a non-primitive type.\n * @enum\n * Described inhttps://w3c.github.io/webdriver-bidi/#type-script-RemoteValue.\n */\nconst NonPrimitiveType = {\n  ARRAY: 'array',\n  DATE: 'date',\n  MAP: 'map',\n  OBJECT: 'object',\n  REGULAR_EXPRESSION: 'regexp',\n  SET: 'set',\n  CHANNEL: 'channel',\n\n  findByName(name) {\n    return (\n      Object.values(this).find((type) => {\n        return typeof type === 'string' && name.toLowerCase() === type.toLowerCase()\n      }) || null\n    )\n  },\n}\n\n/**\n * Represents a remote value type.\n * @enum\n * Described inhttps://w3c.github.io/webdriver-bidi/#type-script-RemoteValue.\n */\nconst RemoteType = {\n  SYMBOL: 'symbol',\n  FUNCTION: 'function',\n  WEAK_MAP: 'weakmap',\n  WEAK_SET: 'weakset',\n  ITERATOR: 'iterator',\n  GENERATOR: 'generator',\n  ERROR: 'error',\n  PROXY: 'proxy',\n  PROMISE: 'promise',\n  TYPED_ARRAY: 'typedarray',\n  ARRAY_BUFFER: 'arraybuffer',\n  NODE_LIST: 'nodelist',\n  HTML_COLLECTION: 'htmlcollection',\n  NODE: 'node',\n  WINDOW: 'window',\n\n  findByName(name) {\n    return (\n      Object.values(this).find((type) => {\n        return typeof type === 'string' && name.toLowerCase() === type.toLowerCase()\n      }) || null\n    )\n  },\n}\n\n/**\n * Represents a speacial number type.\n * @enum\n * Described in https://w3c.github.io/webdriver-bidi/#type-script-PrimitiveProtocolValue.\n */\nconst SpecialNumberType = {\n  NAN: 'NaN',\n  MINUS_ZERO: '-0',\n  INFINITY: 'Infinity',\n  MINUS_INFINITY: '-Infinity',\n}\n\nmodule.exports = {\n  PrimitiveType,\n  NonPrimitiveType,\n  RemoteType,\n  SpecialNumberType,\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc2VsZW5pdW0td2ViZHJpdmVyL2JpZGkvcHJvdG9jb2xUeXBlLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ29vZ2xlLXNoZWV0cy1zZWxlbml1bS1hdXRvbWF0aW9uLy4vbm9kZV9tb2R1bGVzL3NlbGVuaXVtLXdlYmRyaXZlci9iaWRpL3Byb3RvY29sVHlwZS5qcz9mMDc3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBTb2Z0d2FyZSBGcmVlZG9tIENvbnNlcnZhbmN5IChTRkMpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgU0ZDIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbi8qKlxuICogUmVwcmVzZW50cyBhIHByaW1pdGl2ZSB0eXBlLlxuICogQGVudW1cbiAqIERlc2NyaWJlZCBpbiBodHRwczovL3czYy5naXRodWIuaW8vd2ViZHJpdmVyLWJpZGkvI3R5cGUtc2NyaXB0LVByaW1pdGl2ZVByb3RvY29sVmFsdWUuXG4gKi9cbmNvbnN0IFByaW1pdGl2ZVR5cGUgPSB7XG4gIFVOREVGSU5FRDogJ3VuZGVmaW5lZCcsXG4gIE5VTEw6ICdudWxsJyxcbiAgU1RSSU5HOiAnc3RyaW5nJyxcbiAgTlVNQkVSOiAnbnVtYmVyJyxcbiAgU1BFQ0lBTF9OVU1CRVI6ICdudW1iZXInLFxuICBCT09MRUFOOiAnYm9vbGVhbicsXG4gIEJJR0lOVDogJ2JpZ2ludCcsXG5cbiAgZmluZEJ5TmFtZShuYW1lKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIE9iamVjdC52YWx1ZXModGhpcykuZmluZCgodHlwZSkgPT4ge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnICYmIG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gdHlwZS50b0xvd2VyQ2FzZSgpXG4gICAgICB9KSB8fCBudWxsXG4gICAgKVxuICB9LFxufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBub24tcHJpbWl0aXZlIHR5cGUuXG4gKiBAZW51bVxuICogRGVzY3JpYmVkIGluaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYmRyaXZlci1iaWRpLyN0eXBlLXNjcmlwdC1SZW1vdGVWYWx1ZS5cbiAqL1xuY29uc3QgTm9uUHJpbWl0aXZlVHlwZSA9IHtcbiAgQVJSQVk6ICdhcnJheScsXG4gIERBVEU6ICdkYXRlJyxcbiAgTUFQOiAnbWFwJyxcbiAgT0JKRUNUOiAnb2JqZWN0JyxcbiAgUkVHVUxBUl9FWFBSRVNTSU9OOiAncmVnZXhwJyxcbiAgU0VUOiAnc2V0JyxcbiAgQ0hBTk5FTDogJ2NoYW5uZWwnLFxuXG4gIGZpbmRCeU5hbWUobmFtZSkge1xuICAgIHJldHVybiAoXG4gICAgICBPYmplY3QudmFsdWVzKHRoaXMpLmZpbmQoKHR5cGUpID0+IHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJyAmJiBuYW1lLnRvTG93ZXJDYXNlKCkgPT09IHR5cGUudG9Mb3dlckNhc2UoKVxuICAgICAgfSkgfHwgbnVsbFxuICAgIClcbiAgfSxcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgcmVtb3RlIHZhbHVlIHR5cGUuXG4gKiBAZW51bVxuICogRGVzY3JpYmVkIGluaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYmRyaXZlci1iaWRpLyN0eXBlLXNjcmlwdC1SZW1vdGVWYWx1ZS5cbiAqL1xuY29uc3QgUmVtb3RlVHlwZSA9IHtcbiAgU1lNQk9MOiAnc3ltYm9sJyxcbiAgRlVOQ1RJT046ICdmdW5jdGlvbicsXG4gIFdFQUtfTUFQOiAnd2Vha21hcCcsXG4gIFdFQUtfU0VUOiAnd2Vha3NldCcsXG4gIElURVJBVE9SOiAnaXRlcmF0b3InLFxuICBHRU5FUkFUT1I6ICdnZW5lcmF0b3InLFxuICBFUlJPUjogJ2Vycm9yJyxcbiAgUFJPWFk6ICdwcm94eScsXG4gIFBST01JU0U6ICdwcm9taXNlJyxcbiAgVFlQRURfQVJSQVk6ICd0eXBlZGFycmF5JyxcbiAgQVJSQVlfQlVGRkVSOiAnYXJyYXlidWZmZXInLFxuICBOT0RFX0xJU1Q6ICdub2RlbGlzdCcsXG4gIEhUTUxfQ09MTEVDVElPTjogJ2h0bWxjb2xsZWN0aW9uJyxcbiAgTk9ERTogJ25vZGUnLFxuICBXSU5ET1c6ICd3aW5kb3cnLFxuXG4gIGZpbmRCeU5hbWUobmFtZSkge1xuICAgIHJldHVybiAoXG4gICAgICBPYmplY3QudmFsdWVzKHRoaXMpLmZpbmQoKHR5cGUpID0+IHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJyAmJiBuYW1lLnRvTG93ZXJDYXNlKCkgPT09IHR5cGUudG9Mb3dlckNhc2UoKVxuICAgICAgfSkgfHwgbnVsbFxuICAgIClcbiAgfSxcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgc3BlYWNpYWwgbnVtYmVyIHR5cGUuXG4gKiBAZW51bVxuICogRGVzY3JpYmVkIGluIGh0dHBzOi8vdzNjLmdpdGh1Yi5pby93ZWJkcml2ZXItYmlkaS8jdHlwZS1zY3JpcHQtUHJpbWl0aXZlUHJvdG9jb2xWYWx1ZS5cbiAqL1xuY29uc3QgU3BlY2lhbE51bWJlclR5cGUgPSB7XG4gIE5BTjogJ05hTicsXG4gIE1JTlVTX1pFUk86ICctMCcsXG4gIElORklOSVRZOiAnSW5maW5pdHknLFxuICBNSU5VU19JTkZJTklUWTogJy1JbmZpbml0eScsXG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBQcmltaXRpdmVUeXBlLFxuICBOb25QcmltaXRpdmVUeXBlLFxuICBSZW1vdGVUeXBlLFxuICBTcGVjaWFsTnVtYmVyVHlwZSxcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/bidi/protocolType.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/bidi/protocolValue.js":
/*!***************************************************************!*\
  !*** ./node_modules/selenium-webdriver/bidi/protocolValue.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst { PrimitiveType, NonPrimitiveType, RemoteType, SpecialNumberType } = __webpack_require__(/*! ./protocolType */ \"(rsc)/./node_modules/selenium-webdriver/bidi/protocolType.js\")\n\nconst TYPE_CONSTANT = 'type'\nconst VALUE_CONSTANT = 'value'\n/**\n * Represents the types of remote reference.\n * @enum {string}\n */\nconst RemoteReferenceType = {\n  HANDLE: 'handle',\n  SHARED_ID: 'sharedId',\n}\n\n/**\n * Represents a local value with a specified type and optional value.\n * @class\n * Described in https://w3c.github.io/webdriver-bidi/#type-script-LocalValue\n */\nclass LocalValue {\n  constructor(type, value = null) {\n    if (type === PrimitiveType.UNDEFINED || type === PrimitiveType.NULL) {\n      this.type = type\n    } else {\n      this.type = type\n      this.value = value\n    }\n  }\n\n  /**\n   * Creates a new LocalValue object with a string value.\n   *\n   * @param {string} value - The string value to be stored in the LocalValue object.\n   * @returns {LocalValue} - The created LocalValue object.\n   */\n  static createStringValue(value) {\n    return new LocalValue(PrimitiveType.STRING, value)\n  }\n\n  /**\n   * Creates a new LocalValue object with a number value.\n   *\n   * @param {number} value - The number value.\n   * @returns {LocalValue} - The created LocalValue object.\n   */\n  static createNumberValue(value) {\n    return new LocalValue(PrimitiveType.NUMBER, value)\n  }\n\n  /**\n   * Creates a new LocalValue object with a special number value.\n   *\n   * @param {number} value - The value of the special number.\n   * @returns {LocalValue} - The created LocalValue object.\n   */\n  static createSpecialNumberValue(value) {\n    return new LocalValue(PrimitiveType.SPECIAL_NUMBER, value)\n  }\n\n  /**\n   * Creates a new LocalValue object with an undefined value.\n   * @returns {LocalValue} - The created LocalValue object.\n   */\n  static createUndefinedValue() {\n    return new LocalValue(PrimitiveType.UNDEFINED)\n  }\n\n  /**\n   * Creates a new LocalValue object with a null value.\n   * @returns {LocalValue} - The created LocalValue object.\n   */\n  static createNullValue() {\n    return new LocalValue(PrimitiveType.NULL)\n  }\n\n  /**\n   * Creates a new LocalValue object with a boolean value.\n   *\n   * @param {boolean} value - The boolean value.\n   * @returns {LocalValue} - The created LocalValue object.\n   */\n  static createBooleanValue(value) {\n    return new LocalValue(PrimitiveType.BOOLEAN, value)\n  }\n\n  /**\n   * Creates a new LocalValue object with a BigInt value.\n   *\n   * @param {BigInt} value - The BigInt value.\n   * @returns {LocalValue} - The created LocalValue object.\n   */\n  static createBigIntValue(value) {\n    return new LocalValue(PrimitiveType.BIGINT, value)\n  }\n\n  /**\n   * Creates a new LocalValue object with an array.\n   *\n   * @param {Array} value - The array.\n   * @returns {LocalValue} - The created LocalValue object.\n   */\n  static createArrayValue(value) {\n    return new LocalValue(NonPrimitiveType.ARRAY, value)\n  }\n\n  /**\n   * Creates a new LocalValue object with date value.\n   *\n   * @param {string} value - The date.\n   * @returns {LocalValue} - The created LocalValue object.\n   */\n  static createDateValue(value) {\n    return new LocalValue(NonPrimitiveType.DATE, value)\n  }\n\n  /**\n   * Creates a new LocalValue object of map value.\n   * @param {Map} map - The map.\n   * @returns {LocalValue} - The created LocalValue object.\n   */\n  static createMapValue(map) {\n    let value = []\n    Object.entries(map).forEach((entry) => {\n      value.push(entry)\n    })\n    return new LocalValue(NonPrimitiveType.MAP, value)\n  }\n\n  /**\n   * Creates a new LocalValue object from the passed object.\n   *\n   * @param {Object} map - The object.\n   * @returns {LocalValue} - The created LocalValue object.\n   */\n  static createObjectValue(object) {\n    let value = []\n    Object.entries(object).forEach((entry) => {\n      value.push(entry)\n    })\n    return new LocalValue(NonPrimitiveType.OBJECT, value)\n  }\n\n  /**\n   * Creates a new LocalValue object of regular expression value.\n   *\n   * @param {string} value - The value of the regular expression.\n   * @returns {LocalValue} - The created LocalValue object.\n   */\n  static createRegularExpressionValue(value) {\n    return new LocalValue(NonPrimitiveType.REGULAR_EXPRESSION, value)\n  }\n\n  /**\n   * Creates a new LocalValue object with the specified value.\n   * @param {Set} value - The value to be set.\n   * @returns {LocalValue} - The created LocalValue object.\n   */\n  static createSetValue(value) {\n    return new LocalValue(NonPrimitiveType.SET, value)\n  }\n\n  /**\n   * Creates a new LocalValue object with the given channel value\n   *\n   * @param {ChannelValue} value - The channel value.\n   * @returns {LocalValue} - The created LocalValue object.\n   */\n  static createChannelValue(value) {\n    return new LocalValue(NonPrimitiveType.CHANNEL, value)\n  }\n\n  static createReferenceValue(handle, sharedId) {\n    return new ReferenceValue(handle, sharedId)\n  }\n\n  static getArgument(argument) {\n    let localValue = null\n\n    if (\n      argument === SpecialNumberType.NAN ||\n      argument === SpecialNumberType.MINUS_ZERO ||\n      argument === SpecialNumberType.INFINITY ||\n      argument === SpecialNumberType.MINUS_INFINITY\n    ) {\n      localValue = LocalValue.createSpecialNumberValue(argument)\n      return localValue\n    }\n\n    const type = typeof argument\n\n    switch (type) {\n      case PrimitiveType.STRING:\n        localValue = LocalValue.createStringValue(argument)\n        break\n      case PrimitiveType.NUMBER:\n        localValue = LocalValue.createNumberValue(argument)\n        break\n      case PrimitiveType.BOOLEAN:\n        localValue = LocalValue.createBooleanValue(argument)\n        break\n      case PrimitiveType.BIGINT:\n        localValue = LocalValue.createBigIntValue(argument.toString())\n        break\n      case PrimitiveType.UNDEFINED:\n        localValue = LocalValue.createUndefinedValue()\n        break\n      case NonPrimitiveType.OBJECT:\n        if (argument === null) {\n          localValue = LocalValue.createNullValue()\n          break\n        }\n        if (argument instanceof Date) {\n          localValue = LocalValue.createDateValue(argument)\n        } else if (argument instanceof Map) {\n          const map = []\n\n          argument.forEach((value, key) => {\n            let objectKey\n            if (typeof key === 'string') {\n              objectKey = key\n            } else {\n              objectKey = LocalValue.getArgument(key)\n            }\n            const objectValue = LocalValue.getArgument(value)\n            map.push([objectKey, objectValue])\n          })\n          localValue = new LocalValue(NonPrimitiveType.MAP, map)\n        } else if (argument instanceof Set) {\n          const set = []\n          argument.forEach((value) => {\n            set.push(LocalValue.getArgument(value))\n          })\n          localValue = LocalValue.createSetValue(set)\n        } else if (argument instanceof Array) {\n          const arr = []\n          argument.forEach((value) => {\n            arr.push(LocalValue.getArgument(value))\n          })\n          localValue = LocalValue.createArrayValue(arr)\n        } else if (argument instanceof RegExp) {\n          localValue = LocalValue.createRegularExpressionValue({\n            pattern: argument.source,\n            flags: argument.flags,\n          })\n        } else {\n          let value = []\n          Object.entries(argument).forEach((entry) => {\n            value.push([LocalValue.getArgument(entry[0]), LocalValue.getArgument(entry[1])])\n          })\n          localValue = new LocalValue(NonPrimitiveType.OBJECT, value)\n        }\n        break\n    }\n\n    return localValue\n  }\n\n  asMap() {\n    let toReturn = {}\n    toReturn[TYPE_CONSTANT] = this.type\n\n    if (!(this.type === PrimitiveType.NULL || this.type === PrimitiveType.UNDEFINED)) {\n      toReturn[VALUE_CONSTANT] = this.value\n    }\n    return toReturn\n  }\n}\n\n/**\n * Represents a remote value.\n * Described in https://w3c.github.io/webdriver-bidi/#type-script-RemoteValue.\n * @class\n */\nclass RemoteValue {\n  constructor(remoteValue) {\n    this.type = null\n    this.handle = null\n    this.internalId = null\n    this.value = null\n    this.sharedId = null\n\n    if ('type' in remoteValue) {\n      const typeString = remoteValue['type']\n      if (PrimitiveType.findByName(typeString) != null) {\n        this.type = PrimitiveType.findByName(typeString)\n      } else if (NonPrimitiveType.findByName(typeString) != null) {\n        this.type = NonPrimitiveType.findByName(typeString)\n      } else {\n        this.type = RemoteType.findByName(typeString)\n      }\n    }\n\n    if ('handle' in remoteValue) {\n      this.handle = remoteValue['handle']\n    }\n\n    if ('internalId' in remoteValue) {\n      this.internalId = remoteValue['internalId']\n    }\n\n    if ('value' in remoteValue) {\n      this.value = remoteValue['value']\n    }\n\n    if ('sharedId' in remoteValue) {\n      this.sharedId = remoteValue['sharedId']\n    }\n\n    if (this.value != null) {\n      this.value = this.deserializeValue(this.value, this.type)\n    }\n  }\n\n  deserializeValue(value, type) {\n    if (type === NonPrimitiveType.OBJECT) {\n      return Object.fromEntries(value)\n    } else if (type === NonPrimitiveType.REGULAR_EXPRESSION) {\n      return new RegExpValue(value.pattern, value.flags)\n    }\n    return value\n  }\n}\n\n/**\n * Represents a reference value in the protocol.\n * Described in https://w3c.github.io/webdriver-bidi/#type-script-RemoteReference.\n */\nclass ReferenceValue {\n  #handle\n  #sharedId\n\n  /**\n   * Constructs a new ReferenceValue object.\n   * @param {string} handle - The handle value.\n   * @param {string} sharedId - The shared ID value.\n   */\n  constructor(handle, sharedId) {\n    if (handle === RemoteReferenceType.HANDLE) {\n      this.#handle = sharedId\n    } else if (handle === RemoteReferenceType.SHARED_ID) {\n      this.#sharedId = sharedId\n    } else {\n      this.#handle = handle\n      this.#sharedId = sharedId\n    }\n  }\n\n  asMap() {\n    const toReturn = {}\n    if (this.#handle != null) {\n      toReturn[RemoteReferenceType.HANDLE] = this.#handle\n    }\n\n    if (this.#sharedId != null) {\n      toReturn[RemoteReferenceType.SHARED_ID] = this.#sharedId\n    }\n\n    return toReturn\n  }\n}\n\n/**\n * Represents a regular expression value.\n * Described in https://w3c.github.io/webdriver-bidi/#type-script-LocalValue.\n */\nclass RegExpValue {\n  /**\n   * Constructs a new RegExpValue object.\n   * @param {string} pattern - The pattern of the regular expression.\n   * @param {string|null} [flags=null] - The flags of the regular expression.\n   */\n  constructor(pattern, flags = null) {\n    this.pattern = pattern\n    this.flags = flags\n  }\n}\n\n/**\n * Represents serialization options.\n * Described in https://w3c.github.io/webdriver-bidi/#type-script-SerializationOptions.\n */\nclass SerializationOptions {\n  /**\n   * Constructs a new instance of SerializationOptions.\n   * @param {number} [maxDomDepth=0] - The maximum depth to serialize the DOM.\n   * @param {number|null} [maxObjectDepth=null] - The maximum depth to serialize objects.\n   * @param {'none'|'open'|'all'} [includeShadowTree='none'] - The inclusion level of the shadow tree.\n   * @throws {Error} If the `includeShadowTree` value is not one of 'none', 'open', or 'all'.\n   */\n  constructor(maxDomDepth = 0, maxObjectDepth = null, includeShadowTree = 'none') {\n    this._maxDomDepth = maxDomDepth\n    this._maxObjectDepth = maxObjectDepth\n\n    if (['none', 'open', 'all'].includes(includeShadowTree)) {\n      throw Error(`Valid types are 'none', 'open', and 'all'. Received: ${includeShadowTree}`)\n    }\n    this._includeShadowTree = includeShadowTree\n  }\n}\n\n/**\n * Represents a channel value.\n * Described in https://w3c.github.io/webdriver-bidi/#type-script-ChannelValue.\n * @class\n */\nclass ChannelValue {\n  constructor(channel, options = undefined, resultOwnership = undefined) {\n    this.channel = channel\n\n    if (options !== undefined) {\n      if (options instanceof SerializationOptions) {\n        this.options = options\n      } else {\n        throw Error(`Pass in SerializationOptions object. Received: ${options} `)\n      }\n    }\n\n    if (resultOwnership != undefined) {\n      if (['root', 'none'].includes(resultOwnership)) {\n        this.resultOwnership = resultOwnership\n      } else {\n        throw Error(`Valid types are 'root' and 'none. Received: ${resultOwnership}`)\n      }\n    }\n  }\n}\n\nmodule.exports = {\n  ChannelValue,\n  LocalValue,\n  RemoteValue,\n  ReferenceValue,\n  RemoteReferenceType,\n  RegExpValue,\n  SerializationOptions,\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc2VsZW5pdW0td2ViZHJpdmVyL2JpZGkvcHJvdG9jb2xWYWx1ZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFFBQVEsaUVBQWlFLEVBQUUsbUJBQU8sQ0FBQyxvRkFBZ0I7O0FBRW5HO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixlQUFlLFlBQVk7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGVBQWUsWUFBWTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsZUFBZSxZQUFZO0FBQzNCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxlQUFlLFlBQVk7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGVBQWUsWUFBWTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFNBQVM7QUFDdEIsZUFBZSxZQUFZO0FBQzNCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixlQUFlLFlBQVk7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxPQUFPO0FBQ3BCLGVBQWUsWUFBWTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsZUFBZSxZQUFZO0FBQzNCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLEtBQUs7QUFDbEIsZUFBZSxZQUFZO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsZUFBZSxZQUFZO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsZUFBZSxZQUFZO0FBQzNCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLEtBQUs7QUFDbEIsZUFBZSxZQUFZO0FBQzNCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsY0FBYztBQUMzQixlQUFlLFlBQVk7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsYUFBYTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxhQUFhO0FBQzFCLGFBQWEscUJBQXFCO0FBQ2xDLGNBQWMsT0FBTztBQUNyQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDBFQUEwRSxrQkFBa0I7QUFDNUY7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1Isc0VBQXNFLFNBQVM7QUFDL0U7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1IsbUVBQW1FLGdCQUFnQjtBQUNuRjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nb29nbGUtc2hlZXRzLXNlbGVuaXVtLWF1dG9tYXRpb24vLi9ub2RlX21vZHVsZXMvc2VsZW5pdW0td2ViZHJpdmVyL2JpZGkvcHJvdG9jb2xWYWx1ZS5qcz82ZTAwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBTb2Z0d2FyZSBGcmVlZG9tIENvbnNlcnZhbmN5IChTRkMpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgU0ZDIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmNvbnN0IHsgUHJpbWl0aXZlVHlwZSwgTm9uUHJpbWl0aXZlVHlwZSwgUmVtb3RlVHlwZSwgU3BlY2lhbE51bWJlclR5cGUgfSA9IHJlcXVpcmUoJy4vcHJvdG9jb2xUeXBlJylcblxuY29uc3QgVFlQRV9DT05TVEFOVCA9ICd0eXBlJ1xuY29uc3QgVkFMVUVfQ09OU1RBTlQgPSAndmFsdWUnXG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIHR5cGVzIG9mIHJlbW90ZSByZWZlcmVuY2UuXG4gKiBAZW51bSB7c3RyaW5nfVxuICovXG5jb25zdCBSZW1vdGVSZWZlcmVuY2VUeXBlID0ge1xuICBIQU5ETEU6ICdoYW5kbGUnLFxuICBTSEFSRURfSUQ6ICdzaGFyZWRJZCcsXG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIGxvY2FsIHZhbHVlIHdpdGggYSBzcGVjaWZpZWQgdHlwZSBhbmQgb3B0aW9uYWwgdmFsdWUuXG4gKiBAY2xhc3NcbiAqIERlc2NyaWJlZCBpbiBodHRwczovL3czYy5naXRodWIuaW8vd2ViZHJpdmVyLWJpZGkvI3R5cGUtc2NyaXB0LUxvY2FsVmFsdWVcbiAqL1xuY2xhc3MgTG9jYWxWYWx1ZSB7XG4gIGNvbnN0cnVjdG9yKHR5cGUsIHZhbHVlID0gbnVsbCkge1xuICAgIGlmICh0eXBlID09PSBQcmltaXRpdmVUeXBlLlVOREVGSU5FRCB8fCB0eXBlID09PSBQcmltaXRpdmVUeXBlLk5VTEwpIHtcbiAgICAgIHRoaXMudHlwZSA9IHR5cGVcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy50eXBlID0gdHlwZVxuICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgTG9jYWxWYWx1ZSBvYmplY3Qgd2l0aCBhIHN0cmluZyB2YWx1ZS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIC0gVGhlIHN0cmluZyB2YWx1ZSB0byBiZSBzdG9yZWQgaW4gdGhlIExvY2FsVmFsdWUgb2JqZWN0LlxuICAgKiBAcmV0dXJucyB7TG9jYWxWYWx1ZX0gLSBUaGUgY3JlYXRlZCBMb2NhbFZhbHVlIG9iamVjdC5cbiAgICovXG4gIHN0YXRpYyBjcmVhdGVTdHJpbmdWYWx1ZSh2YWx1ZSkge1xuICAgIHJldHVybiBuZXcgTG9jYWxWYWx1ZShQcmltaXRpdmVUeXBlLlNUUklORywgdmFsdWUpXG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBMb2NhbFZhbHVlIG9iamVjdCB3aXRoIGEgbnVtYmVyIHZhbHVlLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSBUaGUgbnVtYmVyIHZhbHVlLlxuICAgKiBAcmV0dXJucyB7TG9jYWxWYWx1ZX0gLSBUaGUgY3JlYXRlZCBMb2NhbFZhbHVlIG9iamVjdC5cbiAgICovXG4gIHN0YXRpYyBjcmVhdGVOdW1iZXJWYWx1ZSh2YWx1ZSkge1xuICAgIHJldHVybiBuZXcgTG9jYWxWYWx1ZShQcmltaXRpdmVUeXBlLk5VTUJFUiwgdmFsdWUpXG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBMb2NhbFZhbHVlIG9iamVjdCB3aXRoIGEgc3BlY2lhbCBudW1iZXIgdmFsdWUuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtIFRoZSB2YWx1ZSBvZiB0aGUgc3BlY2lhbCBudW1iZXIuXG4gICAqIEByZXR1cm5zIHtMb2NhbFZhbHVlfSAtIFRoZSBjcmVhdGVkIExvY2FsVmFsdWUgb2JqZWN0LlxuICAgKi9cbiAgc3RhdGljIGNyZWF0ZVNwZWNpYWxOdW1iZXJWYWx1ZSh2YWx1ZSkge1xuICAgIHJldHVybiBuZXcgTG9jYWxWYWx1ZShQcmltaXRpdmVUeXBlLlNQRUNJQUxfTlVNQkVSLCB2YWx1ZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IExvY2FsVmFsdWUgb2JqZWN0IHdpdGggYW4gdW5kZWZpbmVkIHZhbHVlLlxuICAgKiBAcmV0dXJucyB7TG9jYWxWYWx1ZX0gLSBUaGUgY3JlYXRlZCBMb2NhbFZhbHVlIG9iamVjdC5cbiAgICovXG4gIHN0YXRpYyBjcmVhdGVVbmRlZmluZWRWYWx1ZSgpIHtcbiAgICByZXR1cm4gbmV3IExvY2FsVmFsdWUoUHJpbWl0aXZlVHlwZS5VTkRFRklORUQpXG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBMb2NhbFZhbHVlIG9iamVjdCB3aXRoIGEgbnVsbCB2YWx1ZS5cbiAgICogQHJldHVybnMge0xvY2FsVmFsdWV9IC0gVGhlIGNyZWF0ZWQgTG9jYWxWYWx1ZSBvYmplY3QuXG4gICAqL1xuICBzdGF0aWMgY3JlYXRlTnVsbFZhbHVlKCkge1xuICAgIHJldHVybiBuZXcgTG9jYWxWYWx1ZShQcmltaXRpdmVUeXBlLk5VTEwpXG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBMb2NhbFZhbHVlIG9iamVjdCB3aXRoIGEgYm9vbGVhbiB2YWx1ZS5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSB2YWx1ZSAtIFRoZSBib29sZWFuIHZhbHVlLlxuICAgKiBAcmV0dXJucyB7TG9jYWxWYWx1ZX0gLSBUaGUgY3JlYXRlZCBMb2NhbFZhbHVlIG9iamVjdC5cbiAgICovXG4gIHN0YXRpYyBjcmVhdGVCb29sZWFuVmFsdWUodmFsdWUpIHtcbiAgICByZXR1cm4gbmV3IExvY2FsVmFsdWUoUHJpbWl0aXZlVHlwZS5CT09MRUFOLCB2YWx1ZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IExvY2FsVmFsdWUgb2JqZWN0IHdpdGggYSBCaWdJbnQgdmFsdWUuXG4gICAqXG4gICAqIEBwYXJhbSB7QmlnSW50fSB2YWx1ZSAtIFRoZSBCaWdJbnQgdmFsdWUuXG4gICAqIEByZXR1cm5zIHtMb2NhbFZhbHVlfSAtIFRoZSBjcmVhdGVkIExvY2FsVmFsdWUgb2JqZWN0LlxuICAgKi9cbiAgc3RhdGljIGNyZWF0ZUJpZ0ludFZhbHVlKHZhbHVlKSB7XG4gICAgcmV0dXJuIG5ldyBMb2NhbFZhbHVlKFByaW1pdGl2ZVR5cGUuQklHSU5ULCB2YWx1ZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IExvY2FsVmFsdWUgb2JqZWN0IHdpdGggYW4gYXJyYXkuXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlIC0gVGhlIGFycmF5LlxuICAgKiBAcmV0dXJucyB7TG9jYWxWYWx1ZX0gLSBUaGUgY3JlYXRlZCBMb2NhbFZhbHVlIG9iamVjdC5cbiAgICovXG4gIHN0YXRpYyBjcmVhdGVBcnJheVZhbHVlKHZhbHVlKSB7XG4gICAgcmV0dXJuIG5ldyBMb2NhbFZhbHVlKE5vblByaW1pdGl2ZVR5cGUuQVJSQVksIHZhbHVlKVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgTG9jYWxWYWx1ZSBvYmplY3Qgd2l0aCBkYXRlIHZhbHVlLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgLSBUaGUgZGF0ZS5cbiAgICogQHJldHVybnMge0xvY2FsVmFsdWV9IC0gVGhlIGNyZWF0ZWQgTG9jYWxWYWx1ZSBvYmplY3QuXG4gICAqL1xuICBzdGF0aWMgY3JlYXRlRGF0ZVZhbHVlKHZhbHVlKSB7XG4gICAgcmV0dXJuIG5ldyBMb2NhbFZhbHVlKE5vblByaW1pdGl2ZVR5cGUuREFURSwgdmFsdWUpXG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBMb2NhbFZhbHVlIG9iamVjdCBvZiBtYXAgdmFsdWUuXG4gICAqIEBwYXJhbSB7TWFwfSBtYXAgLSBUaGUgbWFwLlxuICAgKiBAcmV0dXJucyB7TG9jYWxWYWx1ZX0gLSBUaGUgY3JlYXRlZCBMb2NhbFZhbHVlIG9iamVjdC5cbiAgICovXG4gIHN0YXRpYyBjcmVhdGVNYXBWYWx1ZShtYXApIHtcbiAgICBsZXQgdmFsdWUgPSBbXVxuICAgIE9iamVjdC5lbnRyaWVzKG1hcCkuZm9yRWFjaCgoZW50cnkpID0+IHtcbiAgICAgIHZhbHVlLnB1c2goZW50cnkpXG4gICAgfSlcbiAgICByZXR1cm4gbmV3IExvY2FsVmFsdWUoTm9uUHJpbWl0aXZlVHlwZS5NQVAsIHZhbHVlKVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgTG9jYWxWYWx1ZSBvYmplY3QgZnJvbSB0aGUgcGFzc2VkIG9iamVjdC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IG1hcCAtIFRoZSBvYmplY3QuXG4gICAqIEByZXR1cm5zIHtMb2NhbFZhbHVlfSAtIFRoZSBjcmVhdGVkIExvY2FsVmFsdWUgb2JqZWN0LlxuICAgKi9cbiAgc3RhdGljIGNyZWF0ZU9iamVjdFZhbHVlKG9iamVjdCkge1xuICAgIGxldCB2YWx1ZSA9IFtdXG4gICAgT2JqZWN0LmVudHJpZXMob2JqZWN0KS5mb3JFYWNoKChlbnRyeSkgPT4ge1xuICAgICAgdmFsdWUucHVzaChlbnRyeSlcbiAgICB9KVxuICAgIHJldHVybiBuZXcgTG9jYWxWYWx1ZShOb25QcmltaXRpdmVUeXBlLk9CSkVDVCwgdmFsdWUpXG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBMb2NhbFZhbHVlIG9iamVjdCBvZiByZWd1bGFyIGV4cHJlc3Npb24gdmFsdWUuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSAtIFRoZSB2YWx1ZSBvZiB0aGUgcmVndWxhciBleHByZXNzaW9uLlxuICAgKiBAcmV0dXJucyB7TG9jYWxWYWx1ZX0gLSBUaGUgY3JlYXRlZCBMb2NhbFZhbHVlIG9iamVjdC5cbiAgICovXG4gIHN0YXRpYyBjcmVhdGVSZWd1bGFyRXhwcmVzc2lvblZhbHVlKHZhbHVlKSB7XG4gICAgcmV0dXJuIG5ldyBMb2NhbFZhbHVlKE5vblByaW1pdGl2ZVR5cGUuUkVHVUxBUl9FWFBSRVNTSU9OLCB2YWx1ZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IExvY2FsVmFsdWUgb2JqZWN0IHdpdGggdGhlIHNwZWNpZmllZCB2YWx1ZS5cbiAgICogQHBhcmFtIHtTZXR9IHZhbHVlIC0gVGhlIHZhbHVlIHRvIGJlIHNldC5cbiAgICogQHJldHVybnMge0xvY2FsVmFsdWV9IC0gVGhlIGNyZWF0ZWQgTG9jYWxWYWx1ZSBvYmplY3QuXG4gICAqL1xuICBzdGF0aWMgY3JlYXRlU2V0VmFsdWUodmFsdWUpIHtcbiAgICByZXR1cm4gbmV3IExvY2FsVmFsdWUoTm9uUHJpbWl0aXZlVHlwZS5TRVQsIHZhbHVlKVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgTG9jYWxWYWx1ZSBvYmplY3Qgd2l0aCB0aGUgZ2l2ZW4gY2hhbm5lbCB2YWx1ZVxuICAgKlxuICAgKiBAcGFyYW0ge0NoYW5uZWxWYWx1ZX0gdmFsdWUgLSBUaGUgY2hhbm5lbCB2YWx1ZS5cbiAgICogQHJldHVybnMge0xvY2FsVmFsdWV9IC0gVGhlIGNyZWF0ZWQgTG9jYWxWYWx1ZSBvYmplY3QuXG4gICAqL1xuICBzdGF0aWMgY3JlYXRlQ2hhbm5lbFZhbHVlKHZhbHVlKSB7XG4gICAgcmV0dXJuIG5ldyBMb2NhbFZhbHVlKE5vblByaW1pdGl2ZVR5cGUuQ0hBTk5FTCwgdmFsdWUpXG4gIH1cblxuICBzdGF0aWMgY3JlYXRlUmVmZXJlbmNlVmFsdWUoaGFuZGxlLCBzaGFyZWRJZCkge1xuICAgIHJldHVybiBuZXcgUmVmZXJlbmNlVmFsdWUoaGFuZGxlLCBzaGFyZWRJZClcbiAgfVxuXG4gIHN0YXRpYyBnZXRBcmd1bWVudChhcmd1bWVudCkge1xuICAgIGxldCBsb2NhbFZhbHVlID0gbnVsbFxuXG4gICAgaWYgKFxuICAgICAgYXJndW1lbnQgPT09IFNwZWNpYWxOdW1iZXJUeXBlLk5BTiB8fFxuICAgICAgYXJndW1lbnQgPT09IFNwZWNpYWxOdW1iZXJUeXBlLk1JTlVTX1pFUk8gfHxcbiAgICAgIGFyZ3VtZW50ID09PSBTcGVjaWFsTnVtYmVyVHlwZS5JTkZJTklUWSB8fFxuICAgICAgYXJndW1lbnQgPT09IFNwZWNpYWxOdW1iZXJUeXBlLk1JTlVTX0lORklOSVRZXG4gICAgKSB7XG4gICAgICBsb2NhbFZhbHVlID0gTG9jYWxWYWx1ZS5jcmVhdGVTcGVjaWFsTnVtYmVyVmFsdWUoYXJndW1lbnQpXG4gICAgICByZXR1cm4gbG9jYWxWYWx1ZVxuICAgIH1cblxuICAgIGNvbnN0IHR5cGUgPSB0eXBlb2YgYXJndW1lbnRcblxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSBQcmltaXRpdmVUeXBlLlNUUklORzpcbiAgICAgICAgbG9jYWxWYWx1ZSA9IExvY2FsVmFsdWUuY3JlYXRlU3RyaW5nVmFsdWUoYXJndW1lbnQpXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIFByaW1pdGl2ZVR5cGUuTlVNQkVSOlxuICAgICAgICBsb2NhbFZhbHVlID0gTG9jYWxWYWx1ZS5jcmVhdGVOdW1iZXJWYWx1ZShhcmd1bWVudClcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgUHJpbWl0aXZlVHlwZS5CT09MRUFOOlxuICAgICAgICBsb2NhbFZhbHVlID0gTG9jYWxWYWx1ZS5jcmVhdGVCb29sZWFuVmFsdWUoYXJndW1lbnQpXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIFByaW1pdGl2ZVR5cGUuQklHSU5UOlxuICAgICAgICBsb2NhbFZhbHVlID0gTG9jYWxWYWx1ZS5jcmVhdGVCaWdJbnRWYWx1ZShhcmd1bWVudC50b1N0cmluZygpKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSBQcmltaXRpdmVUeXBlLlVOREVGSU5FRDpcbiAgICAgICAgbG9jYWxWYWx1ZSA9IExvY2FsVmFsdWUuY3JlYXRlVW5kZWZpbmVkVmFsdWUoKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSBOb25QcmltaXRpdmVUeXBlLk9CSkVDVDpcbiAgICAgICAgaWYgKGFyZ3VtZW50ID09PSBudWxsKSB7XG4gICAgICAgICAgbG9jYWxWYWx1ZSA9IExvY2FsVmFsdWUuY3JlYXRlTnVsbFZhbHVlKClcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIGlmIChhcmd1bWVudCBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgICBsb2NhbFZhbHVlID0gTG9jYWxWYWx1ZS5jcmVhdGVEYXRlVmFsdWUoYXJndW1lbnQpXG4gICAgICAgIH0gZWxzZSBpZiAoYXJndW1lbnQgaW5zdGFuY2VvZiBNYXApIHtcbiAgICAgICAgICBjb25zdCBtYXAgPSBbXVxuXG4gICAgICAgICAgYXJndW1lbnQuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICAgICAgbGV0IG9iamVjdEtleVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIG9iamVjdEtleSA9IGtleVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgb2JqZWN0S2V5ID0gTG9jYWxWYWx1ZS5nZXRBcmd1bWVudChrZXkpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBvYmplY3RWYWx1ZSA9IExvY2FsVmFsdWUuZ2V0QXJndW1lbnQodmFsdWUpXG4gICAgICAgICAgICBtYXAucHVzaChbb2JqZWN0S2V5LCBvYmplY3RWYWx1ZV0pXG4gICAgICAgICAgfSlcbiAgICAgICAgICBsb2NhbFZhbHVlID0gbmV3IExvY2FsVmFsdWUoTm9uUHJpbWl0aXZlVHlwZS5NQVAsIG1hcClcbiAgICAgICAgfSBlbHNlIGlmIChhcmd1bWVudCBpbnN0YW5jZW9mIFNldCkge1xuICAgICAgICAgIGNvbnN0IHNldCA9IFtdXG4gICAgICAgICAgYXJndW1lbnQuZm9yRWFjaCgodmFsdWUpID0+IHtcbiAgICAgICAgICAgIHNldC5wdXNoKExvY2FsVmFsdWUuZ2V0QXJndW1lbnQodmFsdWUpKVxuICAgICAgICAgIH0pXG4gICAgICAgICAgbG9jYWxWYWx1ZSA9IExvY2FsVmFsdWUuY3JlYXRlU2V0VmFsdWUoc2V0KVxuICAgICAgICB9IGVsc2UgaWYgKGFyZ3VtZW50IGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICBjb25zdCBhcnIgPSBbXVxuICAgICAgICAgIGFyZ3VtZW50LmZvckVhY2goKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICBhcnIucHVzaChMb2NhbFZhbHVlLmdldEFyZ3VtZW50KHZhbHVlKSlcbiAgICAgICAgICB9KVxuICAgICAgICAgIGxvY2FsVmFsdWUgPSBMb2NhbFZhbHVlLmNyZWF0ZUFycmF5VmFsdWUoYXJyKVxuICAgICAgICB9IGVsc2UgaWYgKGFyZ3VtZW50IGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICAgICAgbG9jYWxWYWx1ZSA9IExvY2FsVmFsdWUuY3JlYXRlUmVndWxhckV4cHJlc3Npb25WYWx1ZSh7XG4gICAgICAgICAgICBwYXR0ZXJuOiBhcmd1bWVudC5zb3VyY2UsXG4gICAgICAgICAgICBmbGFnczogYXJndW1lbnQuZmxhZ3MsXG4gICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsZXQgdmFsdWUgPSBbXVxuICAgICAgICAgIE9iamVjdC5lbnRyaWVzKGFyZ3VtZW50KS5mb3JFYWNoKChlbnRyeSkgPT4ge1xuICAgICAgICAgICAgdmFsdWUucHVzaChbTG9jYWxWYWx1ZS5nZXRBcmd1bWVudChlbnRyeVswXSksIExvY2FsVmFsdWUuZ2V0QXJndW1lbnQoZW50cnlbMV0pXSlcbiAgICAgICAgICB9KVxuICAgICAgICAgIGxvY2FsVmFsdWUgPSBuZXcgTG9jYWxWYWx1ZShOb25QcmltaXRpdmVUeXBlLk9CSkVDVCwgdmFsdWUpXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICB9XG5cbiAgICByZXR1cm4gbG9jYWxWYWx1ZVxuICB9XG5cbiAgYXNNYXAoKSB7XG4gICAgbGV0IHRvUmV0dXJuID0ge31cbiAgICB0b1JldHVybltUWVBFX0NPTlNUQU5UXSA9IHRoaXMudHlwZVxuXG4gICAgaWYgKCEodGhpcy50eXBlID09PSBQcmltaXRpdmVUeXBlLk5VTEwgfHwgdGhpcy50eXBlID09PSBQcmltaXRpdmVUeXBlLlVOREVGSU5FRCkpIHtcbiAgICAgIHRvUmV0dXJuW1ZBTFVFX0NPTlNUQU5UXSA9IHRoaXMudmFsdWVcbiAgICB9XG4gICAgcmV0dXJuIHRvUmV0dXJuXG4gIH1cbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgcmVtb3RlIHZhbHVlLlxuICogRGVzY3JpYmVkIGluIGh0dHBzOi8vdzNjLmdpdGh1Yi5pby93ZWJkcml2ZXItYmlkaS8jdHlwZS1zY3JpcHQtUmVtb3RlVmFsdWUuXG4gKiBAY2xhc3NcbiAqL1xuY2xhc3MgUmVtb3RlVmFsdWUge1xuICBjb25zdHJ1Y3RvcihyZW1vdGVWYWx1ZSkge1xuICAgIHRoaXMudHlwZSA9IG51bGxcbiAgICB0aGlzLmhhbmRsZSA9IG51bGxcbiAgICB0aGlzLmludGVybmFsSWQgPSBudWxsXG4gICAgdGhpcy52YWx1ZSA9IG51bGxcbiAgICB0aGlzLnNoYXJlZElkID0gbnVsbFxuXG4gICAgaWYgKCd0eXBlJyBpbiByZW1vdGVWYWx1ZSkge1xuICAgICAgY29uc3QgdHlwZVN0cmluZyA9IHJlbW90ZVZhbHVlWyd0eXBlJ11cbiAgICAgIGlmIChQcmltaXRpdmVUeXBlLmZpbmRCeU5hbWUodHlwZVN0cmluZykgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLnR5cGUgPSBQcmltaXRpdmVUeXBlLmZpbmRCeU5hbWUodHlwZVN0cmluZylcbiAgICAgIH0gZWxzZSBpZiAoTm9uUHJpbWl0aXZlVHlwZS5maW5kQnlOYW1lKHR5cGVTdHJpbmcpICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy50eXBlID0gTm9uUHJpbWl0aXZlVHlwZS5maW5kQnlOYW1lKHR5cGVTdHJpbmcpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnR5cGUgPSBSZW1vdGVUeXBlLmZpbmRCeU5hbWUodHlwZVN0cmluZylcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoJ2hhbmRsZScgaW4gcmVtb3RlVmFsdWUpIHtcbiAgICAgIHRoaXMuaGFuZGxlID0gcmVtb3RlVmFsdWVbJ2hhbmRsZSddXG4gICAgfVxuXG4gICAgaWYgKCdpbnRlcm5hbElkJyBpbiByZW1vdGVWYWx1ZSkge1xuICAgICAgdGhpcy5pbnRlcm5hbElkID0gcmVtb3RlVmFsdWVbJ2ludGVybmFsSWQnXVxuICAgIH1cblxuICAgIGlmICgndmFsdWUnIGluIHJlbW90ZVZhbHVlKSB7XG4gICAgICB0aGlzLnZhbHVlID0gcmVtb3RlVmFsdWVbJ3ZhbHVlJ11cbiAgICB9XG5cbiAgICBpZiAoJ3NoYXJlZElkJyBpbiByZW1vdGVWYWx1ZSkge1xuICAgICAgdGhpcy5zaGFyZWRJZCA9IHJlbW90ZVZhbHVlWydzaGFyZWRJZCddXG4gICAgfVxuXG4gICAgaWYgKHRoaXMudmFsdWUgIT0gbnVsbCkge1xuICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuZGVzZXJpYWxpemVWYWx1ZSh0aGlzLnZhbHVlLCB0aGlzLnR5cGUpXG4gICAgfVxuICB9XG5cbiAgZGVzZXJpYWxpemVWYWx1ZSh2YWx1ZSwgdHlwZSkge1xuICAgIGlmICh0eXBlID09PSBOb25QcmltaXRpdmVUeXBlLk9CSkVDVCkge1xuICAgICAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyh2YWx1ZSlcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09IE5vblByaW1pdGl2ZVR5cGUuUkVHVUxBUl9FWFBSRVNTSU9OKSB7XG4gICAgICByZXR1cm4gbmV3IFJlZ0V4cFZhbHVlKHZhbHVlLnBhdHRlcm4sIHZhbHVlLmZsYWdzKVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWVcbiAgfVxufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSByZWZlcmVuY2UgdmFsdWUgaW4gdGhlIHByb3RvY29sLlxuICogRGVzY3JpYmVkIGluIGh0dHBzOi8vdzNjLmdpdGh1Yi5pby93ZWJkcml2ZXItYmlkaS8jdHlwZS1zY3JpcHQtUmVtb3RlUmVmZXJlbmNlLlxuICovXG5jbGFzcyBSZWZlcmVuY2VWYWx1ZSB7XG4gICNoYW5kbGVcbiAgI3NoYXJlZElkXG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdHMgYSBuZXcgUmVmZXJlbmNlVmFsdWUgb2JqZWN0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaGFuZGxlIC0gVGhlIGhhbmRsZSB2YWx1ZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHNoYXJlZElkIC0gVGhlIHNoYXJlZCBJRCB2YWx1ZS5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGhhbmRsZSwgc2hhcmVkSWQpIHtcbiAgICBpZiAoaGFuZGxlID09PSBSZW1vdGVSZWZlcmVuY2VUeXBlLkhBTkRMRSkge1xuICAgICAgdGhpcy4jaGFuZGxlID0gc2hhcmVkSWRcbiAgICB9IGVsc2UgaWYgKGhhbmRsZSA9PT0gUmVtb3RlUmVmZXJlbmNlVHlwZS5TSEFSRURfSUQpIHtcbiAgICAgIHRoaXMuI3NoYXJlZElkID0gc2hhcmVkSWRcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy4jaGFuZGxlID0gaGFuZGxlXG4gICAgICB0aGlzLiNzaGFyZWRJZCA9IHNoYXJlZElkXG4gICAgfVxuICB9XG5cbiAgYXNNYXAoKSB7XG4gICAgY29uc3QgdG9SZXR1cm4gPSB7fVxuICAgIGlmICh0aGlzLiNoYW5kbGUgIT0gbnVsbCkge1xuICAgICAgdG9SZXR1cm5bUmVtb3RlUmVmZXJlbmNlVHlwZS5IQU5ETEVdID0gdGhpcy4jaGFuZGxlXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuI3NoYXJlZElkICE9IG51bGwpIHtcbiAgICAgIHRvUmV0dXJuW1JlbW90ZVJlZmVyZW5jZVR5cGUuU0hBUkVEX0lEXSA9IHRoaXMuI3NoYXJlZElkXG4gICAgfVxuXG4gICAgcmV0dXJuIHRvUmV0dXJuXG4gIH1cbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgcmVndWxhciBleHByZXNzaW9uIHZhbHVlLlxuICogRGVzY3JpYmVkIGluIGh0dHBzOi8vdzNjLmdpdGh1Yi5pby93ZWJkcml2ZXItYmlkaS8jdHlwZS1zY3JpcHQtTG9jYWxWYWx1ZS5cbiAqL1xuY2xhc3MgUmVnRXhwVmFsdWUge1xuICAvKipcbiAgICogQ29uc3RydWN0cyBhIG5ldyBSZWdFeHBWYWx1ZSBvYmplY3QuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXR0ZXJuIC0gVGhlIHBhdHRlcm4gb2YgdGhlIHJlZ3VsYXIgZXhwcmVzc2lvbi5cbiAgICogQHBhcmFtIHtzdHJpbmd8bnVsbH0gW2ZsYWdzPW51bGxdIC0gVGhlIGZsYWdzIG9mIHRoZSByZWd1bGFyIGV4cHJlc3Npb24uXG4gICAqL1xuICBjb25zdHJ1Y3RvcihwYXR0ZXJuLCBmbGFncyA9IG51bGwpIHtcbiAgICB0aGlzLnBhdHRlcm4gPSBwYXR0ZXJuXG4gICAgdGhpcy5mbGFncyA9IGZsYWdzXG4gIH1cbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIHNlcmlhbGl6YXRpb24gb3B0aW9ucy5cbiAqIERlc2NyaWJlZCBpbiBodHRwczovL3czYy5naXRodWIuaW8vd2ViZHJpdmVyLWJpZGkvI3R5cGUtc2NyaXB0LVNlcmlhbGl6YXRpb25PcHRpb25zLlxuICovXG5jbGFzcyBTZXJpYWxpemF0aW9uT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RzIGEgbmV3IGluc3RhbmNlIG9mIFNlcmlhbGl6YXRpb25PcHRpb25zLlxuICAgKiBAcGFyYW0ge251bWJlcn0gW21heERvbURlcHRoPTBdIC0gVGhlIG1heGltdW0gZGVwdGggdG8gc2VyaWFsaXplIHRoZSBET00uXG4gICAqIEBwYXJhbSB7bnVtYmVyfG51bGx9IFttYXhPYmplY3REZXB0aD1udWxsXSAtIFRoZSBtYXhpbXVtIGRlcHRoIHRvIHNlcmlhbGl6ZSBvYmplY3RzLlxuICAgKiBAcGFyYW0geydub25lJ3wnb3Blbid8J2FsbCd9IFtpbmNsdWRlU2hhZG93VHJlZT0nbm9uZSddIC0gVGhlIGluY2x1c2lvbiBsZXZlbCBvZiB0aGUgc2hhZG93IHRyZWUuXG4gICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgYGluY2x1ZGVTaGFkb3dUcmVlYCB2YWx1ZSBpcyBub3Qgb25lIG9mICdub25lJywgJ29wZW4nLCBvciAnYWxsJy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKG1heERvbURlcHRoID0gMCwgbWF4T2JqZWN0RGVwdGggPSBudWxsLCBpbmNsdWRlU2hhZG93VHJlZSA9ICdub25lJykge1xuICAgIHRoaXMuX21heERvbURlcHRoID0gbWF4RG9tRGVwdGhcbiAgICB0aGlzLl9tYXhPYmplY3REZXB0aCA9IG1heE9iamVjdERlcHRoXG5cbiAgICBpZiAoWydub25lJywgJ29wZW4nLCAnYWxsJ10uaW5jbHVkZXMoaW5jbHVkZVNoYWRvd1RyZWUpKSB7XG4gICAgICB0aHJvdyBFcnJvcihgVmFsaWQgdHlwZXMgYXJlICdub25lJywgJ29wZW4nLCBhbmQgJ2FsbCcuIFJlY2VpdmVkOiAke2luY2x1ZGVTaGFkb3dUcmVlfWApXG4gICAgfVxuICAgIHRoaXMuX2luY2x1ZGVTaGFkb3dUcmVlID0gaW5jbHVkZVNoYWRvd1RyZWVcbiAgfVxufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBjaGFubmVsIHZhbHVlLlxuICogRGVzY3JpYmVkIGluIGh0dHBzOi8vdzNjLmdpdGh1Yi5pby93ZWJkcml2ZXItYmlkaS8jdHlwZS1zY3JpcHQtQ2hhbm5lbFZhbHVlLlxuICogQGNsYXNzXG4gKi9cbmNsYXNzIENoYW5uZWxWYWx1ZSB7XG4gIGNvbnN0cnVjdG9yKGNoYW5uZWwsIG9wdGlvbnMgPSB1bmRlZmluZWQsIHJlc3VsdE93bmVyc2hpcCA9IHVuZGVmaW5lZCkge1xuICAgIHRoaXMuY2hhbm5lbCA9IGNoYW5uZWxcblxuICAgIGlmIChvcHRpb25zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChvcHRpb25zIGluc3RhbmNlb2YgU2VyaWFsaXphdGlvbk9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9uc1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoYFBhc3MgaW4gU2VyaWFsaXphdGlvbk9wdGlvbnMgb2JqZWN0LiBSZWNlaXZlZDogJHtvcHRpb25zfSBgKVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChyZXN1bHRPd25lcnNoaXAgIT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoWydyb290JywgJ25vbmUnXS5pbmNsdWRlcyhyZXN1bHRPd25lcnNoaXApKSB7XG4gICAgICAgIHRoaXMucmVzdWx0T3duZXJzaGlwID0gcmVzdWx0T3duZXJzaGlwXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBFcnJvcihgVmFsaWQgdHlwZXMgYXJlICdyb290JyBhbmQgJ25vbmUuIFJlY2VpdmVkOiAke3Jlc3VsdE93bmVyc2hpcH1gKVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQ2hhbm5lbFZhbHVlLFxuICBMb2NhbFZhbHVlLFxuICBSZW1vdGVWYWx1ZSxcbiAgUmVmZXJlbmNlVmFsdWUsXG4gIFJlbW90ZVJlZmVyZW5jZVR5cGUsXG4gIFJlZ0V4cFZhbHVlLFxuICBTZXJpYWxpemF0aW9uT3B0aW9ucyxcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/bidi/protocolValue.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/bidi/provideResponseParameters.js":
/*!***************************************************************************!*\
  !*** ./node_modules/selenium-webdriver/bidi/provideResponseParameters.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst { BytesValue, Header } = __webpack_require__(/*! ./networkTypes */ \"(rsc)/./node_modules/selenium-webdriver/bidi/networkTypes.js\")\n\n/**\n * Represents parameters for providingResponse command.\n * Described in https://w3c.github.io/webdriver-bidi/#command-network-provideResponse.\n * @class\n */\nclass ProvideResponseParameters {\n  #map = new Map()\n\n  constructor(request) {\n    this.#map.set('request', request)\n  }\n\n  /**\n   * Sets the body value for the response parameters.\n   *\n   * @param {BytesValue} value - The value to set as the body. Must be an instance of BytesValue.\n   * @returns {ProvideResponseParameters} - Returns the ProvideResponseParameters object for chaining.\n   * @throws {Error} - Throws an error if the value is not an instance of BytesValue.\n   */\n  body(value) {\n    if (!(value instanceof BytesValue)) {\n      throw new Error(`Value must be an instance of BytesValue. Received: ${typeof value} with value: ${value}`)\n    }\n    this.#map.set('body', Object.fromEntries(value.asMap()))\n    return this\n  }\n\n  /**\n   * Sets the cookie headers for the response.\n   *\n   * @param {Header[]} cookieHeaders - An array of cookie headers.\n   * @returns {ProvideResponseParameters} - Returns the ProvideResponseParameters object for chaining.\n   * @throws {Error} - Throws an error if a cookie header is not an instance of Header.\n   */\n  cookies(cookieHeaders) {\n    const cookies = []\n    cookieHeaders.forEach((header) => {\n      if (!(header instanceof Header)) {\n        throw new Error(`CookieHeader must be an instance of Header. Received:'${header}'`)\n      }\n      cookies.push(Object.fromEntries(header.asMap()))\n    })\n\n    this.#map.set('cookies', cookies)\n    return this\n  }\n\n  /**\n   * Sets the headers for the response.\n   *\n   * @param {Header[]} headers - The headers to be set.\n   * @returns {ProvideResponseParameters} - Returns the ProvideResponseParameters object for chaining.\n   * @throws {Error} - If the provided header is not an instance of Header.\n   */\n  headers(headers) {\n    const headerList = []\n    headers.forEach((header) => {\n      if (!(header instanceof Header)) {\n        throw new Error(`Header must be an instance of Header. Received:'${header}'`)\n      }\n      headerList.push(Object.fromEntries(header.asMap()))\n    })\n\n    this.#map.set('headers', headerList)\n    return this\n  }\n\n  /**\n   * Sets the reason phrase for the response.\n   *\n   * @param {string} reasonPhrase - The reason phrase to set.\n   * @returns {ProvideResponseParameters} - Returns the ProvideResponseParameters object for chaining.\n   * @throws {Error} - If the reason phrase is not a string.\n   */\n  reasonPhrase(reasonPhrase) {\n    if (typeof reasonPhrase !== 'string') {\n      throw new Error(`Reason phrase must be a string. Received: '${reasonPhrase})'`)\n    }\n    this.#map.set('reasonPhrase', reasonPhrase)\n    return this\n  }\n\n  /**\n   * Sets the status code for the response.\n   *\n   * @param {number} statusCode - The status code to set.\n   * @returns {ProvideResponseParameters} - Returns the ProvideResponseParameters object for chaining.\n   * @throws {Error} - If the status code is not an integer.\n   */\n  statusCode(statusCode) {\n    if (!Number.isInteger(statusCode)) {\n      throw new Error(`Status must be an integer. Received:'${statusCode}'`)\n    }\n\n    this.#map.set('statusCode', statusCode)\n    return this\n  }\n\n  asMap() {\n    return this.#map\n  }\n}\n\nmodule.exports = { ProvideResponseParameters }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc2VsZW5pdW0td2ViZHJpdmVyL2JpZGkvcHJvdmlkZVJlc3BvbnNlUGFyYW1ldGVycy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFFBQVEscUJBQXFCLEVBQUUsbUJBQU8sQ0FBQyxvRkFBZ0I7O0FBRXZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFlBQVk7QUFDekIsZUFBZSwyQkFBMkI7QUFDMUMsY0FBYyxPQUFPO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBLDRFQUE0RSxjQUFjLGNBQWMsTUFBTTtBQUM5RztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFVBQVU7QUFDdkIsZUFBZSwyQkFBMkI7QUFDMUMsY0FBYyxPQUFPO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRkFBaUYsT0FBTztBQUN4RjtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxVQUFVO0FBQ3ZCLGVBQWUsMkJBQTJCO0FBQzFDLGNBQWMsT0FBTztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkVBQTJFLE9BQU87QUFDbEY7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixlQUFlLDJCQUEyQjtBQUMxQyxjQUFjLE9BQU87QUFDckI7QUFDQTtBQUNBO0FBQ0Esb0VBQW9FLGFBQWE7QUFDakY7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGVBQWUsMkJBQTJCO0FBQzFDLGNBQWMsT0FBTztBQUNyQjtBQUNBO0FBQ0E7QUFDQSw4REFBOEQsV0FBVztBQUN6RTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsbUJBQW1CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ29vZ2xlLXNoZWV0cy1zZWxlbml1bS1hdXRvbWF0aW9uLy4vbm9kZV9tb2R1bGVzL3NlbGVuaXVtLXdlYmRyaXZlci9iaWRpL3Byb3ZpZGVSZXNwb25zZVBhcmFtZXRlcnMuanM/ZTFkYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgU29mdHdhcmUgRnJlZWRvbSBDb25zZXJ2YW5jeSAoU0ZDKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIFNGQyBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5jb25zdCB7IEJ5dGVzVmFsdWUsIEhlYWRlciB9ID0gcmVxdWlyZSgnLi9uZXR3b3JrVHlwZXMnKVxuXG4vKipcbiAqIFJlcHJlc2VudHMgcGFyYW1ldGVycyBmb3IgcHJvdmlkaW5nUmVzcG9uc2UgY29tbWFuZC5cbiAqIERlc2NyaWJlZCBpbiBodHRwczovL3czYy5naXRodWIuaW8vd2ViZHJpdmVyLWJpZGkvI2NvbW1hbmQtbmV0d29yay1wcm92aWRlUmVzcG9uc2UuXG4gKiBAY2xhc3NcbiAqL1xuY2xhc3MgUHJvdmlkZVJlc3BvbnNlUGFyYW1ldGVycyB7XG4gICNtYXAgPSBuZXcgTWFwKClcblxuICBjb25zdHJ1Y3RvcihyZXF1ZXN0KSB7XG4gICAgdGhpcy4jbWFwLnNldCgncmVxdWVzdCcsIHJlcXVlc3QpXG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgYm9keSB2YWx1ZSBmb3IgdGhlIHJlc3BvbnNlIHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEBwYXJhbSB7Qnl0ZXNWYWx1ZX0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gc2V0IGFzIHRoZSBib2R5LiBNdXN0IGJlIGFuIGluc3RhbmNlIG9mIEJ5dGVzVmFsdWUuXG4gICAqIEByZXR1cm5zIHtQcm92aWRlUmVzcG9uc2VQYXJhbWV0ZXJzfSAtIFJldHVybnMgdGhlIFByb3ZpZGVSZXNwb25zZVBhcmFtZXRlcnMgb2JqZWN0IGZvciBjaGFpbmluZy5cbiAgICogQHRocm93cyB7RXJyb3J9IC0gVGhyb3dzIGFuIGVycm9yIGlmIHRoZSB2YWx1ZSBpcyBub3QgYW4gaW5zdGFuY2Ugb2YgQnl0ZXNWYWx1ZS5cbiAgICovXG4gIGJvZHkodmFsdWUpIHtcbiAgICBpZiAoISh2YWx1ZSBpbnN0YW5jZW9mIEJ5dGVzVmFsdWUpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFZhbHVlIG11c3QgYmUgYW4gaW5zdGFuY2Ugb2YgQnl0ZXNWYWx1ZS4gUmVjZWl2ZWQ6ICR7dHlwZW9mIHZhbHVlfSB3aXRoIHZhbHVlOiAke3ZhbHVlfWApXG4gICAgfVxuICAgIHRoaXMuI21hcC5zZXQoJ2JvZHknLCBPYmplY3QuZnJvbUVudHJpZXModmFsdWUuYXNNYXAoKSkpXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBjb29raWUgaGVhZGVycyBmb3IgdGhlIHJlc3BvbnNlLlxuICAgKlxuICAgKiBAcGFyYW0ge0hlYWRlcltdfSBjb29raWVIZWFkZXJzIC0gQW4gYXJyYXkgb2YgY29va2llIGhlYWRlcnMuXG4gICAqIEByZXR1cm5zIHtQcm92aWRlUmVzcG9uc2VQYXJhbWV0ZXJzfSAtIFJldHVybnMgdGhlIFByb3ZpZGVSZXNwb25zZVBhcmFtZXRlcnMgb2JqZWN0IGZvciBjaGFpbmluZy5cbiAgICogQHRocm93cyB7RXJyb3J9IC0gVGhyb3dzIGFuIGVycm9yIGlmIGEgY29va2llIGhlYWRlciBpcyBub3QgYW4gaW5zdGFuY2Ugb2YgSGVhZGVyLlxuICAgKi9cbiAgY29va2llcyhjb29raWVIZWFkZXJzKSB7XG4gICAgY29uc3QgY29va2llcyA9IFtdXG4gICAgY29va2llSGVhZGVycy5mb3JFYWNoKChoZWFkZXIpID0+IHtcbiAgICAgIGlmICghKGhlYWRlciBpbnN0YW5jZW9mIEhlYWRlcikpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb29raWVIZWFkZXIgbXVzdCBiZSBhbiBpbnN0YW5jZSBvZiBIZWFkZXIuIFJlY2VpdmVkOicke2hlYWRlcn0nYClcbiAgICAgIH1cbiAgICAgIGNvb2tpZXMucHVzaChPYmplY3QuZnJvbUVudHJpZXMoaGVhZGVyLmFzTWFwKCkpKVxuICAgIH0pXG5cbiAgICB0aGlzLiNtYXAuc2V0KCdjb29raWVzJywgY29va2llcylcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGhlYWRlcnMgZm9yIHRoZSByZXNwb25zZS5cbiAgICpcbiAgICogQHBhcmFtIHtIZWFkZXJbXX0gaGVhZGVycyAtIFRoZSBoZWFkZXJzIHRvIGJlIHNldC5cbiAgICogQHJldHVybnMge1Byb3ZpZGVSZXNwb25zZVBhcmFtZXRlcnN9IC0gUmV0dXJucyB0aGUgUHJvdmlkZVJlc3BvbnNlUGFyYW1ldGVycyBvYmplY3QgZm9yIGNoYWluaW5nLlxuICAgKiBAdGhyb3dzIHtFcnJvcn0gLSBJZiB0aGUgcHJvdmlkZWQgaGVhZGVyIGlzIG5vdCBhbiBpbnN0YW5jZSBvZiBIZWFkZXIuXG4gICAqL1xuICBoZWFkZXJzKGhlYWRlcnMpIHtcbiAgICBjb25zdCBoZWFkZXJMaXN0ID0gW11cbiAgICBoZWFkZXJzLmZvckVhY2goKGhlYWRlcikgPT4ge1xuICAgICAgaWYgKCEoaGVhZGVyIGluc3RhbmNlb2YgSGVhZGVyKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEhlYWRlciBtdXN0IGJlIGFuIGluc3RhbmNlIG9mIEhlYWRlci4gUmVjZWl2ZWQ6JyR7aGVhZGVyfSdgKVxuICAgICAgfVxuICAgICAgaGVhZGVyTGlzdC5wdXNoKE9iamVjdC5mcm9tRW50cmllcyhoZWFkZXIuYXNNYXAoKSkpXG4gICAgfSlcblxuICAgIHRoaXMuI21hcC5zZXQoJ2hlYWRlcnMnLCBoZWFkZXJMaXN0KVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgcmVhc29uIHBocmFzZSBmb3IgdGhlIHJlc3BvbnNlLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVhc29uUGhyYXNlIC0gVGhlIHJlYXNvbiBwaHJhc2UgdG8gc2V0LlxuICAgKiBAcmV0dXJucyB7UHJvdmlkZVJlc3BvbnNlUGFyYW1ldGVyc30gLSBSZXR1cm5zIHRoZSBQcm92aWRlUmVzcG9uc2VQYXJhbWV0ZXJzIG9iamVjdCBmb3IgY2hhaW5pbmcuXG4gICAqIEB0aHJvd3Mge0Vycm9yfSAtIElmIHRoZSByZWFzb24gcGhyYXNlIGlzIG5vdCBhIHN0cmluZy5cbiAgICovXG4gIHJlYXNvblBocmFzZShyZWFzb25QaHJhc2UpIHtcbiAgICBpZiAodHlwZW9mIHJlYXNvblBocmFzZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgUmVhc29uIHBocmFzZSBtdXN0IGJlIGEgc3RyaW5nLiBSZWNlaXZlZDogJyR7cmVhc29uUGhyYXNlfSknYClcbiAgICB9XG4gICAgdGhpcy4jbWFwLnNldCgncmVhc29uUGhyYXNlJywgcmVhc29uUGhyYXNlKVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgc3RhdHVzIGNvZGUgZm9yIHRoZSByZXNwb25zZS5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXR1c0NvZGUgLSBUaGUgc3RhdHVzIGNvZGUgdG8gc2V0LlxuICAgKiBAcmV0dXJucyB7UHJvdmlkZVJlc3BvbnNlUGFyYW1ldGVyc30gLSBSZXR1cm5zIHRoZSBQcm92aWRlUmVzcG9uc2VQYXJhbWV0ZXJzIG9iamVjdCBmb3IgY2hhaW5pbmcuXG4gICAqIEB0aHJvd3Mge0Vycm9yfSAtIElmIHRoZSBzdGF0dXMgY29kZSBpcyBub3QgYW4gaW50ZWdlci5cbiAgICovXG4gIHN0YXR1c0NvZGUoc3RhdHVzQ29kZSkge1xuICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihzdGF0dXNDb2RlKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBTdGF0dXMgbXVzdCBiZSBhbiBpbnRlZ2VyLiBSZWNlaXZlZDonJHtzdGF0dXNDb2RlfSdgKVxuICAgIH1cblxuICAgIHRoaXMuI21hcC5zZXQoJ3N0YXR1c0NvZGUnLCBzdGF0dXNDb2RlKVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBhc01hcCgpIHtcbiAgICByZXR1cm4gdGhpcy4jbWFwXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7IFByb3ZpZGVSZXNwb25zZVBhcmFtZXRlcnMgfVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/bidi/provideResponseParameters.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/bidi/realmInfo.js":
/*!***********************************************************!*\
  !*** ./node_modules/selenium-webdriver/bidi/realmInfo.js ***!
  \***********************************************************/
/***/ ((module) => {

eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * Represents the types of realms.\n * Described in https://w3c.github.io/webdriver-bidi/#type-script-RealmType.\n * @enum\n */\nconst RealmType = {\n  AUDIO_WORKLET: 'audio-worklet',\n  DEDICATED_WORKER: 'dedicated-worker',\n  PAINT_WORKLET: 'paint-worklet',\n  SERVICE_WORKED: 'service-worker',\n  SHARED_WORKED: 'shared-worker',\n  WINDOW: 'window',\n  WORKER: 'worker',\n  WORKLET: 'worklet',\n\n  findByName(name) {\n    return (\n      Object.values(this).find((type) => {\n        return typeof type === 'string' && name.toLowerCase() === type.toLowerCase()\n      }) || null\n    )\n  },\n}\n\n/**\n * Represents information about a realm.\n * Described in https://w3c.github.io/webdriver-bidi/#type-script-RealmInfo.\n */\nclass RealmInfo {\n  /**\n   * Constructs a new RealmInfo object.\n   * @param {string} realmId - The ID of the realm.\n   * @param {string} origin - The origin of the realm.\n   * @param {string} realmType - The type of the realm.\n   */\n  constructor(realmId, origin, realmType) {\n    this.realmId = realmId\n    this.origin = origin\n    this.realmType = realmType\n  }\n\n  static fromJson(input) {\n    let realmId = null\n    let origin = null\n    let realmType = null\n    let browsingContext = null\n    let sandbox = null\n\n    if ('type' in input) {\n      let typeString = input['type']\n      realmType = RealmType.findByName(typeString)\n    }\n\n    if ('realm' in input) {\n      realmId = input['realm']\n    }\n\n    if ('origin' in input) {\n      origin = input['origin']\n    }\n\n    if ('context' in input) {\n      browsingContext = input['context']\n    }\n\n    if ('sandbox' in input) {\n      sandbox = input['sandbox']\n    }\n\n    if (realmType === RealmType.WINDOW) {\n      return new WindowRealmInfo(realmId, origin, realmType, browsingContext, sandbox)\n    }\n\n    return new RealmInfo(realmId, origin, realmType)\n  }\n}\n\n/**\n * Represents information about a window realm.\n * @extends RealmInfo\n */\nclass WindowRealmInfo extends RealmInfo {\n  /**\n   * Constructs a new instance of the WindowRealmInfo class.\n   * @param {string} realmId - The ID of the realm.\n   * @param {string} origin - The origin of the realm.\n   * @param {string} realmType - The type of the realm.\n   * @param {string} browsingContext - The browsing context of the realm.\n   * @param {string|null} sandbox - The sandbox of the realm (optional).\n   */\n  constructor(realmId, origin, realmType, browsingContext, sandbox = null) {\n    super(realmId, origin, realmType)\n    this.browsingContext = browsingContext\n    this.sandbox = sandbox\n  }\n}\n\nmodule.exports = {\n  RealmInfo,\n  RealmType,\n  WindowRealmInfo,\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc2VsZW5pdW0td2ViZHJpdmVyL2JpZGkvcmVhbG1JbmZvLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSxhQUFhO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nb29nbGUtc2hlZXRzLXNlbGVuaXVtLWF1dG9tYXRpb24vLi9ub2RlX21vZHVsZXMvc2VsZW5pdW0td2ViZHJpdmVyL2JpZGkvcmVhbG1JbmZvLmpzPzMzOTkiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIFNvZnR3YXJlIEZyZWVkb20gQ29uc2VydmFuY3kgKFNGQykgdW5kZXIgb25lXG4vLyBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbi8vIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4vLyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBTRkMgbGljZW5zZXMgdGhpcyBmaWxlXG4vLyB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4vLyBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbi8vIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbi8vIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4vLyBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuLy8gS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4vLyBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4vLyB1bmRlciB0aGUgTGljZW5zZS5cblxuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSB0eXBlcyBvZiByZWFsbXMuXG4gKiBEZXNjcmliZWQgaW4gaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYmRyaXZlci1iaWRpLyN0eXBlLXNjcmlwdC1SZWFsbVR5cGUuXG4gKiBAZW51bVxuICovXG5jb25zdCBSZWFsbVR5cGUgPSB7XG4gIEFVRElPX1dPUktMRVQ6ICdhdWRpby13b3JrbGV0JyxcbiAgREVESUNBVEVEX1dPUktFUjogJ2RlZGljYXRlZC13b3JrZXInLFxuICBQQUlOVF9XT1JLTEVUOiAncGFpbnQtd29ya2xldCcsXG4gIFNFUlZJQ0VfV09SS0VEOiAnc2VydmljZS13b3JrZXInLFxuICBTSEFSRURfV09SS0VEOiAnc2hhcmVkLXdvcmtlcicsXG4gIFdJTkRPVzogJ3dpbmRvdycsXG4gIFdPUktFUjogJ3dvcmtlcicsXG4gIFdPUktMRVQ6ICd3b3JrbGV0JyxcblxuICBmaW5kQnlOYW1lKG5hbWUpIHtcbiAgICByZXR1cm4gKFxuICAgICAgT2JqZWN0LnZhbHVlcyh0aGlzKS5maW5kKCh0eXBlKSA9PiB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycgJiYgbmFtZS50b0xvd2VyQ2FzZSgpID09PSB0eXBlLnRvTG93ZXJDYXNlKClcbiAgICAgIH0pIHx8IG51bGxcbiAgICApXG4gIH0sXG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBpbmZvcm1hdGlvbiBhYm91dCBhIHJlYWxtLlxuICogRGVzY3JpYmVkIGluIGh0dHBzOi8vdzNjLmdpdGh1Yi5pby93ZWJkcml2ZXItYmlkaS8jdHlwZS1zY3JpcHQtUmVhbG1JbmZvLlxuICovXG5jbGFzcyBSZWFsbUluZm8ge1xuICAvKipcbiAgICogQ29uc3RydWN0cyBhIG5ldyBSZWFsbUluZm8gb2JqZWN0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVhbG1JZCAtIFRoZSBJRCBvZiB0aGUgcmVhbG0uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcmlnaW4gLSBUaGUgb3JpZ2luIG9mIHRoZSByZWFsbS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlYWxtVHlwZSAtIFRoZSB0eXBlIG9mIHRoZSByZWFsbS5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHJlYWxtSWQsIG9yaWdpbiwgcmVhbG1UeXBlKSB7XG4gICAgdGhpcy5yZWFsbUlkID0gcmVhbG1JZFxuICAgIHRoaXMub3JpZ2luID0gb3JpZ2luXG4gICAgdGhpcy5yZWFsbVR5cGUgPSByZWFsbVR5cGVcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvbihpbnB1dCkge1xuICAgIGxldCByZWFsbUlkID0gbnVsbFxuICAgIGxldCBvcmlnaW4gPSBudWxsXG4gICAgbGV0IHJlYWxtVHlwZSA9IG51bGxcbiAgICBsZXQgYnJvd3NpbmdDb250ZXh0ID0gbnVsbFxuICAgIGxldCBzYW5kYm94ID0gbnVsbFxuXG4gICAgaWYgKCd0eXBlJyBpbiBpbnB1dCkge1xuICAgICAgbGV0IHR5cGVTdHJpbmcgPSBpbnB1dFsndHlwZSddXG4gICAgICByZWFsbVR5cGUgPSBSZWFsbVR5cGUuZmluZEJ5TmFtZSh0eXBlU3RyaW5nKVxuICAgIH1cblxuICAgIGlmICgncmVhbG0nIGluIGlucHV0KSB7XG4gICAgICByZWFsbUlkID0gaW5wdXRbJ3JlYWxtJ11cbiAgICB9XG5cbiAgICBpZiAoJ29yaWdpbicgaW4gaW5wdXQpIHtcbiAgICAgIG9yaWdpbiA9IGlucHV0WydvcmlnaW4nXVxuICAgIH1cblxuICAgIGlmICgnY29udGV4dCcgaW4gaW5wdXQpIHtcbiAgICAgIGJyb3dzaW5nQ29udGV4dCA9IGlucHV0Wydjb250ZXh0J11cbiAgICB9XG5cbiAgICBpZiAoJ3NhbmRib3gnIGluIGlucHV0KSB7XG4gICAgICBzYW5kYm94ID0gaW5wdXRbJ3NhbmRib3gnXVxuICAgIH1cblxuICAgIGlmIChyZWFsbVR5cGUgPT09IFJlYWxtVHlwZS5XSU5ET1cpIHtcbiAgICAgIHJldHVybiBuZXcgV2luZG93UmVhbG1JbmZvKHJlYWxtSWQsIG9yaWdpbiwgcmVhbG1UeXBlLCBicm93c2luZ0NvbnRleHQsIHNhbmRib3gpXG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBSZWFsbUluZm8ocmVhbG1JZCwgb3JpZ2luLCByZWFsbVR5cGUpXG4gIH1cbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGluZm9ybWF0aW9uIGFib3V0IGEgd2luZG93IHJlYWxtLlxuICogQGV4dGVuZHMgUmVhbG1JbmZvXG4gKi9cbmNsYXNzIFdpbmRvd1JlYWxtSW5mbyBleHRlbmRzIFJlYWxtSW5mbyB7XG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RzIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBXaW5kb3dSZWFsbUluZm8gY2xhc3MuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWFsbUlkIC0gVGhlIElEIG9mIHRoZSByZWFsbS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG9yaWdpbiAtIFRoZSBvcmlnaW4gb2YgdGhlIHJlYWxtLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVhbG1UeXBlIC0gVGhlIHR5cGUgb2YgdGhlIHJlYWxtLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gYnJvd3NpbmdDb250ZXh0IC0gVGhlIGJyb3dzaW5nIGNvbnRleHQgb2YgdGhlIHJlYWxtLlxuICAgKiBAcGFyYW0ge3N0cmluZ3xudWxsfSBzYW5kYm94IC0gVGhlIHNhbmRib3ggb2YgdGhlIHJlYWxtIChvcHRpb25hbCkuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihyZWFsbUlkLCBvcmlnaW4sIHJlYWxtVHlwZSwgYnJvd3NpbmdDb250ZXh0LCBzYW5kYm94ID0gbnVsbCkge1xuICAgIHN1cGVyKHJlYWxtSWQsIG9yaWdpbiwgcmVhbG1UeXBlKVxuICAgIHRoaXMuYnJvd3NpbmdDb250ZXh0ID0gYnJvd3NpbmdDb250ZXh0XG4gICAgdGhpcy5zYW5kYm94ID0gc2FuZGJveFxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBSZWFsbUluZm8sXG4gIFJlYWxtVHlwZSxcbiAgV2luZG93UmVhbG1JbmZvLFxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/bidi/realmInfo.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/bidi/scriptManager.js":
/*!***************************************************************!*\
  !*** ./node_modules/selenium-webdriver/bidi/scriptManager.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst {\n  EvaluateResultType,\n  EvaluateResultSuccess,\n  EvaluateResultException,\n  ExceptionDetails,\n} = __webpack_require__(/*! ./evaluateResult */ \"(rsc)/./node_modules/selenium-webdriver/bidi/evaluateResult.js\")\nconst { Message } = __webpack_require__(/*! ./scriptTypes */ \"(rsc)/./node_modules/selenium-webdriver/bidi/scriptTypes.js\")\nconst { RealmInfo, RealmType, WindowRealmInfo } = __webpack_require__(/*! ./realmInfo */ \"(rsc)/./node_modules/selenium-webdriver/bidi/realmInfo.js\")\nconst { RemoteValue } = __webpack_require__(/*! ./protocolValue */ \"(rsc)/./node_modules/selenium-webdriver/bidi/protocolValue.js\")\nconst { Source } = __webpack_require__(/*! ./scriptTypes */ \"(rsc)/./node_modules/selenium-webdriver/bidi/scriptTypes.js\")\nconst { WebDriverError } = __webpack_require__(/*! ../lib/error */ \"(rsc)/./node_modules/selenium-webdriver/lib/error.js\")\n\nconst ScriptEvent = {\n  MESSAGE: 'script.message',\n  REALM_CREATED: 'script.realmCreated',\n  REALM_DESTROYED: 'script.realmDestroyed',\n}\n\n/**\n * Represents class to run events and commands of Script module.\n * Described in https://w3c.github.io/webdriver-bidi/#module-script.\n * @class\n */\nclass ScriptManager {\n  #callbackId = 0\n  #listener\n\n  constructor(driver) {\n    this._driver = driver\n    this.#listener = new Map()\n    this.#listener.set(ScriptEvent.MESSAGE, new Map())\n    this.#listener.set(ScriptEvent.REALM_CREATED, new Map())\n    this.#listener.set(ScriptEvent.REALM_DESTROYED, new Map())\n  }\n\n  addCallback(eventType, callback) {\n    const id = ++this.#callbackId\n\n    const eventCallbackMap = this.#listener.get(eventType)\n    eventCallbackMap.set(id, callback)\n    return id\n  }\n\n  removeCallback(id) {\n    let hasId = false\n    for (const [, callbacks] of this.#listener) {\n      if (callbacks.has(id)) {\n        callbacks.delete(id)\n        hasId = true\n      }\n    }\n\n    if (!hasId) {\n      throw Error(`Callback with id ${id} not found`)\n    }\n  }\n\n  invokeCallbacks(eventType, data) {\n    const callbacks = this.#listener.get(eventType)\n    if (callbacks) {\n      for (const [, callback] of callbacks) {\n        callback(data)\n      }\n    }\n  }\n\n  async init(browsingContextIds) {\n    if (!(await this._driver.getCapabilities()).get('webSocketUrl')) {\n      throw Error('WebDriver instance must support BiDi protocol')\n    }\n\n    this.bidi = await this._driver.getBidi()\n    this._browsingContextIds = browsingContextIds\n  }\n\n  /**\n   * Disowns the handles in the specified realm.\n   *\n   * @param {string} realmId - The ID of the realm.\n   * @param {string[]} handles - The handles to disown to allow garbage collection.\n   * @returns {Promise<void>} - A promise that resolves when the command is sent.\n   */\n  async disownRealmScript(realmId, handles) {\n    const params = {\n      method: 'script.disown',\n      params: {\n        handles: handles,\n        target: {\n          realm: realmId,\n        },\n      },\n    }\n\n    await this.bidi.send(params)\n  }\n\n  /**\n   * Disowns the handles in the specified browsing context.\n   * @param {string} browsingContextId - The ID of the browsing context.\n   * @param {string[]} handles - The handles to disown to allow garbage collection.\n   * @param {String|null} [sandbox=null] - The sandbox name.\n   * @returns {Promise<void>} - A promise that resolves when the command is sent.\n   */\n  async disownBrowsingContextScript(browsingContextId, handles, sandbox = null) {\n    const params = {\n      method: 'script.disown',\n      params: {\n        handles: handles,\n        target: {\n          context: browsingContextId,\n        },\n      },\n    }\n\n    if (sandbox != null) {\n      params.params.target['sandbox'] = sandbox\n    }\n\n    await this.bidi.send(params)\n  }\n\n  /**\n   * Calls a function in the specified realm.\n   *\n   * @param {string} realmId - The ID of the realm.\n   * @param {string} functionDeclaration - The function to call.\n   * @param {boolean} awaitPromise - Whether to await the promise returned by the function.\n   * @param {LocalValue[]} [argumentValueList|null] - The list of argument values to pass to the function.\n   * @param {Object} [thisParameter|null] - The value of 'this' parameter for the function.\n   * @param {ResultOwnership} [resultOwnership|null] - The ownership of the result.\n   * @returns {Promise<EvaluateResultSuccess|EvaluateResultException>} - A promise that resolves to the evaluation result or exception.\n   */\n  async callFunctionInRealm(\n    realmId,\n    functionDeclaration,\n    awaitPromise,\n    argumentValueList = null,\n    thisParameter = null,\n    resultOwnership = null,\n  ) {\n    const params = this.getCallFunctionParams(\n      'realm',\n      realmId,\n      null,\n      functionDeclaration,\n      awaitPromise,\n      argumentValueList,\n      thisParameter,\n      resultOwnership,\n    )\n\n    const command = {\n      method: 'script.callFunction',\n      params,\n    }\n\n    let response = await this.bidi.send(command)\n    return this.createEvaluateResult(response)\n  }\n\n  /**\n   * Calls a function in the specified browsing context.\n   *\n   * @param {string} realmId - The ID of the browsing context.\n   * @param {string} functionDeclaration - The function to call.\n   * @param {boolean} awaitPromise - Whether to await the promise returned by the function.\n   * @param {LocalValue[]} [argumentValueList|null] - The list of argument values to pass to the function.\n   * @param {Object} [thisParameter|null] - The value of 'this' parameter for the function.\n   * @param {ResultOwnership} [resultOwnership|null] - The ownership of the result.\n   * @returns {Promise<EvaluateResultSuccess|EvaluateResultException>} - A promise that resolves to the evaluation result or exception.\n   */\n  async callFunctionInBrowsingContext(\n    browsingContextId,\n    functionDeclaration,\n    awaitPromise,\n    argumentValueList = null,\n    thisParameter = null,\n    resultOwnership = null,\n    sandbox = null,\n  ) {\n    const params = this.getCallFunctionParams(\n      'contextTarget',\n      browsingContextId,\n      sandbox,\n      functionDeclaration,\n      awaitPromise,\n      argumentValueList,\n      thisParameter,\n      resultOwnership,\n    )\n\n    const command = {\n      method: 'script.callFunction',\n      params,\n    }\n    const response = await this.bidi.send(command)\n    return this.createEvaluateResult(response)\n  }\n\n  /**\n   * Evaluates a function in the specified realm.\n   *\n   * @param {string} realmId - The ID of the realm.\n   * @param {string} expression - The expression to function to evaluate.\n   * @param {boolean} awaitPromise - Whether to await the promise.\n   * @param {ResultOwnership|null} resultOwnership - The ownership of the result.\n   * @returns {Promise<EvaluateResultSuccess|EvaluateResultException>} - A promise that resolves to the evaluation result or exception.\n   */\n  async evaluateFunctionInRealm(realmId, expression, awaitPromise, resultOwnership = null) {\n    const params = this.getEvaluateParams('realm', realmId, null, expression, awaitPromise, resultOwnership)\n\n    const command = {\n      method: 'script.evaluate',\n      params,\n    }\n\n    let response = await this.bidi.send(command)\n    return this.createEvaluateResult(response)\n  }\n\n  /**\n   * Evaluates a function in the browsing context.\n   *\n   * @param {string} realmId - The ID of the browsing context.\n   * @param {string} expression - The expression to function to evaluate.\n   * @param {boolean} awaitPromise - Whether to await the promise.\n   * @param {ResultOwnership|null} resultOwnership - The ownership of the result.\n   * @returns {Promise<EvaluateResultSuccess|EvaluateResultException>} - A promise that resolves to the evaluation result or exception.\n   */\n  async evaluateFunctionInBrowsingContext(\n    browsingContextId,\n    expression,\n    awaitPromise,\n    resultOwnership = null,\n    sandbox = null,\n  ) {\n    const params = this.getEvaluateParams(\n      'contextTarget',\n      browsingContextId,\n      sandbox,\n      expression,\n      awaitPromise,\n      resultOwnership,\n    )\n\n    const command = {\n      method: 'script.evaluate',\n      params,\n    }\n\n    let response = await this.bidi.send(command)\n    return this.createEvaluateResult(response)\n  }\n\n  /**\n   * Adds a preload script.\n   *\n   * @param {string} functionDeclaration - The declaration of the function to be added as a preload script.\n   * @param {LocalValue[]} [argumentValueList=[]] - The list of argument values to be passed to the preload script function.\n   * @param {string} [sandbox|null] - The sandbox object to be used for the preload script.\n   * @returns {Promise<number>} - A promise that resolves to the added preload script ID.\n   */\n  async addPreloadScript(functionDeclaration, argumentValueList = [], sandbox = null) {\n    const params = {\n      functionDeclaration: functionDeclaration,\n      arguments: argumentValueList,\n    }\n\n    if (sandbox !== null) {\n      params.sandbox = sandbox\n    }\n\n    if (Array.isArray(this._browsingContextIds) && this._browsingContextIds.length > 0) {\n      params.contexts = this._browsingContextIds\n    }\n\n    if (typeof this._browsingContextIds === 'string') {\n      params.contexts = new Array(this._browsingContextIds)\n    }\n\n    if (argumentValueList != null) {\n      let argumentParams = []\n      argumentValueList.forEach((argumentValue) => {\n        argumentParams.push(argumentValue.asMap())\n      })\n      params['arguments'] = argumentParams\n    }\n\n    const command = {\n      method: 'script.addPreloadScript',\n      params,\n    }\n\n    let response = await this.bidi.send(command)\n    return response.result.script\n  }\n\n  /**\n   * Removes a preload script.\n   *\n   * @param {string} script - The ID for the script to be removed.\n   * @returns {Promise<any>} - A promise that resolves with the result of the removal.\n   * @throws {WebDriverError} - If an error occurs during the removal process.\n   */\n  async removePreloadScript(script) {\n    const params = { script: script }\n    const command = {\n      method: 'script.removePreloadScript',\n      params,\n    }\n    let response = await this.bidi.send(command)\n    if ('error' in response) {\n      throw new WebDriverError(response.error)\n    }\n    return response.result\n  }\n\n  getCallFunctionParams(\n    targetType,\n    id,\n    sandbox,\n    functionDeclaration,\n    awaitPromise,\n    argumentValueList = null,\n    thisParameter = null,\n    resultOwnership = null,\n  ) {\n    const params = {\n      functionDeclaration: functionDeclaration,\n      awaitPromise: awaitPromise,\n    }\n    if (targetType === 'contextTarget') {\n      if (sandbox != null) {\n        params['target'] = { context: id, sandbox: sandbox }\n      } else {\n        params['target'] = { context: id }\n      }\n    } else {\n      params['target'] = { realm: id }\n    }\n\n    if (argumentValueList != null) {\n      let argumentParams = []\n      argumentValueList.forEach((argumentValue) => {\n        argumentParams.push(argumentValue.asMap())\n      })\n      params['arguments'] = argumentParams\n    }\n\n    if (thisParameter != null) {\n      params['this'] = thisParameter\n    }\n\n    if (resultOwnership != null) {\n      params['resultOwnership'] = resultOwnership\n    }\n\n    return params\n  }\n\n  getEvaluateParams(targetType, id, sandbox, expression, awaitPromise, resultOwnership = null) {\n    const params = {\n      expression: expression,\n      awaitPromise: awaitPromise,\n    }\n    if (targetType === 'contextTarget') {\n      if (sandbox != null) {\n        params['target'] = { context: id, sandbox: sandbox }\n      } else {\n        params['target'] = { context: id }\n      }\n    } else {\n      params['target'] = { realm: id }\n    }\n    if (resultOwnership != null) {\n      params['resultOwnership'] = resultOwnership\n    }\n\n    return params\n  }\n\n  createEvaluateResult(response) {\n    const type = response.result.type\n    const realmId = response.result.realm\n    let evaluateResult\n\n    if (type === EvaluateResultType.SUCCESS) {\n      const result = response.result.result\n      evaluateResult = new EvaluateResultSuccess(realmId, new RemoteValue(result))\n    } else {\n      const exceptionDetails = response.result.exceptionDetails\n      evaluateResult = new EvaluateResultException(realmId, new ExceptionDetails(exceptionDetails))\n    }\n    return evaluateResult\n  }\n\n  realmInfoMapper(realms) {\n    const realmsList = []\n    realms.forEach((realm) => {\n      realmsList.push(RealmInfo.fromJson(realm))\n    })\n    return realmsList\n  }\n\n  /**\n   * Retrieves all realms.\n   * @returns {Promise<RealmInfo[]>} - A promise that resolves to an array of RealmInfo objects.\n   */\n  async getAllRealms() {\n    const command = {\n      method: 'script.getRealms',\n      params: {},\n    }\n    let response = await this.bidi.send(command)\n    return this.realmInfoMapper(response.result.realms)\n  }\n\n  /**\n   * Retrieves the realms by type.\n   *\n   * @param {Type} type - The type of realms to retrieve.\n   * @returns {Promise<RealmInfo[]>} - A promise that resolves to an array of RealmInfo objects.\n   */\n  async getRealmsByType(type) {\n    const command = {\n      method: 'script.getRealms',\n      params: { type: type },\n    }\n    let response = await this.bidi.send(command)\n    return this.realmInfoMapper(response.result.realms)\n  }\n\n  /**\n   * Retrieves the realms in the specified browsing context.\n   *\n   * @param {string} browsingContext - The browsing context ID.\n   * @returns {Promise<RealmInfo[]>} - A promise that resolves to an array of RealmInfo objects.\n   */\n  async getRealmsInBrowsingContext(browsingContext) {\n    const command = {\n      method: 'script.getRealms',\n      params: { context: browsingContext },\n    }\n    let response = await this.bidi.send(command)\n    return this.realmInfoMapper(response.result.realms)\n  }\n\n  /**\n   * Retrieves the realms in a browsing context based on the specified type.\n   *\n   * @param {string} browsingContext - The browsing context ID.\n   * @param {string} type - The type of realms to retrieve.\n   * @returns {Promise<RealmInfo[]>} - A promise that resolves to an array of RealmInfo objects.\n   */\n  async getRealmsInBrowsingContextByType(browsingContext, type) {\n    const command = {\n      method: 'script.getRealms',\n      params: { context: browsingContext, type: type },\n    }\n    let response = await this.bidi.send(command)\n    return this.realmInfoMapper(response.result.realms)\n  }\n\n  /**\n   * Subscribes to the 'script.message' event and handles the callback function when a message is received.\n   *\n   * @param {Function} callback - The callback function to be executed when a message is received.\n   * @returns {Promise<void>} - A promise that resolves when the subscription is successful.\n   */\n  async onMessage(callback) {\n    return await this.subscribeAndHandleEvent(ScriptEvent.MESSAGE, callback)\n  }\n\n  /**\n   * Subscribes to the 'script.realmCreated' event and handles it with the provided callback.\n   *\n   * @param {Function} callback - The callback function to handle the 'script.realmCreated' event.\n   * @returns {Promise<void>} - A promise that resolves when the subscription is successful.\n   */\n  async onRealmCreated(callback) {\n    return await this.subscribeAndHandleEvent(ScriptEvent.REALM_CREATED, callback)\n  }\n\n  /**\n   * Subscribes to the 'script.realmDestroyed' event and handles it with the provided callback function.\n   *\n   * @param {Function} callback - The callback function to be executed when the 'script.realmDestroyed' event occurs.\n   * @returns {Promise<void>} - A promise that resolves when the subscription is successful.\n   */\n  async onRealmDestroyed(callback) {\n    return await this.subscribeAndHandleEvent(ScriptEvent.REALM_DESTROYED, callback)\n  }\n\n  async subscribeAndHandleEvent(eventType, callback) {\n    if (this._browsingContextIds != null) {\n      await this.bidi.subscribe(eventType, this._browsingContextIds)\n    } else {\n      await this.bidi.subscribe(eventType)\n    }\n\n    let id = this.addCallback(eventType, callback)\n\n    this.ws = await this.bidi.socket\n    this.ws.on('message', (event) => {\n      const { params } = JSON.parse(Buffer.from(event.toString()))\n      if (params) {\n        let response = null\n        if ('channel' in params) {\n          response = new Message(params.channel, new RemoteValue(params.data), new Source(params.source))\n        } else if ('realm' in params) {\n          if (params.type === RealmType.WINDOW) {\n            response = new WindowRealmInfo(params.realm, params.origin, params.type, params.context, params.sandbox)\n          } else if (params.realm !== null && params.type !== null) {\n            response = new RealmInfo(params.realm, params.origin, params.type)\n          } else if (params.realm !== null) {\n            response = params.realm\n          }\n        }\n        this.invokeCallbacks(eventType, response)\n      }\n    })\n\n    return id\n  }\n\n  async close() {\n    if (\n      this._browsingContextIds !== null &&\n      this._browsingContextIds !== undefined &&\n      this._browsingContextIds.length > 0\n    ) {\n      await this.bidi.unsubscribe(\n        'script.message',\n        'script.realmCreated',\n        'script.realmDestroyed',\n        this._browsingContextIds,\n      )\n    } else {\n      await this.bidi.unsubscribe('script.message', 'script.realmCreated', 'script.realmDestroyed')\n    }\n  }\n}\n\nasync function getScriptManagerInstance(browsingContextId, driver) {\n  let instance = new ScriptManager(driver)\n  await instance.init(browsingContextId)\n  return instance\n}\n\nmodule.exports = getScriptManagerInstance\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/bidi/scriptManager.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/bidi/scriptTypes.js":
/*!*************************************************************!*\
  !*** ./node_modules/selenium-webdriver/bidi/scriptTypes.js ***!
  \*************************************************************/
/***/ ((module) => {

eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * Represents a message received through a channel.\n * Described in https://w3c.github.io/webdriver-bidi/#event-script-message.\n * @class\n */\nclass Message {\n  /**\n   * Creates a new Message instance.\n   * @param {string} channel - The channel through which the message is received.\n   * @param {RemoteValue} data - The data contained in the message.\n   * @param {Source} source - The source of the message.\n   */\n  constructor(channel, data, source) {\n    this._channel = channel\n    this._data = data\n    this._source = source\n  }\n\n  /**\n   * Gets the channel through which the message is received.\n   * @returns {string} The channel.\n   */\n  get channel() {\n    return this._channel\n  }\n\n  /**\n   * Gets the data contained in the message.\n   * @returns {RemoteValue} The data.\n   */\n  get data() {\n    return this._data\n  }\n\n  /**\n   * Gets the source of the message.\n   * @returns {Source} The source.\n   */\n  get source() {\n    return this._source\n  }\n}\n\n/**\n * Represents a source object.\n * Described in https://w3c.github.io/webdriver-bidi/#type-script-Source.\n * @class\n */\nclass Source {\n  constructor(source) {\n    this._browsingContextId = null\n    this._realmId = source.realm\n\n    // Browsing context is returned as an optional parameter\n    if ('context' in source) {\n      this._browsingContextId = source.context\n    }\n  }\n\n  /**\n   * Get the browsing context ID.\n   * @returns {string|null} The browsing context ID.\n   */\n  get browsingContextId() {\n    return this._browsingContextId\n  }\n\n  /**\n   * Get the realm ID.\n   * @returns {string} The realm ID.\n   */\n  get realmId() {\n    return this._realmId\n  }\n}\n\nmodule.exports = { Message, Source }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc2VsZW5pdW0td2ViZHJpdmVyL2JpZGkvc2NyaXB0VHlwZXMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsYUFBYTtBQUMxQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGVBQWUsYUFBYTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGVBQWUsYUFBYTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsbUJBQW1CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ29vZ2xlLXNoZWV0cy1zZWxlbml1bS1hdXRvbWF0aW9uLy4vbm9kZV9tb2R1bGVzL3NlbGVuaXVtLXdlYmRyaXZlci9iaWRpL3NjcmlwdFR5cGVzLmpzP2YyMWEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIFNvZnR3YXJlIEZyZWVkb20gQ29uc2VydmFuY3kgKFNGQykgdW5kZXIgb25lXG4vLyBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbi8vIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4vLyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBTRkMgbGljZW5zZXMgdGhpcyBmaWxlXG4vLyB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4vLyBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbi8vIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbi8vIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4vLyBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuLy8gS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4vLyBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4vLyB1bmRlciB0aGUgTGljZW5zZS5cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgbWVzc2FnZSByZWNlaXZlZCB0aHJvdWdoIGEgY2hhbm5lbC5cbiAqIERlc2NyaWJlZCBpbiBodHRwczovL3czYy5naXRodWIuaW8vd2ViZHJpdmVyLWJpZGkvI2V2ZW50LXNjcmlwdC1tZXNzYWdlLlxuICogQGNsYXNzXG4gKi9cbmNsYXNzIE1lc3NhZ2Uge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBNZXNzYWdlIGluc3RhbmNlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hhbm5lbCAtIFRoZSBjaGFubmVsIHRocm91Z2ggd2hpY2ggdGhlIG1lc3NhZ2UgaXMgcmVjZWl2ZWQuXG4gICAqIEBwYXJhbSB7UmVtb3RlVmFsdWV9IGRhdGEgLSBUaGUgZGF0YSBjb250YWluZWQgaW4gdGhlIG1lc3NhZ2UuXG4gICAqIEBwYXJhbSB7U291cmNlfSBzb3VyY2UgLSBUaGUgc291cmNlIG9mIHRoZSBtZXNzYWdlLlxuICAgKi9cbiAgY29uc3RydWN0b3IoY2hhbm5lbCwgZGF0YSwgc291cmNlKSB7XG4gICAgdGhpcy5fY2hhbm5lbCA9IGNoYW5uZWxcbiAgICB0aGlzLl9kYXRhID0gZGF0YVxuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGNoYW5uZWwgdGhyb3VnaCB3aGljaCB0aGUgbWVzc2FnZSBpcyByZWNlaXZlZC5cbiAgICogQHJldHVybnMge3N0cmluZ30gVGhlIGNoYW5uZWwuXG4gICAqL1xuICBnZXQgY2hhbm5lbCgpIHtcbiAgICByZXR1cm4gdGhpcy5fY2hhbm5lbFxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGRhdGEgY29udGFpbmVkIGluIHRoZSBtZXNzYWdlLlxuICAgKiBAcmV0dXJucyB7UmVtb3RlVmFsdWV9IFRoZSBkYXRhLlxuICAgKi9cbiAgZ2V0IGRhdGEoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RhdGFcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBzb3VyY2Ugb2YgdGhlIG1lc3NhZ2UuXG4gICAqIEByZXR1cm5zIHtTb3VyY2V9IFRoZSBzb3VyY2UuXG4gICAqL1xuICBnZXQgc291cmNlKCkge1xuICAgIHJldHVybiB0aGlzLl9zb3VyY2VcbiAgfVxufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBzb3VyY2Ugb2JqZWN0LlxuICogRGVzY3JpYmVkIGluIGh0dHBzOi8vdzNjLmdpdGh1Yi5pby93ZWJkcml2ZXItYmlkaS8jdHlwZS1zY3JpcHQtU291cmNlLlxuICogQGNsYXNzXG4gKi9cbmNsYXNzIFNvdXJjZSB7XG4gIGNvbnN0cnVjdG9yKHNvdXJjZSkge1xuICAgIHRoaXMuX2Jyb3dzaW5nQ29udGV4dElkID0gbnVsbFxuICAgIHRoaXMuX3JlYWxtSWQgPSBzb3VyY2UucmVhbG1cblxuICAgIC8vIEJyb3dzaW5nIGNvbnRleHQgaXMgcmV0dXJuZWQgYXMgYW4gb3B0aW9uYWwgcGFyYW1ldGVyXG4gICAgaWYgKCdjb250ZXh0JyBpbiBzb3VyY2UpIHtcbiAgICAgIHRoaXMuX2Jyb3dzaW5nQ29udGV4dElkID0gc291cmNlLmNvbnRleHRcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBicm93c2luZyBjb250ZXh0IElELlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9IFRoZSBicm93c2luZyBjb250ZXh0IElELlxuICAgKi9cbiAgZ2V0IGJyb3dzaW5nQ29udGV4dElkKCkge1xuICAgIHJldHVybiB0aGlzLl9icm93c2luZ0NvbnRleHRJZFxuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgcmVhbG0gSUQuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSByZWFsbSBJRC5cbiAgICovXG4gIGdldCByZWFsbUlkKCkge1xuICAgIHJldHVybiB0aGlzLl9yZWFsbUlkXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7IE1lc3NhZ2UsIFNvdXJjZSB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/bidi/scriptTypes.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/bidi/urlPattern.js":
/*!************************************************************!*\
  !*** ./node_modules/selenium-webdriver/bidi/urlPattern.js ***!
  \************************************************************/
/***/ ((module) => {

eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * Represents a URL pattern to intercept.\n * Described in network.UrlPatternPattern https://w3c.github.io/webdriver-bidi/#type-network-UrlPattern\n */\nclass UrlPattern {\n  #map = new Map()\n\n  /**\n   * Sets the protocol for the URL pattern.\n   *\n   * @param {string} protocol - The protocol to set.\n   * @returns {UrlPattern} - Returns the updated instance of the URL pattern for chaining.\n   */\n  protocol(protocol) {\n    this.#map.set('protocol', protocol)\n    return this\n  }\n\n  /**\n   * Sets the hostname for the URL pattern.\n   *\n   * @param {string} hostname - The hostname to set.\n   * @returns {UrlPattern} - Returns the updated instance of the URL pattern for chaining.\n   */\n  hostname(hostname) {\n    this.#map.set('hostname', hostname)\n    return this\n  }\n\n  /**\n   * Sets the port for the URL pattern.\n   *\n   * @param {number} port - The port number to set.\n   * @returns {UrlPattern} - Returns the updated instance of the URL pattern for chaining.\n   * @throws {Error} - Throws an error if the port is not a number.\n   */\n  port(port) {\n    if (typeof port === 'number') {\n      this.#map.set('port', port.toString())\n    } else {\n      throw new Error(`Port must be a number. Received:'${port}'`)\n    }\n    return this\n  }\n\n  /**\n   * Sets the pathname for the URL pattern.\n   *\n   * @param {string} pathname - The pathname to set.\n   * @returns {UrlPattern} - Returns the updated instance of the URL pattern for chaining.\n   */\n  pathname(pathname) {\n    this.#map.set('pathname', pathname)\n    return this\n  }\n\n  /**\n   * Sets the search parameter in the URL pattern.\n   *\n   * @param {string} search - The search parameter to be set.\n   * @returns {UrlPattern} - Returns the updated instance of the URL pattern for chaining.\n   */\n  search(search) {\n    this.#map.set('search', search)\n    return this\n  }\n\n  asMap() {\n    this.#map.set('type', 'pattern')\n    return this.#map\n  }\n}\n\nmodule.exports = { UrlPattern }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc2VsZW5pdW0td2ViZHJpdmVyL2JpZGkvdXJsUGF0dGVybi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsZUFBZSxZQUFZO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGVBQWUsWUFBWTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixlQUFlLFlBQVk7QUFDM0IsY0FBYyxPQUFPO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLDBEQUEwRCxLQUFLO0FBQy9EO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsZUFBZSxZQUFZO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGVBQWUsWUFBWTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsbUJBQW1CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ29vZ2xlLXNoZWV0cy1zZWxlbml1bS1hdXRvbWF0aW9uLy4vbm9kZV9tb2R1bGVzL3NlbGVuaXVtLXdlYmRyaXZlci9iaWRpL3VybFBhdHRlcm4uanM/YTFhYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgU29mdHdhcmUgRnJlZWRvbSBDb25zZXJ2YW5jeSAoU0ZDKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIFNGQyBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBVUkwgcGF0dGVybiB0byBpbnRlcmNlcHQuXG4gKiBEZXNjcmliZWQgaW4gbmV0d29yay5VcmxQYXR0ZXJuUGF0dGVybiBodHRwczovL3czYy5naXRodWIuaW8vd2ViZHJpdmVyLWJpZGkvI3R5cGUtbmV0d29yay1VcmxQYXR0ZXJuXG4gKi9cbmNsYXNzIFVybFBhdHRlcm4ge1xuICAjbWFwID0gbmV3IE1hcCgpXG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHByb3RvY29sIGZvciB0aGUgVVJMIHBhdHRlcm4uXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwcm90b2NvbCAtIFRoZSBwcm90b2NvbCB0byBzZXQuXG4gICAqIEByZXR1cm5zIHtVcmxQYXR0ZXJufSAtIFJldHVybnMgdGhlIHVwZGF0ZWQgaW5zdGFuY2Ugb2YgdGhlIFVSTCBwYXR0ZXJuIGZvciBjaGFpbmluZy5cbiAgICovXG4gIHByb3RvY29sKHByb3RvY29sKSB7XG4gICAgdGhpcy4jbWFwLnNldCgncHJvdG9jb2wnLCBwcm90b2NvbClcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGhvc3RuYW1lIGZvciB0aGUgVVJMIHBhdHRlcm4uXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBob3N0bmFtZSAtIFRoZSBob3N0bmFtZSB0byBzZXQuXG4gICAqIEByZXR1cm5zIHtVcmxQYXR0ZXJufSAtIFJldHVybnMgdGhlIHVwZGF0ZWQgaW5zdGFuY2Ugb2YgdGhlIFVSTCBwYXR0ZXJuIGZvciBjaGFpbmluZy5cbiAgICovXG4gIGhvc3RuYW1lKGhvc3RuYW1lKSB7XG4gICAgdGhpcy4jbWFwLnNldCgnaG9zdG5hbWUnLCBob3N0bmFtZSlcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHBvcnQgZm9yIHRoZSBVUkwgcGF0dGVybi5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHBvcnQgLSBUaGUgcG9ydCBudW1iZXIgdG8gc2V0LlxuICAgKiBAcmV0dXJucyB7VXJsUGF0dGVybn0gLSBSZXR1cm5zIHRoZSB1cGRhdGVkIGluc3RhbmNlIG9mIHRoZSBVUkwgcGF0dGVybiBmb3IgY2hhaW5pbmcuXG4gICAqIEB0aHJvd3Mge0Vycm9yfSAtIFRocm93cyBhbiBlcnJvciBpZiB0aGUgcG9ydCBpcyBub3QgYSBudW1iZXIuXG4gICAqL1xuICBwb3J0KHBvcnQpIHtcbiAgICBpZiAodHlwZW9mIHBvcnQgPT09ICdudW1iZXInKSB7XG4gICAgICB0aGlzLiNtYXAuc2V0KCdwb3J0JywgcG9ydC50b1N0cmluZygpKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFBvcnQgbXVzdCBiZSBhIG51bWJlci4gUmVjZWl2ZWQ6JyR7cG9ydH0nYClcbiAgICB9XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBwYXRobmFtZSBmb3IgdGhlIFVSTCBwYXR0ZXJuLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aG5hbWUgLSBUaGUgcGF0aG5hbWUgdG8gc2V0LlxuICAgKiBAcmV0dXJucyB7VXJsUGF0dGVybn0gLSBSZXR1cm5zIHRoZSB1cGRhdGVkIGluc3RhbmNlIG9mIHRoZSBVUkwgcGF0dGVybiBmb3IgY2hhaW5pbmcuXG4gICAqL1xuICBwYXRobmFtZShwYXRobmFtZSkge1xuICAgIHRoaXMuI21hcC5zZXQoJ3BhdGhuYW1lJywgcGF0aG5hbWUpXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBzZWFyY2ggcGFyYW1ldGVyIGluIHRoZSBVUkwgcGF0dGVybi5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNlYXJjaCAtIFRoZSBzZWFyY2ggcGFyYW1ldGVyIHRvIGJlIHNldC5cbiAgICogQHJldHVybnMge1VybFBhdHRlcm59IC0gUmV0dXJucyB0aGUgdXBkYXRlZCBpbnN0YW5jZSBvZiB0aGUgVVJMIHBhdHRlcm4gZm9yIGNoYWluaW5nLlxuICAgKi9cbiAgc2VhcmNoKHNlYXJjaCkge1xuICAgIHRoaXMuI21hcC5zZXQoJ3NlYXJjaCcsIHNlYXJjaClcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgYXNNYXAoKSB7XG4gICAgdGhpcy4jbWFwLnNldCgndHlwZScsICdwYXR0ZXJuJylcbiAgICByZXR1cm4gdGhpcy4jbWFwXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7IFVybFBhdHRlcm4gfVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/bidi/urlPattern.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/chrome.js":
/*!***************************************************!*\
  !*** ./node_modules/selenium-webdriver/chrome.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Defines a {@linkplain Driver WebDriver} client for the Chrome\n * web browser. Before using this module, you must download the latest\n * [ChromeDriver release] and ensure it can be found on your system [PATH].\n *\n * There are three primary classes exported by this module:\n *\n * 1. {@linkplain ServiceBuilder}: configures the\n *     {@link selenium-webdriver/remote.DriverService remote.DriverService}\n *     that manages the [ChromeDriver] child process.\n *\n * 2. {@linkplain Options}: defines configuration options for each new Chrome\n *     session, such as which {@linkplain Options#setProxy proxy} to use,\n *     what {@linkplain Options#addExtensions extensions} to install, or\n *     what {@linkplain Options#addArguments command-line switches} to use when\n *     starting the browser.\n *\n * 3. {@linkplain Driver}: the WebDriver client; each new instance will control\n *     a unique browser session with a clean user profile (unless otherwise\n *     configured through the {@link Options} class).\n *\n *     let chrome = require('selenium-webdriver/chrome');\n *     let {Builder} = require('selenium-webdriver');\n *\n *     let driver = new Builder()\n *         .forBrowser('chrome')\n *         .setChromeOptions(new chrome.Options())\n *         .build();\n *\n * __Customizing the ChromeDriver Server__ <a id=\"custom-server\"></a>\n *\n * By default, every Chrome session will use a single driver service, which is\n * started the first time a {@link Driver} instance is created and terminated\n * when this process exits. The default service will inherit its environment\n * from the current process and direct all output to /dev/null. You may obtain\n * a handle to this default service using\n * {@link #getDefaultService getDefaultService()} and change its configuration\n * with {@link #setDefaultService setDefaultService()}.\n *\n * You may also create a {@link Driver} with its own driver service. This is\n * useful if you need to capture the server's log output for a specific session:\n *\n *     let chrome = require('selenium-webdriver/chrome');\n *\n *     let service = new chrome.ServiceBuilder()\n *         .loggingTo('/my/log/file.txt')\n *         .enableVerboseLogging()\n *         .build();\n *\n *     let options = new chrome.Options();\n *     // configure browser options ...\n *\n *     let driver = chrome.Driver.createSession(options, service);\n *\n * Users should only instantiate the {@link Driver} class directly when they\n * need a custom driver service configuration (as shown above). For normal\n * operation, users should start Chrome using the\n * {@link selenium-webdriver.Builder}.\n *\n * __Working with Android__ <a id=\"android\"></a>\n *\n * The [ChromeDriver][android] supports running tests on the Chrome browser as\n * well as [WebView apps][webview] starting in Android 4.4 (KitKat). In order to\n * work with Android, you must first start the adb\n *\n *     adb start-server\n *\n * By default, adb will start on port 5037. You may change this port, but this\n * will require configuring a [custom server](#custom-server) that will connect\n * to adb on the {@linkplain ServiceBuilder#setAdbPort correct port}:\n *\n *     let service = new chrome.ServiceBuilder()\n *         .setAdbPort(1234)\n *         build();\n *     // etc.\n *\n * The ChromeDriver may be configured to launch Chrome on Android using\n * {@link Options#androidChrome()}:\n *\n *     let driver = new Builder()\n *         .forBrowser('chrome')\n *         .setChromeOptions(new chrome.Options().androidChrome())\n *         .build();\n *\n * Alternatively, you can configure the ChromeDriver to launch an app with a\n * Chrome-WebView by setting the {@linkplain Options#androidActivity\n * androidActivity} option:\n *\n *     let driver = new Builder()\n *         .forBrowser('chrome')\n *         .setChromeOptions(new chrome.Options()\n *             .androidPackage('com.example')\n *             .androidActivity('com.example.Activity'))\n *         .build();\n *\n * [Refer to the ChromeDriver site] for more information on using the\n * [ChromeDriver with Android][android].\n *\n * [ChromeDriver]: https://chromedriver.chromium.org/\n * [ChromeDriver release]: http://chromedriver.storage.googleapis.com/index.html\n * [PATH]: http://en.wikipedia.org/wiki/PATH_%28variable%29\n * [android]: https://chromedriver.chromium.org/getting-started/getting-started---android\n * [webview]: https://developer.chrome.com/multidevice/webview/overview\n *\n * @module selenium-webdriver/chrome\n */\n\n\n\nconst { Browser } = __webpack_require__(/*! ./lib/capabilities */ \"(rsc)/./node_modules/selenium-webdriver/lib/capabilities.js\")\nconst chromium = __webpack_require__(/*! ./chromium */ \"(rsc)/./node_modules/selenium-webdriver/chromium.js\")\nconst CHROME_CAPABILITY_KEY = 'goog:chromeOptions'\n\n/** @type {remote.DriverService} */\n\n/**\n * Creates {@link selenium-webdriver/remote.DriverService} instances that manage\n * a [ChromeDriver](https://chromedriver.chromium.org/)\n * server in a child process.\n */\nclass ServiceBuilder extends chromium.ServiceBuilder {\n  /**\n   * @param {string=} opt_exe Path to the server executable to use. If omitted,\n   *     the builder will attempt to locate the chromedriver on the current\n   *     PATH. If the chromedriver is not available in path, selenium-manager will\n   *     download the chromedriver\n   * @throws {Error} If provided executable does not exist, or the chromedriver\n   *     cannot be found on the PATH.\n   */\n  constructor(opt_exe) {\n    super(opt_exe)\n  }\n}\n\n/**\n * Class for managing ChromeDriver specific options.\n */\nclass Options extends chromium.Options {\n  /**\n   * Sets the path to the Chrome binary to use. On Mac OS X, this path should\n   * reference the actual Chrome executable, not just the application binary\n   * (e.g. \"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\").\n   *\n   * The binary path be absolute or relative to the chromedriver server\n   * executable, but it must exist on the machine that will launch Chrome.\n   *\n   * @param {string} path The path to the Chrome binary to use.\n   * @return {!Options} A self reference.\n   */\n  setChromeBinaryPath(path) {\n    return this.setBinaryPath(path)\n  }\n\n  /**\n   * Configures the ChromeDriver to launch Chrome on Android via adb. This\n   * function is shorthand for\n   * {@link #androidPackage options.androidPackage('com.android.chrome')}.\n   * @return {!Options} A self reference.\n   */\n  androidChrome() {\n    return this.androidPackage('com.android.chrome')\n  }\n\n  /**\n   * Sets the path to Chrome's log file. This path should exist on the machine\n   * that will launch Chrome.\n   * @param {string} path Path to the log file to use.\n   * @return {!Options} A self reference.\n   */\n  setChromeLogFile(path) {\n    return this.setBrowserLogFile(path)\n  }\n\n  /**\n   * Sets the directory to store Chrome minidumps in. This option is only\n   * supported when ChromeDriver is running on Linux.\n   * @param {string} path The directory path.\n   * @return {!Options} A self reference.\n   */\n  setChromeMinidumpPath(path) {\n    return this.setBrowserMinidumpPath(path)\n  }\n}\n\n/**\n * Creates a new WebDriver client for Chrome.\n */\nclass Driver extends chromium.Driver {\n  /**\n   * Creates a new session with the ChromeDriver.\n   *\n   * @param {(Capabilities|Options)=} opt_config The configuration options.\n   * @param {(remote.DriverService|http.Executor)=} opt_serviceExecutor Either\n   *     a  DriverService to use for the remote end, or a preconfigured executor\n   *     for an externally managed endpoint. If neither is provided, the\n   *     {@linkplain ##getDefaultService default service} will be used by\n   *     default.\n   * @return {!Driver} A new driver instance.\n   */\n  static createSession(opt_config, opt_serviceExecutor) {\n    let caps = opt_config || new Options()\n    return /** @type {!Driver} */ (super.createSession(caps, opt_serviceExecutor, 'goog', CHROME_CAPABILITY_KEY))\n  }\n\n  /**\n   * returns new instance chrome driver service\n   * @returns {remote.DriverService}\n   */\n  static getDefaultService() {\n    return new ServiceBuilder().build()\n  }\n}\n\nOptions.prototype.CAPABILITY_KEY = CHROME_CAPABILITY_KEY\nOptions.prototype.BROWSER_NAME_VALUE = Browser.CHROME\n\n// PUBLIC API\nmodule.exports = {\n  Driver,\n  Options,\n  ServiceBuilder,\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/chrome.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/chromium.js":
/*!*****************************************************!*\
  !*** ./node_modules/selenium-webdriver/chromium.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Defines an abstract {@linkplain Driver WebDriver} client for\n * Chromium-based web browsers. These classes should not be instantiated\n * directly.\n *\n * There are three primary classes exported by this module:\n *\n * 1. {@linkplain ServiceBuilder}: configures the\n *     {@link selenium-webdriver/remote.DriverService remote.DriverService}\n *     that manages a WebDriver server child process.\n *\n * 2. {@linkplain Options}: defines configuration options for each new Chromium\n *     session, such as which {@linkplain Options#setProxy proxy} to use,\n *     what {@linkplain Options#addExtensions extensions} to install, or\n *     what {@linkplain Options#addArguments command-line switches} to use when\n *     starting the browser.\n *\n * 3. {@linkplain Driver}: the WebDriver client; each new instance will control\n *     a unique browser session with a clean user profile (unless otherwise\n *     configured through the {@link Options} class).\n *\n *     let chrome = require('selenium-webdriver/chrome');\n *     let {Builder} = require('selenium-webdriver');\n *\n *     let driver = new Builder()\n *         .forBrowser('chrome')\n *         .setChromeOptions(new chrome.Options())\n *         .build();\n *\n * __Customizing the Chromium WebDriver Server__ <a id=\"custom-server\"></a>\n *\n * Subclasses of {@link Driver} are expected to provide a static\n * getDefaultService method. By default, this method will be called every time\n * a {@link Driver} instance is created to obtain the default driver service\n * for that specific browser (e.g. Chrome or Chromium Edge). Subclasses are\n * responsible for managing the lifetime of the default service.\n *\n * You may also create a {@link Driver} with its own driver service. This is\n * useful if you need to capture the server's log output for a specific session:\n *\n *     let chrome = require('selenium-webdriver/chrome');\n *\n *     let service = new chrome.ServiceBuilder()\n *         .loggingTo('/my/log/file.txt')\n *         .enableVerboseLogging()\n *         .build();\n *\n *     let options = new chrome.Options();\n *     // configure browser options ...\n *\n *     let driver = chrome.Driver.createSession(options, service);\n *\n *     @module selenium-webdriver/chromium\n */\n\n\n\nconst http = __webpack_require__(/*! ./http */ \"(rsc)/./node_modules/selenium-webdriver/http/index.js\")\nconst io = __webpack_require__(/*! ./io */ \"(rsc)/./node_modules/selenium-webdriver/io/index.js\")\nconst { Capabilities, Capability } = __webpack_require__(/*! ./lib/capabilities */ \"(rsc)/./node_modules/selenium-webdriver/lib/capabilities.js\")\nconst command = __webpack_require__(/*! ./lib/command */ \"(rsc)/./node_modules/selenium-webdriver/lib/command.js\")\nconst error = __webpack_require__(/*! ./lib/error */ \"(rsc)/./node_modules/selenium-webdriver/lib/error.js\")\nconst Symbols = __webpack_require__(/*! ./lib/symbols */ \"(rsc)/./node_modules/selenium-webdriver/lib/symbols.js\")\nconst webdriver = __webpack_require__(/*! ./lib/webdriver */ \"(rsc)/./node_modules/selenium-webdriver/lib/webdriver.js\")\nconst remote = __webpack_require__(/*! ./remote */ \"(rsc)/./node_modules/selenium-webdriver/remote/index.js\")\nconst { getBinaryPaths } = __webpack_require__(/*! ./common/driverFinder */ \"(rsc)/./node_modules/selenium-webdriver/common/driverFinder.js\")\n\n/**\n * Custom command names supported by Chromium WebDriver.\n * @enum {string}\n */\nconst Command = {\n  LAUNCH_APP: 'launchApp',\n  GET_NETWORK_CONDITIONS: 'getNetworkConditions',\n  SET_NETWORK_CONDITIONS: 'setNetworkConditions',\n  DELETE_NETWORK_CONDITIONS: 'deleteNetworkConditions',\n  SEND_DEVTOOLS_COMMAND: 'sendDevToolsCommand',\n  SEND_AND_GET_DEVTOOLS_COMMAND: 'sendAndGetDevToolsCommand',\n  SET_PERMISSION: 'setPermission',\n  GET_CAST_SINKS: 'getCastSinks',\n  SET_CAST_SINK_TO_USE: 'setCastSinkToUse',\n  START_CAST_DESKTOP_MIRRORING: 'startDesktopMirroring',\n  START_CAST_TAB_MIRRORING: 'setCastTabMirroring',\n  GET_CAST_ISSUE_MESSAGE: 'getCastIssueMessage',\n  STOP_CASTING: 'stopCasting',\n}\n\n/**\n * Creates a command executor with support for Chromium's custom commands.\n * @param {!Promise<string>} url The server's URL.\n * @param vendorPrefix\n * @return {!command.Executor} The new command executor.\n */\nfunction createExecutor(url, vendorPrefix) {\n  const agent = new http.Agent({ keepAlive: true })\n  const client = url.then((url) => new http.HttpClient(url, agent))\n  const executor = new http.Executor(client)\n  configureExecutor(executor, vendorPrefix)\n  return executor\n}\n\n/**\n * Configures the given executor with Chromium-specific commands.\n * @param {!http.Executor} executor the executor to configure.\n */\nfunction configureExecutor(executor, vendorPrefix) {\n  executor.defineCommand(Command.LAUNCH_APP, 'POST', '/session/:sessionId/chromium/launch_app')\n  executor.defineCommand(Command.GET_NETWORK_CONDITIONS, 'GET', '/session/:sessionId/chromium/network_conditions')\n  executor.defineCommand(Command.SET_NETWORK_CONDITIONS, 'POST', '/session/:sessionId/chromium/network_conditions')\n  executor.defineCommand(Command.DELETE_NETWORK_CONDITIONS, 'DELETE', '/session/:sessionId/chromium/network_conditions')\n  executor.defineCommand(Command.SEND_DEVTOOLS_COMMAND, 'POST', '/session/:sessionId/chromium/send_command')\n  executor.defineCommand(\n    Command.SEND_AND_GET_DEVTOOLS_COMMAND,\n    'POST',\n    '/session/:sessionId/chromium/send_command_and_get_result',\n  )\n  executor.defineCommand(Command.SET_PERMISSION, 'POST', '/session/:sessionId/permissions')\n  executor.defineCommand(Command.GET_CAST_SINKS, 'GET', `/session/:sessionId/${vendorPrefix}/cast/get_sinks`)\n  executor.defineCommand(\n    Command.SET_CAST_SINK_TO_USE,\n    'POST',\n    `/session/:sessionId/${vendorPrefix}/cast/set_sink_to_use`,\n  )\n  executor.defineCommand(\n    Command.START_CAST_DESKTOP_MIRRORING,\n    'POST',\n    `/session/:sessionId/${vendorPrefix}/cast/start_desktop_mirroring`,\n  )\n  executor.defineCommand(\n    Command.START_CAST_TAB_MIRRORING,\n    'POST',\n    `/session/:sessionId/${vendorPrefix}/cast/start_tab_mirroring`,\n  )\n  executor.defineCommand(\n    Command.GET_CAST_ISSUE_MESSAGE,\n    'GET',\n    `/session/:sessionId/${vendorPrefix}/cast/get_issue_message`,\n  )\n  executor.defineCommand(Command.STOP_CASTING, 'POST', `/session/:sessionId/${vendorPrefix}/cast/stop_casting`)\n}\n\n/**\n * Creates {@link selenium-webdriver/remote.DriverService} instances that manage\n * a WebDriver server in a child process.\n */\nclass ServiceBuilder extends remote.DriverService.Builder {\n  /**\n   * @param {string=} exe Path to the server executable to use. Subclasses\n   * should ensure a valid path to the appropriate exe is provided.\n   */\n  constructor(exe) {\n    super(exe)\n    this.setLoopback(true) // Required\n  }\n\n  /**\n   * Sets which port adb is listening to. _The driver will connect to adb\n   * if an {@linkplain Options#androidPackage Android session} is requested, but\n   * adb **must** be started beforehand._\n   *\n   * @param {number} port Which port adb is running on.\n   * @return {!ServiceBuilder} A self reference.\n   */\n  setAdbPort(port) {\n    return this.addArguments('--adb-port=' + port)\n  }\n\n  /**\n   * Sets the path of the log file the driver should log to. If a log file is\n   * not specified, the driver will log to stderr.\n   * @param {string} path Path of the log file to use.\n   * @return {!ServiceBuilder} A self reference.\n   */\n  loggingTo(path) {\n    return this.addArguments('--log-path=' + path)\n  }\n\n  /**\n   * Enables Chrome logging.\n   * @returns {!ServiceBuilder} A self reference.\n   */\n  enableChromeLogging() {\n    return this.addArguments('--enable-chrome-logs')\n  }\n\n  /**\n   * Enables verbose logging.\n   * @return {!ServiceBuilder} A self reference.\n   */\n  enableVerboseLogging() {\n    return this.addArguments('--verbose')\n  }\n\n  /**\n   * Sets the number of threads the driver should use to manage HTTP requests.\n   * By default, the driver will use 4 threads.\n   * @param {number} n The number of threads to use.\n   * @return {!ServiceBuilder} A self reference.\n   */\n  setNumHttpThreads(n) {\n    return this.addArguments('--http-threads=' + n)\n  }\n\n  /**\n   * @override\n   */\n  setPath(path) {\n    super.setPath(path)\n    return this.addArguments('--url-base=' + path)\n  }\n}\n\n/**\n * Class for managing WebDriver options specific to a Chromium-based browser.\n */\nclass Options extends Capabilities {\n  /**\n   * @param {(Capabilities|Map<string, ?>|Object)=} other Another set of\n   *     capabilities to initialize this instance from.\n   */\n  constructor(other = undefined) {\n    super(other)\n\n    /** @private {!Object} */\n    this.options_ = this.get(this.CAPABILITY_KEY) || {}\n\n    this.setBrowserName(this.BROWSER_NAME_VALUE)\n    this.set(this.CAPABILITY_KEY, this.options_)\n  }\n\n  /**\n   * Add additional command line arguments to use when launching the browser.\n   * Each argument may be specified with or without the \"--\" prefix\n   * (e.g. \"--foo\" and \"foo\"). Arguments with an associated value should be\n   * delimited by an \"=\": \"foo=bar\".\n   *\n   * @param {...(string|!Array<string>)} args The arguments to add.\n   * @return {!Options} A self reference.\n   */\n  addArguments(...args) {\n    let newArgs = (this.options_.args || []).concat(...args)\n    if (newArgs.length) {\n      this.options_.args = newArgs\n    }\n    return this\n  }\n\n  /**\n   * Sets the address of a Chromium remote debugging server to connect to.\n   * Address should be of the form \"{hostname|IP address}:port\"\n   * (e.g. \"localhost:9222\").\n   *\n   * @param {string} address The address to connect to.\n   * @return {!Options} A self reference.\n   */\n  debuggerAddress(address) {\n    this.options_.debuggerAddress = address\n    return this\n  }\n\n  /**\n   * Sets the initial window size.\n   *\n   * @param {{width: number, height: number}} size The desired window size.\n   * @return {!Options} A self reference.\n   * @throws {TypeError} if width or height is unspecified, not a number, or\n   *     less than or equal to 0.\n   */\n  windowSize({ width, height }) {\n    function checkArg(arg) {\n      if (typeof arg !== 'number' || arg <= 0) {\n        throw TypeError('Arguments must be {width, height} with numbers > 0')\n      }\n    }\n\n    checkArg(width)\n    checkArg(height)\n    return this.addArguments(`window-size=${width},${height}`)\n  }\n\n  /**\n   * List of Chrome command line switches to exclude that ChromeDriver by default\n   * passes when starting Chrome.  Do not prefix switches with \"--\".\n   *\n   * @param {...(string|!Array<string>)} args The switches to exclude.\n   * @return {!Options} A self reference.\n   */\n  excludeSwitches(...args) {\n    let switches = (this.options_.excludeSwitches || []).concat(...args)\n    if (switches.length) {\n      this.options_.excludeSwitches = switches\n    }\n    return this\n  }\n\n  /**\n   * Add additional extensions to install when launching the browser. Each extension\n   * should be specified as the path to the packed CRX file, or a Buffer for an\n   * extension.\n   * @param {...(string|!Buffer|!Array<(string|!Buffer)>)} args The\n   *     extensions to add.\n   * @return {!Options} A self reference.\n   */\n  addExtensions(...args) {\n    let extensions = this.options_.extensions || new Extensions()\n    extensions.add(...args)\n    if (extensions.length) {\n      this.options_.extensions = extensions\n    }\n    return this\n  }\n\n  /**\n   * Sets the path to the browser binary to use. On Mac OS X, this path should\n   * reference the actual Chromium executable, not just the application binary\n   * (e.g. \"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\").\n   *\n   * The binary path can be absolute or relative to the WebDriver server\n   * executable, but it must exist on the machine that will launch the browser.\n   *\n   * @param {string} path The path to the browser binary to use.\n   * @return {!Options} A self reference.\n   */\n  setBinaryPath(path) {\n    this.options_.binary = path\n    return this\n  }\n\n  /**\n   * Sets whether to leave the started browser process running if the controlling\n   * driver service is killed before {@link webdriver.WebDriver#quit()} is\n   * called.\n   * @param {boolean} detach Whether to leave the browser running if the\n   *     driver service is killed before the session.\n   * @return {!Options} A self reference.\n   */\n  detachDriver(detach) {\n    this.options_.detach = detach\n    return this\n  }\n\n  /**\n   * Sets the user preferences for Chrome's user profile. See the \"Preferences\"\n   * file in Chrome's user data directory for examples.\n   * @param {!Object} prefs Dictionary of user preferences to use.\n   * @return {!Options} A self reference.\n   */\n  setUserPreferences(prefs) {\n    this.options_.prefs = prefs\n    return this\n  }\n\n  /**\n   * Sets the performance logging preferences. Options include:\n   *\n   * - `enableNetwork`: Whether or not to collect events from Network domain.\n   * - `enablePage`: Whether or not to collect events from Page domain.\n   * - `enableTimeline`: Whether or not to collect events from Timeline domain.\n   *     Note: when tracing is enabled, Timeline domain is implicitly disabled,\n   *     unless `enableTimeline` is explicitly set to true.\n   * - `traceCategories`: A comma-separated string of Chromium tracing\n   *     categories for which trace events should be collected. An unspecified\n   *     or empty string disables tracing.\n   * - `bufferUsageReportingInterval`: The requested number of milliseconds\n   *     between DevTools trace buffer usage events. For example, if 1000, then\n   *     once per second, DevTools will report how full the trace buffer is. If\n   *     a report indicates the buffer usage is 100%, a warning will be issued.\n   *\n   * @param {{enableNetwork: boolean,\n   *          enablePage: boolean,\n   *          enableTimeline: boolean,\n   *          traceCategories: string,\n   *          bufferUsageReportingInterval: number}} prefs The performance\n   *     logging preferences.\n   * @return {!Options} A self reference.\n   */\n  setPerfLoggingPrefs(prefs) {\n    this.options_.perfLoggingPrefs = prefs\n    return this\n  }\n\n  /**\n   * Sets preferences for the \"Local State\" file in Chrome's user data\n   * directory.\n   * @param {!Object} state Dictionary of local state preferences.\n   * @return {!Options} A self reference.\n   */\n  setLocalState(state) {\n    this.options_.localState = state\n    return this\n  }\n\n  /**\n   * Sets the name of the activity hosting a Chrome-based Android WebView. This\n   * option must be set to connect to an [Android WebView](\n   * https://chromedriver.chromium.org/getting-started/getting-started---android)\n   *\n   * @param {string} name The activity name.\n   * @return {!Options} A self reference.\n   */\n  androidActivity(name) {\n    this.options_.androidActivity = name\n    return this\n  }\n\n  /**\n   * Sets the device serial number to connect to via ADB. If not specified, the\n   * WebDriver server will select an unused device at random. An error will be\n   * returned if all devices already have active sessions.\n   *\n   * @param {string} serial The device serial number to connect to.\n   * @return {!Options} A self reference.\n   */\n  androidDeviceSerial(serial) {\n    this.options_.androidDeviceSerial = serial\n    return this\n  }\n\n  /**\n   * Sets the package name of the Chrome or WebView app.\n   *\n   * @param {?string} pkg The package to connect to, or `null` to disable Android\n   *     and switch back to using desktop browser.\n   * @return {!Options} A self reference.\n   */\n  androidPackage(pkg) {\n    this.options_.androidPackage = pkg\n    return this\n  }\n\n  /**\n   * Sets the process name of the Activity hosting the WebView (as given by\n   * `ps`). If not specified, the process name is assumed to be the same as\n   * {@link #androidPackage}.\n   *\n   * @param {string} processName The main activity name.\n   * @return {!Options} A self reference.\n   */\n  androidProcess(processName) {\n    this.options_.androidProcess = processName\n    return this\n  }\n\n  /**\n   * Sets whether to connect to an already-running instead of the specified\n   * {@linkplain #androidProcess app} instead of launching the app with a clean\n   * data directory.\n   *\n   * @param {boolean} useRunning Whether to connect to a running instance.\n   * @return {!Options} A self reference.\n   */\n  androidUseRunningApp(useRunning) {\n    this.options_.androidUseRunningApp = useRunning\n    return this\n  }\n\n  /**\n   * Sets the path to the browser's log file. This path should exist on the machine\n   * that will launch the browser.\n   * @param {string} path Path to the log file to use.\n   * @return {!Options} A self reference.\n   */\n  setBrowserLogFile(path) {\n    this.options_.logPath = path\n    return this\n  }\n\n  /**\n   * Sets the directory to store browser minidumps in. This option is only\n   * supported when the driver is running on Linux.\n   * @param {string} path The directory path.\n   * @return {!Options} A self reference.\n   */\n  setBrowserMinidumpPath(path) {\n    this.options_.minidumpPath = path\n    return this\n  }\n\n  /**\n   * Configures the browser to emulate a mobile device. For more information, refer\n   * to the ChromeDriver project page on [mobile emulation][em]. Configuration\n   * options include:\n   *\n   * - `deviceName`: The name of a pre-configured [emulated device][devem]\n   * - `width`: screen width, in pixels\n   * - `height`: screen height, in pixels\n   * - `pixelRatio`: screen pixel ratio\n   *\n   * __Example 1: Using a Pre-configured Device__\n   *\n   *     let options = new chrome.Options().setMobileEmulation(\n   *         {deviceName: 'Google Nexus 5'});\n   *\n   *     let driver = chrome.Driver.createSession(options);\n   *\n   * __Example 2: Using Custom Screen Configuration__\n   *\n   *     let options = new chrome.Options().setMobileEmulation({deviceMetrics: {\n   *         width: 360,\n   *         height: 640,\n   *         pixelRatio: 3.0\n   *     }});\n   *\n   *     let driver = chrome.Driver.createSession(options);\n   *\n   *\n   * [em]: https://chromedriver.chromium.org/mobile-emulation\n   * [devem]: https://developer.chrome.com/devtools/docs/device-mode\n   *\n   * @param {?({deviceName: string}|\n   *           {width: number, height: number, pixelRatio: number})} config The\n   *     mobile emulation configuration, or `null` to disable emulation.\n   * @return {!Options} A self reference.\n   */\n  setMobileEmulation(config) {\n    this.options_.mobileEmulation = config\n    return this\n  }\n\n  /**\n   * Sets a list of the window types that will appear when getting window\n   * handles. For access to <webview> elements, include \"webview\" in the list.\n   * @param {...(string|!Array<string>)} args The window types that will appear\n   * when getting window handles.\n   * @return {!Options} A self reference.\n   */\n  windowTypes(...args) {\n    let windowTypes = (this.options_.windowTypes || []).concat(...args)\n    if (windowTypes.length) {\n      this.options_.windowTypes = windowTypes\n    }\n    return this\n  }\n\n  /**\n   * Enable bidi connection\n   * @returns {!Capabilities}\n   */\n  enableBidi() {\n    return this.set('webSocketUrl', true)\n  }\n}\n\n/**\n * A list of extensions to install when launching the browser.\n */\nclass Extensions {\n  constructor() {\n    this.extensions = []\n  }\n\n  /**\n   * @return {number} The length of the extensions list.\n   */\n  get length() {\n    return this.extensions.length\n  }\n\n  /**\n   * Add additional extensions to install when launching the browser. Each\n   * extension should be specified as the path to the packed CRX file, or a\n   * Buffer for an extension.\n   *\n   * @param {...(string|!Buffer|!Array<(string|!Buffer)>)} args The\n   *     extensions to add.\n   */\n  add(...args) {\n    this.extensions = this.extensions.concat(...args)\n  }\n\n  /**\n   * @return {!Object} A serialized representation of this Extensions object.\n   */\n  [Symbols.serialize]() {\n    return this.extensions.map(function (extension) {\n      if (Buffer.isBuffer(extension)) {\n        return extension.toString('base64')\n      }\n      return io.read(/** @type {string} */ (extension)).then((buffer) => buffer.toString('base64'))\n    })\n  }\n}\n\n/**\n * Creates a new WebDriver client for Chromium-based browsers.\n */\nclass Driver extends webdriver.WebDriver {\n  /**\n   * Creates a new session with the WebDriver server.\n   *\n   * @param {(Capabilities|Options)=} caps The configuration options.\n   * @param {(remote.DriverService|http.Executor)=} opt_serviceExecutor Either\n   *     a  DriverService to use for the remote end, or a preconfigured executor\n   *     for an externally managed endpoint. If neither is provided, the\n   *     {@linkplain ##getDefaultService default service} will be used by\n   *     default.\n   * @param vendorPrefix Either 'goog' or 'ms'\n   * @param vendorCapabilityKey Either 'goog:chromeOptions' or 'ms:edgeOptions'\n   * @return {!Driver} A new driver instance.\n   */\n  static createSession(caps, opt_serviceExecutor, vendorPrefix = '', vendorCapabilityKey = '') {\n    let executor\n    let onQuit\n    if (opt_serviceExecutor instanceof http.Executor) {\n      executor = opt_serviceExecutor\n      configureExecutor(executor, vendorPrefix)\n    } else {\n      let service = opt_serviceExecutor || this.getDefaultService()\n      if (!service.getExecutable()) {\n        const { driverPath, browserPath } = getBinaryPaths(caps)\n        service.setExecutable(driverPath)\n        if (browserPath) {\n          const vendorOptions = caps.get(vendorCapabilityKey)\n          if (vendorOptions) {\n            vendorOptions['binary'] = browserPath\n            caps.set(vendorCapabilityKey, vendorOptions)\n          } else {\n            caps.set(vendorCapabilityKey, { binary: browserPath })\n          }\n          caps.delete(Capability.BROWSER_VERSION)\n        }\n      }\n      onQuit = () => service.kill()\n      executor = createExecutor(service.start(), vendorPrefix)\n    }\n\n    // W3C spec requires noProxy value to be an array of strings, but Chromium\n    // expects a single host as a string.\n    let proxy = caps.get(Capability.PROXY)\n    if (proxy && Array.isArray(proxy.noProxy)) {\n      proxy.noProxy = proxy.noProxy[0]\n      if (!proxy.noProxy) {\n        proxy.noProxy = undefined\n      }\n    }\n\n    return /** @type {!Driver} */ (super.createSession(executor, caps, onQuit))\n  }\n\n  /**\n   * This function is a no-op as file detectors are not supported by this\n   * implementation.\n   * @override\n   */\n  setFileDetector() {}\n\n  /**\n   * Schedules a command to launch Chrome App with given ID.\n   * @param {string} id ID of the App to launch.\n   * @return {!Promise<void>} A promise that will be resolved\n   *     when app is launched.\n   */\n  launchApp(id) {\n    return this.execute(new command.Command(Command.LAUNCH_APP).setParameter('id', id))\n  }\n\n  /**\n   * Schedules a command to get Chromium network emulation settings.\n   * @return {!Promise} A promise that will be resolved when network\n   *     emulation settings are retrieved.\n   */\n  getNetworkConditions() {\n    return this.execute(new command.Command(Command.GET_NETWORK_CONDITIONS))\n  }\n\n  /**\n   * Schedules a command to delete Chromium network emulation settings.\n   * @return {!Promise} A promise that will be resolved when network\n   *     emulation settings have been deleted.\n   */\n  deleteNetworkConditions() {\n    return this.execute(new command.Command(Command.DELETE_NETWORK_CONDITIONS))\n  }\n\n  /**\n   * Schedules a command to set Chromium network emulation settings.\n   *\n   * __Sample Usage:__\n   *\n   *  driver.setNetworkConditions({\n   *    offline: false,\n   *    latency: 5, // Additional latency (ms).\n   *    download_throughput: 500 * 1024, // Maximal aggregated download throughput.\n   *    upload_throughput: 500 * 1024 // Maximal aggregated upload throughput.\n   * });\n   *\n   * @param {Object} spec Defines the network conditions to set\n   * @return {!Promise<void>} A promise that will be resolved when network\n   *     emulation settings are set.\n   */\n  setNetworkConditions(spec) {\n    if (!spec || typeof spec !== 'object') {\n      throw TypeError('setNetworkConditions called with non-network-conditions parameter')\n    }\n    return this.execute(new command.Command(Command.SET_NETWORK_CONDITIONS).setParameter('network_conditions', spec))\n  }\n\n  /**\n   * Sends an arbitrary devtools command to the browser.\n   *\n   * @param {string} cmd The name of the command to send.\n   * @param {Object=} params The command parameters.\n   * @return {!Promise<void>} A promise that will be resolved when the command\n   *     has finished.\n   * @see <https://chromedevtools.github.io/devtools-protocol/>\n   */\n  sendDevToolsCommand(cmd, params = {}) {\n    return this.execute(\n      new command.Command(Command.SEND_DEVTOOLS_COMMAND).setParameter('cmd', cmd).setParameter('params', params),\n    )\n  }\n\n  /**\n   * Sends an arbitrary devtools command to the browser and get the result.\n   *\n   * @param {string} cmd The name of the command to send.\n   * @param {Object=} params The command parameters.\n   * @return {!Promise<string>} A promise that will be resolved when the command\n   *     has finished.\n   * @see <https://chromedevtools.github.io/devtools-protocol/>\n   */\n  sendAndGetDevToolsCommand(cmd, params = {}) {\n    return this.execute(\n      new command.Command(Command.SEND_AND_GET_DEVTOOLS_COMMAND)\n        .setParameter('cmd', cmd)\n        .setParameter('params', params),\n    )\n  }\n\n  /**\n   * Set a permission state to the given value.\n   *\n   * @param {string} name A name of the permission to update.\n   * @param {(\"granted\"|\"denied\"|\"prompt\")} state State to set permission to.\n   * @returns {!Promise<Object>} A promise that will be resolved when the\n   *     command has finished.\n   * @see <https://w3c.github.io/permissions/#permission-registry> for valid\n   *     names\n   */\n  setPermission(name, state) {\n    return this.execute(\n      new command.Command(Command.SET_PERMISSION).setParameter('descriptor', { name }).setParameter('state', state),\n    )\n  }\n\n  /**\n   * Sends a DevTools command to change the browser's download directory.\n   *\n   * @param {string} path The desired download directory.\n   * @return {!Promise<void>} A promise that will be resolved when the command\n   *     has finished.\n   * @see #sendDevToolsCommand\n   */\n  async setDownloadPath(path) {\n    if (!path || typeof path !== 'string') {\n      throw new error.InvalidArgumentError('invalid download path')\n    }\n    const stat = await io.stat(path)\n    if (!stat.isDirectory()) {\n      throw new error.InvalidArgumentError('not a directory: ' + path)\n    }\n    return this.sendDevToolsCommand('Page.setDownloadBehavior', {\n      behavior: 'allow',\n      downloadPath: path,\n    })\n  }\n\n  /**\n   * Returns the list of cast sinks (Cast devices) available to the Chrome media router.\n   *\n   * @return {!promise.Thenable<void>} A promise that will be resolved with an array of Strings\n   *   containing the friendly device names of available cast sink targets.\n   */\n  getCastSinks() {\n    return this.execute(new command.Command(Command.GET_CAST_SINKS))\n  }\n\n  /**\n   * Selects a cast sink (Cast device) as the recipient of media router intents (connect or play).\n   *\n   * @param {String} deviceName name of the target device.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the target device has been selected to respond further webdriver commands.\n   */\n  setCastSinkToUse(deviceName) {\n    return this.execute(new command.Command(Command.SET_CAST_SINK_TO_USE).setParameter('sinkName', deviceName))\n  }\n\n  /**\n   * Initiates desktop mirroring for the current browser tab on the specified device.\n   *\n   * @param {String} deviceName name of the target device.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the mirror command has been issued to the device.\n   */\n  startDesktopMirroring(deviceName) {\n    return this.execute(new command.Command(Command.START_CAST_DESKTOP_MIRRORING).setParameter('sinkName', deviceName))\n  }\n\n  /**\n   * Initiates tab mirroring for the current browser tab on the specified device.\n   *\n   * @param {String} deviceName name of the target device.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the mirror command has been issued to the device.\n   */\n  startCastTabMirroring(deviceName) {\n    return this.execute(new command.Command(Command.START_CAST_TAB_MIRRORING).setParameter('sinkName', deviceName))\n  }\n\n  /**\n   * Returns an error message when there is any issue in a Cast session.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the mirror command has been issued to the device.\n   */\n  getCastIssueMessage() {\n    return this.execute(new command.Command(Command.GET_CAST_ISSUE_MESSAGE))\n  }\n\n  /**\n   * Stops casting from media router to the specified device, if connected.\n   *\n   * @param {String} deviceName name of the target device.\n   * @return {!promise.Thenable<void>} A promise that will be resolved\n   *     when the stop command has been issued to the device.\n   */\n  stopCasting(deviceName) {\n    return this.execute(new command.Command(Command.STOP_CASTING).setParameter('sinkName', deviceName))\n  }\n}\n\n// PUBLIC API\n\nmodule.exports = {\n  Driver,\n  Options,\n  ServiceBuilder,\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/chromium.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/common/driverFinder.js":
/*!****************************************************************!*\
  !*** ./node_modules/selenium-webdriver/common/driverFinder.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n *  This implementation is still in beta, and may change.\n *\n *  Utility to find if a given file is present and executable.\n */\n\nconst path = __webpack_require__(/*! node:path */ \"node:path\")\nconst { binaryPaths } = __webpack_require__(/*! ./seleniumManager */ \"(rsc)/./node_modules/selenium-webdriver/common/seleniumManager.js\")\n\n/**\n * Determines the path of the correct Selenium Manager binary\n * @param {Capabilities} capabilities browser options to fetch the driver\n * @returns {{browserPath: string, driverPath: string}} path of the driver\n * and browser location\n */\nfunction getBinaryPaths(capabilities) {\n  try {\n    const args = getArgs(capabilities)\n    return binaryPaths(args)\n  } catch (e) {\n    throw Error(\n      `Unable to obtain browser driver.\n        For more information on how to install drivers see\n        https://www.selenium.dev/documentation/webdriver/troubleshooting/errors/driver_location/. ${e}`,\n    )\n  }\n}\n\nfunction getArgs(options) {\n  let args = ['--browser', options.getBrowserName(), '--language-binding', 'javascript', '--output', 'json']\n\n  if (options.getBrowserVersion() && options.getBrowserVersion() !== '') {\n    args.push('--browser-version', options.getBrowserVersion())\n  }\n\n  const vendorOptions =\n    options.get('goog:chromeOptions') || options.get('ms:edgeOptions') || options.get('moz:firefoxOptions')\n  if (vendorOptions && vendorOptions.binary && vendorOptions.binary !== '') {\n    args.push('--browser-path', path.resolve(vendorOptions.binary))\n  }\n\n  const proxyOptions = options.getProxy()\n\n  // Check if proxyOptions exists and has properties\n  if (proxyOptions && Object.keys(proxyOptions).length > 0) {\n    const httpProxy = proxyOptions['httpProxy']\n    const sslProxy = proxyOptions['sslProxy']\n\n    if (httpProxy !== undefined) {\n      args.push('--proxy', httpProxy)\n    } else if (sslProxy !== undefined) {\n      args.push('--proxy', sslProxy)\n    }\n  }\n  return args\n}\n\n// PUBLIC API\nmodule.exports = { getBinaryPaths }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc2VsZW5pdW0td2ViZHJpdmVyL2NvbW1vbi9kcml2ZXJGaW5kZXIuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGFBQWEsbUJBQU8sQ0FBQyw0QkFBVztBQUNoQyxRQUFRLGNBQWMsRUFBRSxtQkFBTyxDQUFDLDRGQUFtQjs7QUFFbkQ7QUFDQTtBQUNBLFdBQVcsY0FBYztBQUN6QixjQUFjLDBDQUEwQztBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0Esb0dBQW9HLEVBQUU7QUFDdEc7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsbUJBQW1CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ29vZ2xlLXNoZWV0cy1zZWxlbml1bS1hdXRvbWF0aW9uLy4vbm9kZV9tb2R1bGVzL3NlbGVuaXVtLXdlYmRyaXZlci9jb21tb24vZHJpdmVyRmluZGVyLmpzP2U5NDgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIFNvZnR3YXJlIEZyZWVkb20gQ29uc2VydmFuY3kgKFNGQykgdW5kZXIgb25lXG4vLyBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbi8vIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4vLyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBTRkMgbGljZW5zZXMgdGhpcyBmaWxlXG4vLyB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4vLyBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbi8vIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbi8vIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4vLyBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuLy8gS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4vLyBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4vLyB1bmRlciB0aGUgTGljZW5zZS5cblxuLyoqXG4gKiAgVGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBzdGlsbCBpbiBiZXRhLCBhbmQgbWF5IGNoYW5nZS5cbiAqXG4gKiAgVXRpbGl0eSB0byBmaW5kIGlmIGEgZ2l2ZW4gZmlsZSBpcyBwcmVzZW50IGFuZCBleGVjdXRhYmxlLlxuICovXG5cbmNvbnN0IHBhdGggPSByZXF1aXJlKCdub2RlOnBhdGgnKVxuY29uc3QgeyBiaW5hcnlQYXRocyB9ID0gcmVxdWlyZSgnLi9zZWxlbml1bU1hbmFnZXInKVxuXG4vKipcbiAqIERldGVybWluZXMgdGhlIHBhdGggb2YgdGhlIGNvcnJlY3QgU2VsZW5pdW0gTWFuYWdlciBiaW5hcnlcbiAqIEBwYXJhbSB7Q2FwYWJpbGl0aWVzfSBjYXBhYmlsaXRpZXMgYnJvd3NlciBvcHRpb25zIHRvIGZldGNoIHRoZSBkcml2ZXJcbiAqIEByZXR1cm5zIHt7YnJvd3NlclBhdGg6IHN0cmluZywgZHJpdmVyUGF0aDogc3RyaW5nfX0gcGF0aCBvZiB0aGUgZHJpdmVyXG4gKiBhbmQgYnJvd3NlciBsb2NhdGlvblxuICovXG5mdW5jdGlvbiBnZXRCaW5hcnlQYXRocyhjYXBhYmlsaXRpZXMpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBhcmdzID0gZ2V0QXJncyhjYXBhYmlsaXRpZXMpXG4gICAgcmV0dXJuIGJpbmFyeVBhdGhzKGFyZ3MpXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aHJvdyBFcnJvcihcbiAgICAgIGBVbmFibGUgdG8gb2J0YWluIGJyb3dzZXIgZHJpdmVyLlxuICAgICAgICBGb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBob3cgdG8gaW5zdGFsbCBkcml2ZXJzIHNlZVxuICAgICAgICBodHRwczovL3d3dy5zZWxlbml1bS5kZXYvZG9jdW1lbnRhdGlvbi93ZWJkcml2ZXIvdHJvdWJsZXNob290aW5nL2Vycm9ycy9kcml2ZXJfbG9jYXRpb24vLiAke2V9YCxcbiAgICApXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0QXJncyhvcHRpb25zKSB7XG4gIGxldCBhcmdzID0gWyctLWJyb3dzZXInLCBvcHRpb25zLmdldEJyb3dzZXJOYW1lKCksICctLWxhbmd1YWdlLWJpbmRpbmcnLCAnamF2YXNjcmlwdCcsICctLW91dHB1dCcsICdqc29uJ11cblxuICBpZiAob3B0aW9ucy5nZXRCcm93c2VyVmVyc2lvbigpICYmIG9wdGlvbnMuZ2V0QnJvd3NlclZlcnNpb24oKSAhPT0gJycpIHtcbiAgICBhcmdzLnB1c2goJy0tYnJvd3Nlci12ZXJzaW9uJywgb3B0aW9ucy5nZXRCcm93c2VyVmVyc2lvbigpKVxuICB9XG5cbiAgY29uc3QgdmVuZG9yT3B0aW9ucyA9XG4gICAgb3B0aW9ucy5nZXQoJ2dvb2c6Y2hyb21lT3B0aW9ucycpIHx8IG9wdGlvbnMuZ2V0KCdtczplZGdlT3B0aW9ucycpIHx8IG9wdGlvbnMuZ2V0KCdtb3o6ZmlyZWZveE9wdGlvbnMnKVxuICBpZiAodmVuZG9yT3B0aW9ucyAmJiB2ZW5kb3JPcHRpb25zLmJpbmFyeSAmJiB2ZW5kb3JPcHRpb25zLmJpbmFyeSAhPT0gJycpIHtcbiAgICBhcmdzLnB1c2goJy0tYnJvd3Nlci1wYXRoJywgcGF0aC5yZXNvbHZlKHZlbmRvck9wdGlvbnMuYmluYXJ5KSlcbiAgfVxuXG4gIGNvbnN0IHByb3h5T3B0aW9ucyA9IG9wdGlvbnMuZ2V0UHJveHkoKVxuXG4gIC8vIENoZWNrIGlmIHByb3h5T3B0aW9ucyBleGlzdHMgYW5kIGhhcyBwcm9wZXJ0aWVzXG4gIGlmIChwcm94eU9wdGlvbnMgJiYgT2JqZWN0LmtleXMocHJveHlPcHRpb25zKS5sZW5ndGggPiAwKSB7XG4gICAgY29uc3QgaHR0cFByb3h5ID0gcHJveHlPcHRpb25zWydodHRwUHJveHknXVxuICAgIGNvbnN0IHNzbFByb3h5ID0gcHJveHlPcHRpb25zWydzc2xQcm94eSddXG5cbiAgICBpZiAoaHR0cFByb3h5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGFyZ3MucHVzaCgnLS1wcm94eScsIGh0dHBQcm94eSlcbiAgICB9IGVsc2UgaWYgKHNzbFByb3h5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGFyZ3MucHVzaCgnLS1wcm94eScsIHNzbFByb3h5KVxuICAgIH1cbiAgfVxuICByZXR1cm4gYXJnc1xufVxuXG4vLyBQVUJMSUMgQVBJXG5tb2R1bGUuZXhwb3J0cyA9IHsgZ2V0QmluYXJ5UGF0aHMgfVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/common/driverFinder.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/common/seleniumManager.js":
/*!*******************************************************************!*\
  !*** ./node_modules/selenium-webdriver/common/seleniumManager.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n *  This implementation is still in beta, and may change.\n *\n *  Wrapper for getting information from the Selenium Manager binaries\n */\n\nconst { platform } = __webpack_require__(/*! node:process */ \"node:process\")\nconst path = __webpack_require__(/*! node:path */ \"node:path\")\nconst fs = __webpack_require__(/*! node:fs */ \"node:fs\")\nconst spawnSync = (__webpack_require__(/*! node:child_process */ \"node:child_process\").spawnSync)\nconst logging = __webpack_require__(/*! ../lib/logging */ \"(rsc)/./node_modules/selenium-webdriver/lib/logging.js\")\n\nconst log_ = logging.getLogger(logging.Type.DRIVER)\nlet debugMessagePrinted = false\n\n/**\n * Determines the path of the correct Selenium Manager binary\n * @returns {string}\n */\nfunction getBinary() {\n  const directory = {\n    darwin: 'macos',\n    win32: 'windows',\n    cygwin: 'windows',\n    linux: 'linux',\n  }[platform]\n\n  const file = directory === 'windows' ? 'selenium-manager.exe' : 'selenium-manager'\n\n  let seleniumManagerBasePath = path.join(__dirname, '..', '/bin')\n\n  const filePath = process.env.SE_MANAGER_PATH || path.join(seleniumManagerBasePath, directory, file)\n\n  if (!fs.existsSync(filePath)) {\n    throw new Error(`Unable to obtain Selenium Manager at ${filePath}`)\n  }\n\n  if (!debugMessagePrinted) {\n    log_.debug(`Selenium Manager binary found at ${filePath}`)\n    debugMessagePrinted = true // Set the flag to true after printing the debug message\n  }\n\n  return filePath\n}\n\n/**\n * Determines the path of the correct driver\n * @param {string[]} args arguments to invoke Selenium Manager\n * @returns {{browserPath: string, driverPath: string}} path of the driver and\n * browser location\n */\n\nfunction binaryPaths(args) {\n  const smBinary = getBinary()\n  const spawnResult = spawnSync(smBinary, args)\n  let output\n  if (spawnResult.status) {\n    let errorMessage\n    if (spawnResult.stderr.toString()) {\n      errorMessage = spawnResult.stderr.toString()\n    }\n    if (spawnResult.stdout.toString()) {\n      try {\n        output = JSON.parse(spawnResult.stdout.toString())\n        logOutput(output)\n        errorMessage = output.result.message\n      } catch (e) {\n        errorMessage = e.toString()\n      }\n    }\n    throw new Error(`Error executing command for ${smBinary} with ${args}: ${errorMessage}`)\n  }\n  try {\n    output = JSON.parse(spawnResult.stdout.toString())\n  } catch (e) {\n    throw new Error(`Error executing command for ${smBinary} with ${args}: ${e.toString()}`)\n  }\n\n  logOutput(output)\n  return {\n    driverPath: output.result.driver_path,\n    browserPath: output.result.browser_path,\n  }\n}\n\nfunction logOutput(output) {\n  for (const key in output.logs) {\n    if (output.logs[key].level === 'WARN') {\n      log_.warning(`${output.logs[key].message}`)\n    }\n    if (['DEBUG', 'INFO'].includes(output.logs[key].level)) {\n      log_.debug(`${output.logs[key].message}`)\n    }\n  }\n}\n\n// PUBLIC API\nmodule.exports = { binaryPaths }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc2VsZW5pdW0td2ViZHJpdmVyL2NvbW1vbi9zZWxlbml1bU1hbmFnZXIuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFFBQVEsV0FBVyxFQUFFLG1CQUFPLENBQUMsa0NBQWM7QUFDM0MsYUFBYSxtQkFBTyxDQUFDLDRCQUFXO0FBQ2hDLFdBQVcsbUJBQU8sQ0FBQyx3QkFBUztBQUM1QixrQkFBa0IsK0VBQXVDO0FBQ3pELGdCQUFnQixtQkFBTyxDQUFDLDhFQUFnQjs7QUFFeEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBLDREQUE0RCxTQUFTO0FBQ3JFOztBQUVBO0FBQ0EsbURBQW1ELFNBQVM7QUFDNUQ7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLFVBQVU7QUFDckIsY0FBYywwQ0FBMEM7QUFDeEQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCxVQUFVLE9BQU8sS0FBSyxJQUFJLGFBQWE7QUFDMUY7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLG1EQUFtRCxVQUFVLE9BQU8sS0FBSyxJQUFJLGFBQWE7QUFDMUY7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQix5QkFBeUI7QUFDL0M7QUFDQTtBQUNBLG9CQUFvQix5QkFBeUI7QUFDN0M7QUFDQTtBQUNBOztBQUVBO0FBQ0EsbUJBQW1CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ29vZ2xlLXNoZWV0cy1zZWxlbml1bS1hdXRvbWF0aW9uLy4vbm9kZV9tb2R1bGVzL3NlbGVuaXVtLXdlYmRyaXZlci9jb21tb24vc2VsZW5pdW1NYW5hZ2VyLmpzP2U4NzkiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIFNvZnR3YXJlIEZyZWVkb20gQ29uc2VydmFuY3kgKFNGQykgdW5kZXIgb25lXG4vLyBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbi8vIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4vLyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBTRkMgbGljZW5zZXMgdGhpcyBmaWxlXG4vLyB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4vLyBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbi8vIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbi8vIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4vLyBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuLy8gS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4vLyBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4vLyB1bmRlciB0aGUgTGljZW5zZS5cblxuLyoqXG4gKiAgVGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBzdGlsbCBpbiBiZXRhLCBhbmQgbWF5IGNoYW5nZS5cbiAqXG4gKiAgV3JhcHBlciBmb3IgZ2V0dGluZyBpbmZvcm1hdGlvbiBmcm9tIHRoZSBTZWxlbml1bSBNYW5hZ2VyIGJpbmFyaWVzXG4gKi9cblxuY29uc3QgeyBwbGF0Zm9ybSB9ID0gcmVxdWlyZSgnbm9kZTpwcm9jZXNzJylcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdub2RlOnBhdGgnKVxuY29uc3QgZnMgPSByZXF1aXJlKCdub2RlOmZzJylcbmNvbnN0IHNwYXduU3luYyA9IHJlcXVpcmUoJ25vZGU6Y2hpbGRfcHJvY2VzcycpLnNwYXduU3luY1xuY29uc3QgbG9nZ2luZyA9IHJlcXVpcmUoJy4uL2xpYi9sb2dnaW5nJylcblxuY29uc3QgbG9nXyA9IGxvZ2dpbmcuZ2V0TG9nZ2VyKGxvZ2dpbmcuVHlwZS5EUklWRVIpXG5sZXQgZGVidWdNZXNzYWdlUHJpbnRlZCA9IGZhbHNlXG5cbi8qKlxuICogRGV0ZXJtaW5lcyB0aGUgcGF0aCBvZiB0aGUgY29ycmVjdCBTZWxlbml1bSBNYW5hZ2VyIGJpbmFyeVxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZ2V0QmluYXJ5KCkge1xuICBjb25zdCBkaXJlY3RvcnkgPSB7XG4gICAgZGFyd2luOiAnbWFjb3MnLFxuICAgIHdpbjMyOiAnd2luZG93cycsXG4gICAgY3lnd2luOiAnd2luZG93cycsXG4gICAgbGludXg6ICdsaW51eCcsXG4gIH1bcGxhdGZvcm1dXG5cbiAgY29uc3QgZmlsZSA9IGRpcmVjdG9yeSA9PT0gJ3dpbmRvd3MnID8gJ3NlbGVuaXVtLW1hbmFnZXIuZXhlJyA6ICdzZWxlbml1bS1tYW5hZ2VyJ1xuXG4gIGxldCBzZWxlbml1bU1hbmFnZXJCYXNlUGF0aCA9IHBhdGguam9pbihfX2Rpcm5hbWUsICcuLicsICcvYmluJylcblxuICBjb25zdCBmaWxlUGF0aCA9IHByb2Nlc3MuZW52LlNFX01BTkFHRVJfUEFUSCB8fCBwYXRoLmpvaW4oc2VsZW5pdW1NYW5hZ2VyQmFzZVBhdGgsIGRpcmVjdG9yeSwgZmlsZSlcblxuICBpZiAoIWZzLmV4aXN0c1N5bmMoZmlsZVBhdGgpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gb2J0YWluIFNlbGVuaXVtIE1hbmFnZXIgYXQgJHtmaWxlUGF0aH1gKVxuICB9XG5cbiAgaWYgKCFkZWJ1Z01lc3NhZ2VQcmludGVkKSB7XG4gICAgbG9nXy5kZWJ1ZyhgU2VsZW5pdW0gTWFuYWdlciBiaW5hcnkgZm91bmQgYXQgJHtmaWxlUGF0aH1gKVxuICAgIGRlYnVnTWVzc2FnZVByaW50ZWQgPSB0cnVlIC8vIFNldCB0aGUgZmxhZyB0byB0cnVlIGFmdGVyIHByaW50aW5nIHRoZSBkZWJ1ZyBtZXNzYWdlXG4gIH1cblxuICByZXR1cm4gZmlsZVBhdGhcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmVzIHRoZSBwYXRoIG9mIHRoZSBjb3JyZWN0IGRyaXZlclxuICogQHBhcmFtIHtzdHJpbmdbXX0gYXJncyBhcmd1bWVudHMgdG8gaW52b2tlIFNlbGVuaXVtIE1hbmFnZXJcbiAqIEByZXR1cm5zIHt7YnJvd3NlclBhdGg6IHN0cmluZywgZHJpdmVyUGF0aDogc3RyaW5nfX0gcGF0aCBvZiB0aGUgZHJpdmVyIGFuZFxuICogYnJvd3NlciBsb2NhdGlvblxuICovXG5cbmZ1bmN0aW9uIGJpbmFyeVBhdGhzKGFyZ3MpIHtcbiAgY29uc3Qgc21CaW5hcnkgPSBnZXRCaW5hcnkoKVxuICBjb25zdCBzcGF3blJlc3VsdCA9IHNwYXduU3luYyhzbUJpbmFyeSwgYXJncylcbiAgbGV0IG91dHB1dFxuICBpZiAoc3Bhd25SZXN1bHQuc3RhdHVzKSB7XG4gICAgbGV0IGVycm9yTWVzc2FnZVxuICAgIGlmIChzcGF3blJlc3VsdC5zdGRlcnIudG9TdHJpbmcoKSkge1xuICAgICAgZXJyb3JNZXNzYWdlID0gc3Bhd25SZXN1bHQuc3RkZXJyLnRvU3RyaW5nKClcbiAgICB9XG4gICAgaWYgKHNwYXduUmVzdWx0LnN0ZG91dC50b1N0cmluZygpKSB7XG4gICAgICB0cnkge1xuICAgICAgICBvdXRwdXQgPSBKU09OLnBhcnNlKHNwYXduUmVzdWx0LnN0ZG91dC50b1N0cmluZygpKVxuICAgICAgICBsb2dPdXRwdXQob3V0cHV0KVxuICAgICAgICBlcnJvck1lc3NhZ2UgPSBvdXRwdXQucmVzdWx0Lm1lc3NhZ2VcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgZXJyb3JNZXNzYWdlID0gZS50b1N0cmluZygpXG4gICAgICB9XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihgRXJyb3IgZXhlY3V0aW5nIGNvbW1hbmQgZm9yICR7c21CaW5hcnl9IHdpdGggJHthcmdzfTogJHtlcnJvck1lc3NhZ2V9YClcbiAgfVxuICB0cnkge1xuICAgIG91dHB1dCA9IEpTT04ucGFyc2Uoc3Bhd25SZXN1bHQuc3Rkb3V0LnRvU3RyaW5nKCkpXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEVycm9yIGV4ZWN1dGluZyBjb21tYW5kIGZvciAke3NtQmluYXJ5fSB3aXRoICR7YXJnc306ICR7ZS50b1N0cmluZygpfWApXG4gIH1cblxuICBsb2dPdXRwdXQob3V0cHV0KVxuICByZXR1cm4ge1xuICAgIGRyaXZlclBhdGg6IG91dHB1dC5yZXN1bHQuZHJpdmVyX3BhdGgsXG4gICAgYnJvd3NlclBhdGg6IG91dHB1dC5yZXN1bHQuYnJvd3Nlcl9wYXRoLFxuICB9XG59XG5cbmZ1bmN0aW9uIGxvZ091dHB1dChvdXRwdXQpIHtcbiAgZm9yIChjb25zdCBrZXkgaW4gb3V0cHV0LmxvZ3MpIHtcbiAgICBpZiAob3V0cHV0LmxvZ3Nba2V5XS5sZXZlbCA9PT0gJ1dBUk4nKSB7XG4gICAgICBsb2dfLndhcm5pbmcoYCR7b3V0cHV0LmxvZ3Nba2V5XS5tZXNzYWdlfWApXG4gICAgfVxuICAgIGlmIChbJ0RFQlVHJywgJ0lORk8nXS5pbmNsdWRlcyhvdXRwdXQubG9nc1trZXldLmxldmVsKSkge1xuICAgICAgbG9nXy5kZWJ1ZyhgJHtvdXRwdXQubG9nc1trZXldLm1lc3NhZ2V9YClcbiAgICB9XG4gIH1cbn1cblxuLy8gUFVCTElDIEFQSVxubW9kdWxlLmV4cG9ydHMgPSB7IGJpbmFyeVBhdGhzIH1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/common/seleniumManager.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/devtools/CDPConnection.js":
/*!*******************************************************************!*\
  !*** ./node_modules/selenium-webdriver/devtools/CDPConnection.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst logging = __webpack_require__(/*! ../lib/logging */ \"(rsc)/./node_modules/selenium-webdriver/lib/logging.js\")\n\nconst RESPONSE_TIMEOUT = 1000 * 30\n\nclass CDPConnection {\n  constructor(wsConnection) {\n    this._wsConnection = wsConnection\n    this.cmd_id = 0\n    this.targetID = null\n    this.sessionId = null\n  }\n\n  execute(method, params, callback) {\n    let message = {\n      method,\n      id: this.cmd_id++,\n    }\n    if (this.sessionId) {\n      message['sessionId'] = this.sessionId\n    }\n\n    const mergedMessage = Object.assign({ params: params }, message)\n    this._wsConnection.send(JSON.stringify(mergedMessage), callback)\n  }\n\n  async send(method, params) {\n    let cdp_id = this.cmd_id++\n    let message = {\n      method,\n      id: cdp_id,\n    }\n    if (this.sessionId) {\n      message['sessionId'] = this.sessionId\n    }\n\n    const mergedMessage = Object.assign({ params: params }, message)\n    this._wsConnection.send(JSON.stringify(mergedMessage))\n\n    return new Promise((resolve, reject) => {\n      const timeoutId = setTimeout(() => {\n        reject(new Error(`Request with id ${cdp_id} timed out`))\n        handler.off('message', listener)\n      }, RESPONSE_TIMEOUT)\n\n      const listener = (data) => {\n        try {\n          const payload = JSON.parse(data.toString())\n          if (payload.id === cdp_id) {\n            clearTimeout(timeoutId)\n            handler.off('message', listener)\n            resolve(payload)\n          }\n        } catch (err) {\n          logging.getLogger(logging.Type.BROWSER).severe(`Failed parse message: ${err.message}`)\n        }\n      }\n\n      const handler = this._wsConnection.on('message', listener)\n    })\n  }\n}\n\nexports.CdpConnection = CDPConnection\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc2VsZW5pdW0td2ViZHJpdmVyL2RldnRvb2xzL0NEUENvbm5lY3Rpb24uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxnQkFBZ0IsbUJBQU8sQ0FBQyw4RUFBZ0I7O0FBRXhDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMENBQTBDLGdCQUFnQjtBQUMxRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwwQ0FBMEMsZ0JBQWdCO0FBQzFEOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEMsUUFBUTtBQUNwRDtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixrRkFBa0YsWUFBWTtBQUM5RjtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUEscUJBQXFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ29vZ2xlLXNoZWV0cy1zZWxlbml1bS1hdXRvbWF0aW9uLy4vbm9kZV9tb2R1bGVzL3NlbGVuaXVtLXdlYmRyaXZlci9kZXZ0b29scy9DRFBDb25uZWN0aW9uLmpzPzM1ODciXSwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIFNvZnR3YXJlIEZyZWVkb20gQ29uc2VydmFuY3kgKFNGQykgdW5kZXIgb25lXG4vLyBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbi8vIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4vLyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBTRkMgbGljZW5zZXMgdGhpcyBmaWxlXG4vLyB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4vLyBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbi8vIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbi8vIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4vLyBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuLy8gS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4vLyBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4vLyB1bmRlciB0aGUgTGljZW5zZS5cblxuY29uc3QgbG9nZ2luZyA9IHJlcXVpcmUoJy4uL2xpYi9sb2dnaW5nJylcblxuY29uc3QgUkVTUE9OU0VfVElNRU9VVCA9IDEwMDAgKiAzMFxuXG5jbGFzcyBDRFBDb25uZWN0aW9uIHtcbiAgY29uc3RydWN0b3Iod3NDb25uZWN0aW9uKSB7XG4gICAgdGhpcy5fd3NDb25uZWN0aW9uID0gd3NDb25uZWN0aW9uXG4gICAgdGhpcy5jbWRfaWQgPSAwXG4gICAgdGhpcy50YXJnZXRJRCA9IG51bGxcbiAgICB0aGlzLnNlc3Npb25JZCA9IG51bGxcbiAgfVxuXG4gIGV4ZWN1dGUobWV0aG9kLCBwYXJhbXMsIGNhbGxiYWNrKSB7XG4gICAgbGV0IG1lc3NhZ2UgPSB7XG4gICAgICBtZXRob2QsXG4gICAgICBpZDogdGhpcy5jbWRfaWQrKyxcbiAgICB9XG4gICAgaWYgKHRoaXMuc2Vzc2lvbklkKSB7XG4gICAgICBtZXNzYWdlWydzZXNzaW9uSWQnXSA9IHRoaXMuc2Vzc2lvbklkXG4gICAgfVxuXG4gICAgY29uc3QgbWVyZ2VkTWVzc2FnZSA9IE9iamVjdC5hc3NpZ24oeyBwYXJhbXM6IHBhcmFtcyB9LCBtZXNzYWdlKVxuICAgIHRoaXMuX3dzQ29ubmVjdGlvbi5zZW5kKEpTT04uc3RyaW5naWZ5KG1lcmdlZE1lc3NhZ2UpLCBjYWxsYmFjaylcbiAgfVxuXG4gIGFzeW5jIHNlbmQobWV0aG9kLCBwYXJhbXMpIHtcbiAgICBsZXQgY2RwX2lkID0gdGhpcy5jbWRfaWQrK1xuICAgIGxldCBtZXNzYWdlID0ge1xuICAgICAgbWV0aG9kLFxuICAgICAgaWQ6IGNkcF9pZCxcbiAgICB9XG4gICAgaWYgKHRoaXMuc2Vzc2lvbklkKSB7XG4gICAgICBtZXNzYWdlWydzZXNzaW9uSWQnXSA9IHRoaXMuc2Vzc2lvbklkXG4gICAgfVxuXG4gICAgY29uc3QgbWVyZ2VkTWVzc2FnZSA9IE9iamVjdC5hc3NpZ24oeyBwYXJhbXM6IHBhcmFtcyB9LCBtZXNzYWdlKVxuICAgIHRoaXMuX3dzQ29ubmVjdGlvbi5zZW5kKEpTT04uc3RyaW5naWZ5KG1lcmdlZE1lc3NhZ2UpKVxuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IHRpbWVvdXRJZCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICByZWplY3QobmV3IEVycm9yKGBSZXF1ZXN0IHdpdGggaWQgJHtjZHBfaWR9IHRpbWVkIG91dGApKVxuICAgICAgICBoYW5kbGVyLm9mZignbWVzc2FnZScsIGxpc3RlbmVyKVxuICAgICAgfSwgUkVTUE9OU0VfVElNRU9VVClcblxuICAgICAgY29uc3QgbGlzdGVuZXIgPSAoZGF0YSkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IHBheWxvYWQgPSBKU09OLnBhcnNlKGRhdGEudG9TdHJpbmcoKSlcbiAgICAgICAgICBpZiAocGF5bG9hZC5pZCA9PT0gY2RwX2lkKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dElkKVxuICAgICAgICAgICAgaGFuZGxlci5vZmYoJ21lc3NhZ2UnLCBsaXN0ZW5lcilcbiAgICAgICAgICAgIHJlc29sdmUocGF5bG9hZClcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIGxvZ2dpbmcuZ2V0TG9nZ2VyKGxvZ2dpbmcuVHlwZS5CUk9XU0VSKS5zZXZlcmUoYEZhaWxlZCBwYXJzZSBtZXNzYWdlOiAke2Vyci5tZXNzYWdlfWApXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29uc3QgaGFuZGxlciA9IHRoaXMuX3dzQ29ubmVjdGlvbi5vbignbWVzc2FnZScsIGxpc3RlbmVyKVxuICAgIH0pXG4gIH1cbn1cblxuZXhwb3J0cy5DZHBDb25uZWN0aW9uID0gQ0RQQ29ubmVjdGlvblxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/devtools/CDPConnection.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/edge.js":
/*!*************************************************!*\
  !*** ./node_modules/selenium-webdriver/edge.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Defines a {@linkplain Driver WebDriver} client for\n * Microsoft's Edge web browser. Edge (Chromium) is supported and support\n * for Edge Legacy (EdgeHTML) as part of https://github.com/SeleniumHQ/selenium/issues/9166.\n * Before using this module, you must download and install the correct\n * [WebDriver](https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/) server.\n *\n * Ensure that the msedgedriver (Chromium)\n * is on your [PATH](http://en.wikipedia.org/wiki/PATH_%28variable%29).\n *\n * You may use {@link Options} to specify whether Edge Chromium options should be used:\n\n *     const edge = require('selenium-webdriver/edge');\n *     const options = new edge.Options();\n\n * There are three primary classes exported by this module:\n *\n * 1. {@linkplain ServiceBuilder}: configures the\n *     {@link ./remote.DriverService remote.DriverService}\n *     that manages the [WebDriver] child process.\n *\n * 2. {@linkplain Options}: defines configuration options for each new\n *     WebDriver session, such as which\n *     {@linkplain Options#setProxy proxy} to use when starting the browser.\n *\n * 3. {@linkplain Driver}: the WebDriver client; each new instance will control\n *     a unique browser session.\n *\n * __Customizing the WebDriver Server__ <a id=\"custom-server\"></a>\n *\n * By default, every MicrosoftEdge session will use a single driver service,\n * which is started the first time a {@link Driver} instance is created and\n * terminated when this process exits. The default service will inherit its\n * environment from the current process.\n * You may obtain a handle to this default service using\n * {@link #getDefaultService getDefaultService()} and change its configuration\n * with {@link #setDefaultService setDefaultService()}.\n *\n * You may also create a {@link Driver} with its own driver service. This is\n * useful if you need to capture the server's log output for a specific session:\n *\n *     const edge = require('selenium-webdriver/edge');\n *\n *     const service = new edge.ServiceBuilder()\n *         .setPort(55555)\n *         .build();\n *\n *     let options = new edge.Options();\n *     // configure browser options ...\n *\n *     let driver = edge.Driver.createSession(options, service);\n *\n * Users should only instantiate the {@link Driver} class directly when they\n * need a custom driver service configuration (as shown above). For normal\n * operation, users should start msedgedriver using the\n * {@link ./builder.Builder selenium-webdriver.Builder}.\n *\n * [WebDriver (Chromium)]: https://docs.microsoft.com/en-us/microsoft-edge/webdriver-chromium\n *\n * @module selenium-webdriver/edge\n */\n\n\n\nconst { Browser } = __webpack_require__(/*! ./lib/capabilities */ \"(rsc)/./node_modules/selenium-webdriver/lib/capabilities.js\")\nconst chromium = __webpack_require__(/*! ./chromium */ \"(rsc)/./node_modules/selenium-webdriver/chromium.js\")\nconst EDGE_CAPABILITY_KEY = 'ms:edgeOptions'\n\n/** @type {remote.DriverService} */\n\n/**\n * Creates {@link selenium-webdriver/remote.DriverService} instances that manage\n * a [MSEdgeDriver](https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/)\n * server in a child process.\n */\nclass ServiceBuilder extends chromium.ServiceBuilder {\n  /**\n   * @param {string=} opt_exe Path to the server executable to use. If omitted,\n   *     the builder will attempt to locate the msedgedriver on the current\n   *     PATH.\n   * @throws {Error} If provided executable does not exist, or the msedgedriver\n   *     cannot be found on the PATH.\n   */\n  constructor(opt_exe) {\n    super(opt_exe)\n    this.setLoopback(true)\n  }\n}\n\n/**\n * Class for managing edge chromium specific options.\n */\nclass Options extends chromium.Options {\n  /**\n   * Sets the path to the edge binary to use\n   *\n   * The binary path be absolute or relative to the msedgedriver server\n   * executable, but it must exist on the machine that will launch edge chromium.\n   *\n   * @param {string} path The path to the msedgedriver binary to use.\n   * @return {!Options} A self reference.\n   */\n  setEdgeChromiumBinaryPath(path) {\n    return this.setBinaryPath(path)\n  }\n\n  /**\n   * Changes the browser name to 'webview2' to enable\n   * <a href=\"https://learn.microsoft.com/en-us/microsoft-edge/webview2/how-to/webdriver\">\n   *   test automation of WebView2 apps with Microsoft Edge WebDriver\n   * </a>\n   *\n   * @param {boolean} enable  flag to enable or disable the 'webview2' usage\n   */\n  useWebView(enable) {\n    const browserName = enable ? 'webview2' : Browser.EDGE\n    return this.setBrowserName(browserName)\n  }\n}\n\n/**\n * Creates a new WebDriver client for Microsoft's Edge.\n */\nclass Driver extends chromium.Driver {\n  /**\n   * Creates a new browser session for Microsoft's Edge browser.\n   *\n   * @param {(Capabilities|Options)=} opt_config The configuration options.\n   * @param {remote.DriverService=} opt_serviceExecutor The service to use; will create\n   *     a new Legacy or Chromium service based on {@linkplain Options} by default.\n   * @return {!Driver} A new driver instance.\n   */\n  static createSession(opt_config, opt_serviceExecutor) {\n    let caps = opt_config || new Options()\n    return /** @type {!Driver} */ (super.createSession(caps, opt_serviceExecutor, 'ms', EDGE_CAPABILITY_KEY))\n  }\n\n  /**\n   * returns new instance of edge driver service\n   * @returns {remote.DriverService}\n   */\n  static getDefaultService() {\n    return new ServiceBuilder().build()\n  }\n\n  /**\n   * This function is a no-op as file detectors are not supported by this\n   * implementation.\n   * @override\n   */\n  setFileDetector() {}\n}\n\nOptions.prototype.BROWSER_NAME_VALUE = Browser.EDGE\nOptions.prototype.CAPABILITY_KEY = EDGE_CAPABILITY_KEY\n\n// PUBLIC API\n\nmodule.exports = {\n  Driver,\n  Options,\n  ServiceBuilder,\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/edge.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/firefox.js":
/*!****************************************************!*\
  !*** ./node_modules/selenium-webdriver/firefox.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Defines the {@linkplain Driver WebDriver} client for Firefox.\n * Before using this module, you must download the latest\n * [geckodriver release] and ensure it can be found on your system [PATH].\n *\n * Each FirefoxDriver instance will be created with an anonymous profile,\n * ensuring browser historys do not share session data (cookies, history, cache,\n * offline storage, etc.)\n *\n * __Customizing the Firefox Profile__\n *\n * The profile used for each WebDriver session may be configured using the\n * {@linkplain Options} class. For example, you may install an extension, like\n * Firebug:\n *\n *     const {Builder} = require('selenium-webdriver');\n *     const firefox = require('selenium-webdriver/firefox');\n *\n *     let options = new firefox.Options()\n *         .addExtensions('/path/to/firebug.xpi')\n *         .setPreference('extensions.firebug.showChromeErrors', true);\n *\n *     let driver = new Builder()\n *         .forBrowser('firefox')\n *         .setFirefoxOptions(options)\n *         .build();\n *\n * The {@linkplain Options} class may also be used to configure WebDriver based\n * on a pre-existing browser profile:\n *\n *     let profile = '/usr/local/home/bob/.mozilla/firefox/3fgog75h.testing';\n *     let options = new firefox.Options().setProfile(profile);\n *\n * The FirefoxDriver will _never_ modify a pre-existing profile; instead it will\n * create a copy for it to modify. By extension, there are certain browser\n * preferences that are required for WebDriver to function properly and they\n * will always be overwritten.\n *\n * __Using a Custom Firefox Binary__\n *\n * On Windows and MacOS, the FirefoxDriver will search for Firefox in its\n * default installation location:\n *\n * - Windows: C:\\Program Files and C:\\Program Files (x86).\n * - MacOS: /Applications/Firefox.app\n *\n * For Linux, Firefox will always be located on the PATH: `$(where firefox)`.\n *\n * You can provide a custom location for Firefox by setting the binary in the\n * {@link Options}:setBinary method.\n *\n *     const {Builder} = require('selenium-webdriver');\n *     const firefox = require('selenium-webdriver/firefox');\n *\n *    let options = new firefox.Options()\n *         .setBinary('/my/firefox/install/dir/firefox');\n *     let driver = new Builder()\n *         .forBrowser('firefox')\n *         .setFirefoxOptions(options)\n *         .build();\n *\n * __Remote Testing__\n *\n * You may customize the Firefox binary and profile when running against a\n * remote Selenium server. Your custom profile will be packaged as a zip and\n * transferred to the remote host for use. The profile will be transferred\n * _once for each new session_. The performance impact should be minimal if\n * you've only configured a few extra browser preferences. If you have a large\n * profile with several extensions, you should consider installing it on the\n * remote host and defining its path via the {@link Options} class. Custom\n * binaries are never copied to remote machines and must be referenced by\n * installation path.\n *\n *     const {Builder} = require('selenium-webdriver');\n *     const firefox = require('selenium-webdriver/firefox');\n *\n *     let options = new firefox.Options()\n *         .setProfile('/profile/path/on/remote/host')\n *         .setBinary('/install/dir/on/remote/host/firefox');\n *\n *     let driver = new Builder()\n *         .forBrowser('firefox')\n *         .usingServer('http://127.0.0.1:4444/wd/hub')\n *         .setFirefoxOptions(options)\n *         .build();\n *\n * [geckodriver release]: https://github.com/mozilla/geckodriver/releases/\n * [PATH]: http://en.wikipedia.org/wiki/PATH_%28variable%29\n *\n * @module selenium-webdriver/firefox\n */\n\n\n\nconst fs = __webpack_require__(/*! node:fs */ \"node:fs\")\nconst path = __webpack_require__(/*! node:path */ \"node:path\")\nconst Symbols = __webpack_require__(/*! ./lib/symbols */ \"(rsc)/./node_modules/selenium-webdriver/lib/symbols.js\")\nconst command = __webpack_require__(/*! ./lib/command */ \"(rsc)/./node_modules/selenium-webdriver/lib/command.js\")\nconst http = __webpack_require__(/*! ./http */ \"(rsc)/./node_modules/selenium-webdriver/http/index.js\")\nconst io = __webpack_require__(/*! ./io */ \"(rsc)/./node_modules/selenium-webdriver/io/index.js\")\nconst remote = __webpack_require__(/*! ./remote */ \"(rsc)/./node_modules/selenium-webdriver/remote/index.js\")\nconst webdriver = __webpack_require__(/*! ./lib/webdriver */ \"(rsc)/./node_modules/selenium-webdriver/lib/webdriver.js\")\nconst zip = __webpack_require__(/*! ./io/zip */ \"(rsc)/./node_modules/selenium-webdriver/io/zip.js\")\nconst { Browser, Capabilities, Capability } = __webpack_require__(/*! ./lib/capabilities */ \"(rsc)/./node_modules/selenium-webdriver/lib/capabilities.js\")\nconst { Zip } = __webpack_require__(/*! ./io/zip */ \"(rsc)/./node_modules/selenium-webdriver/io/zip.js\")\nconst { getBinaryPaths } = __webpack_require__(/*! ./common/driverFinder */ \"(rsc)/./node_modules/selenium-webdriver/common/driverFinder.js\")\nconst FIREFOX_CAPABILITY_KEY = 'moz:firefoxOptions'\n\n/**\n * Thrown when there an add-on is malformed.\n * @final\n */\nclass AddonFormatError extends Error {\n  /** @param {string} msg The error message. */\n  constructor(msg) {\n    super(msg)\n    /** @override */\n    this.name = this.constructor.name\n  }\n}\n\n/**\n * Installs an extension to the given directory.\n * @param {string} extension Path to the xpi extension file to install.\n * @param {string} dir Path to the directory to install the extension in.\n * @return {!Promise<string>} A promise for the add-on ID once\n *     installed.\n */\nasync function installExtension(extension, dir) {\n  const ext = extension.slice(-4)\n  if (ext !== '.xpi' && ext !== '.zip') {\n    throw Error('File name does not end in \".zip\" or \".xpi\": ' + ext)\n  }\n\n  let archive = await zip.load(extension)\n  if (!archive.has('manifest.json')) {\n    throw new AddonFormatError(`Couldn't find manifest.json in ${extension}`)\n  }\n\n  let buf = await archive.getFile('manifest.json')\n  let parsedJSON = JSON.parse(buf.toString('utf8'))\n\n  let { browser_specific_settings } =\n    /** @type {{browser_specific_settings:{gecko:{id:string}}}} */\n    parsedJSON\n\n  if (browser_specific_settings && browser_specific_settings.gecko) {\n    /* browser_specific_settings is an alternative to applications\n     * It is meant to facilitate cross-browser plugins since Firefox48\n     * see https://bugzilla.mozilla.org/show_bug.cgi?id=1262005\n     */\n    parsedJSON.applications = browser_specific_settings\n  }\n\n  let { applications } =\n    /** @type {{applications:{gecko:{id:string}}}} */\n    parsedJSON\n  if (!(applications && applications.gecko && applications.gecko.id)) {\n    throw new AddonFormatError(`Could not find add-on ID for ${extension}`)\n  }\n\n  await io.copy(extension, `${path.join(dir, applications.gecko.id)}.xpi`)\n  return applications.gecko.id\n}\n\nclass Profile {\n  constructor() {\n    /** @private {?string} */\n    this.template_ = null\n\n    /** @private {!Array<string>} */\n    this.extensions_ = []\n  }\n\n  addExtensions(/** !Array<string> */ paths) {\n    this.extensions_ = this.extensions_.concat(...paths)\n  }\n\n  /**\n   * @return {(!Promise<string>|undefined)} a promise for a base64 encoded\n   *     profile, or undefined if there's no data to include.\n   */\n  [Symbols.serialize]() {\n    if (this.template_ || this.extensions_.length) {\n      return buildProfile(this.template_, this.extensions_)\n    }\n    return undefined\n  }\n}\n\n/**\n * @param {?string} template path to an existing profile to use as a template.\n * @param {!Array<string>} extensions paths to extensions to install in the new\n *     profile.\n * @return {!Promise<string>} a promise for the base64 encoded profile.\n */\nasync function buildProfile(template, extensions) {\n  let dir = template\n\n  if (extensions.length) {\n    dir = await io.tmpDir()\n    if (template) {\n      await io.copyDir(/** @type {string} */ (template), dir, /(parent\\.lock|lock|\\.parentlock)/)\n    }\n\n    const extensionsDir = path.join(dir, 'extensions')\n    await io.mkdir(extensionsDir)\n\n    for (let i = 0; i < extensions.length; i++) {\n      await installExtension(extensions[i], extensionsDir)\n    }\n  }\n\n  let zip = new Zip()\n  return zip\n    .addDir(dir)\n    .then(() => zip.toBuffer())\n    .then((buf) => buf.toString('base64'))\n}\n\n/**\n * Configuration options for the FirefoxDriver.\n */\nclass Options extends Capabilities {\n  /**\n   * @param {(Capabilities|Map<string, ?>|Object)=} other Another set of\n   *     capabilities to initialize this instance from.\n   */\n  constructor(other) {\n    super(other)\n    this.setBrowserName(Browser.FIREFOX)\n    // Firefox 129 onwards the CDP protocol will not be enabled by default. Setting this preference will enable it.\n    // https://fxdx.dev/deprecating-cdp-support-in-firefox-embracing-the-future-with-webdriver-bidi/.\n    this.setPreference('remote.active-protocols', 3)\n  }\n\n  /**\n   * @return {!Object}\n   * @private\n   */\n  firefoxOptions_() {\n    let options = this.get(FIREFOX_CAPABILITY_KEY)\n    if (!options) {\n      options = {}\n      this.set(FIREFOX_CAPABILITY_KEY, options)\n    }\n    return options\n  }\n\n  /**\n   * @return {!Profile}\n   * @private\n   */\n  profile_() {\n    let options = this.firefoxOptions_()\n    if (!options.profile) {\n      options.profile = new Profile()\n    }\n    return options.profile\n  }\n\n  /**\n   * Specify additional command line arguments that should be used when starting\n   * the Firefox browser.\n   *\n   * @param {...(string|!Array<string>)} args The arguments to include.\n   * @return {!Options} A self reference.\n   */\n  addArguments(...args) {\n    if (args.length) {\n      let options = this.firefoxOptions_()\n      options.args = options.args ? options.args.concat(...args) : args\n    }\n    return this\n  }\n\n  /**\n   * Sets the initial window size\n   *\n   * @param {{width: number, height: number}} size The desired window size.\n   * @return {!Options} A self reference.\n   * @throws {TypeError} if width or height is unspecified, not a number, or\n   *     less than or equal to 0.\n   */\n  windowSize({ width, height }) {\n    function checkArg(arg) {\n      if (typeof arg !== 'number' || arg <= 0) {\n        throw TypeError('Arguments must be {width, height} with numbers > 0')\n      }\n    }\n\n    checkArg(width)\n    checkArg(height)\n    return this.addArguments(`--width=${width}`, `--height=${height}`)\n  }\n\n  /**\n   * Add extensions that should be installed when starting Firefox.\n   *\n   * @param {...string} paths The paths to the extension XPI files to install.\n   * @return {!Options} A self reference.\n   */\n  addExtensions(...paths) {\n    this.profile_().addExtensions(paths)\n    return this\n  }\n\n  /**\n   * @param {string} key the preference key.\n   * @param {(string|number|boolean)} value the preference value.\n   * @return {!Options} A self reference.\n   * @throws {TypeError} if either the key or value has an invalid type.\n   */\n  setPreference(key, value) {\n    if (typeof key !== 'string') {\n      throw TypeError(`key must be a string, but got ${typeof key}`)\n    }\n    if (typeof value !== 'string' && typeof value !== 'number' && typeof value !== 'boolean') {\n      throw TypeError(`value must be a string, number, or boolean, but got ${typeof value}`)\n    }\n    let options = this.firefoxOptions_()\n    options.prefs = options.prefs || {}\n    options.prefs[key] = value\n    return this\n  }\n\n  /**\n   * Sets the path to an existing profile to use as a template for new browser\n   * sessions. This profile will be copied for each new session - changes will\n   * not be applied to the profile itself.\n   *\n   * @param {string} profile The profile to use.\n   * @return {!Options} A self reference.\n   * @throws {TypeError} if profile is not a string.\n   */\n  setProfile(profile) {\n    if (typeof profile !== 'string') {\n      throw TypeError(`profile must be a string, but got ${typeof profile}`)\n    }\n    this.profile_().template_ = profile\n    return this\n  }\n\n  /**\n   * Sets the binary to use. The binary may be specified as the path to a\n   * Firefox executable.\n   *\n   * @param {(string)} binary The binary to use.\n   * @return {!Options} A self reference.\n   * @throws {TypeError} If `binary` is an invalid type.\n   */\n  setBinary(binary) {\n    if (binary instanceof Channel || typeof binary === 'string') {\n      this.firefoxOptions_().binary = binary\n      return this\n    }\n    throw TypeError('binary must be a string path ')\n  }\n\n  /**\n   * Enables Mobile start up features\n   *\n   * @param {string} androidPackage The package to use\n   * @return {!Options} A self reference\n   */\n  enableMobile(androidPackage = 'org.mozilla.firefox', androidActivity = null, deviceSerial = null) {\n    this.firefoxOptions_().androidPackage = androidPackage\n\n    if (androidActivity) {\n      this.firefoxOptions_().androidActivity = androidActivity\n    }\n    if (deviceSerial) {\n      this.firefoxOptions_().deviceSerial = deviceSerial\n    }\n    return this\n  }\n\n  /**\n   * Enables moz:debuggerAddress for firefox cdp\n   */\n  enableDebugger() {\n    return this.set('moz:debuggerAddress', true)\n  }\n\n  /**\n   * Enable bidi connection\n   * @returns {!Capabilities}\n   */\n  enableBidi() {\n    return this.set('webSocketUrl', true)\n  }\n}\n\n/**\n * Enum of available command contexts.\n *\n * Command contexts are specific to Marionette, and may be used with the\n * {@link #context=} method. Contexts allow you to direct all subsequent\n * commands to either \"content\" (default) or \"chrome\". The latter gives\n * you elevated security permissions.\n *\n * @enum {string}\n */\nconst Context = {\n  CONTENT: 'content',\n  CHROME: 'chrome',\n}\n\n/**\n * @param {string} file Path to the file to find, relative to the program files\n *     root.\n * @return {!Promise<?string>} A promise for the located executable.\n *     The promise will resolve to {@code null} if Firefox was not found.\n */\nfunction findInProgramFiles(file) {\n  let files = [\n    process.env['PROGRAMFILES'] || 'C:\\\\Program Files',\n    process.env['PROGRAMFILES(X86)'] || 'C:\\\\Program Files (x86)',\n  ].map((prefix) => path.join(prefix, file))\n  return io.exists(files[0]).then(function (exists) {\n    return exists\n      ? files[0]\n      : io.exists(files[1]).then(function (exists) {\n          return exists ? files[1] : null\n        })\n  })\n}\n\n/** @enum {string} */\nconst ExtensionCommand = {\n  GET_CONTEXT: 'getContext',\n  SET_CONTEXT: 'setContext',\n  INSTALL_ADDON: 'install addon',\n  UNINSTALL_ADDON: 'uninstall addon',\n  FULL_PAGE_SCREENSHOT: 'fullPage screenshot',\n}\n\n/**\n * Creates a command executor with support for Marionette's custom commands.\n * @param {!Promise<string>} serverUrl The server's URL.\n * @return {!command.Executor} The new command executor.\n */\nfunction createExecutor(serverUrl) {\n  let client = serverUrl.then((url) => new http.HttpClient(url))\n  let executor = new http.Executor(client)\n  configureExecutor(executor)\n  return executor\n}\n\n/**\n * Configures the given executor with Firefox-specific commands.\n * @param {!http.Executor} executor the executor to configure.\n */\nfunction configureExecutor(executor) {\n  executor.defineCommand(ExtensionCommand.GET_CONTEXT, 'GET', '/session/:sessionId/moz/context')\n\n  executor.defineCommand(ExtensionCommand.SET_CONTEXT, 'POST', '/session/:sessionId/moz/context')\n\n  executor.defineCommand(ExtensionCommand.INSTALL_ADDON, 'POST', '/session/:sessionId/moz/addon/install')\n\n  executor.defineCommand(ExtensionCommand.UNINSTALL_ADDON, 'POST', '/session/:sessionId/moz/addon/uninstall')\n\n  executor.defineCommand(ExtensionCommand.FULL_PAGE_SCREENSHOT, 'GET', '/session/:sessionId/moz/screenshot/full')\n}\n\n/**\n * Creates {@link selenium-webdriver/remote.DriverService} instances that manage\n * a [geckodriver](https://github.com/mozilla/geckodriver) server in a child\n * process.\n */\nclass ServiceBuilder extends remote.DriverService.Builder {\n  /**\n   * @param {string=} opt_exe Path to the server executable to use. If omitted,\n   *     the builder will attempt to locate the geckodriver on the system PATH.\n   */\n  constructor(opt_exe) {\n    super(opt_exe)\n    this.setLoopback(true) // Required.\n  }\n\n  /**\n   * Enables verbose logging.\n   *\n   * @param {boolean=} opt_trace Whether to enable trace-level logging. By\n   *     default, only debug logging is enabled.\n   * @return {!ServiceBuilder} A self reference.\n   */\n  enableVerboseLogging(opt_trace) {\n    return this.addArguments(opt_trace ? '-vv' : '-v')\n  }\n}\n\n/**\n * A WebDriver client for Firefox.\n */\nclass Driver extends webdriver.WebDriver {\n  /**\n   * Creates a new Firefox session.\n   *\n   * @param {(Options|Capabilities|Object)=} opt_config The\n   *    configuration options for this driver, specified as either an\n   *    {@link Options} or {@link Capabilities}, or as a raw hash object.\n   * @param {(http.Executor|remote.DriverService)=} opt_executor Either a\n   *   pre-configured command executor to use for communicating with an\n   *   externally managed remote end (which is assumed to already be running),\n   *   or the `DriverService` to use to start the geckodriver in a child\n   *   process.\n   *\n   *   If an executor is provided, care should e taken not to use reuse it with\n   *   other clients as its internal command mappings will be updated to support\n   *   Firefox-specific commands.\n   *\n   *   _This parameter may only be used with Mozilla's GeckoDriver._\n   *\n   * @throws {Error} If a custom command executor is provided and the driver is\n   *     configured to use the legacy FirefoxDriver from the Selenium project.\n   * @return {!Driver} A new driver instance.\n   */\n  static createSession(opt_config, opt_executor) {\n    let caps = opt_config instanceof Capabilities ? opt_config : new Options(opt_config)\n\n    let firefoxBrowserPath = null\n\n    let executor\n    let onQuit\n\n    if (opt_executor instanceof http.Executor) {\n      executor = opt_executor\n      configureExecutor(executor)\n    } else if (opt_executor instanceof remote.DriverService) {\n      if (!opt_executor.getExecutable()) {\n        const { driverPath, browserPath } = getBinaryPaths(caps)\n        opt_executor.setExecutable(driverPath)\n        firefoxBrowserPath = browserPath\n      }\n      executor = createExecutor(opt_executor.start())\n      onQuit = () => opt_executor.kill()\n    } else {\n      let service = new ServiceBuilder().build()\n      if (!service.getExecutable()) {\n        const { driverPath, browserPath } = getBinaryPaths(caps)\n        service.setExecutable(driverPath)\n        firefoxBrowserPath = browserPath\n      }\n      executor = createExecutor(service.start())\n      onQuit = () => service.kill()\n    }\n\n    if (firefoxBrowserPath) {\n      const vendorOptions = caps.get(FIREFOX_CAPABILITY_KEY)\n      if (vendorOptions) {\n        vendorOptions['binary'] = firefoxBrowserPath\n        caps.set(FIREFOX_CAPABILITY_KEY, vendorOptions)\n      } else {\n        caps.set(FIREFOX_CAPABILITY_KEY, { binary: firefoxBrowserPath })\n      }\n      caps.delete(Capability.BROWSER_VERSION)\n    }\n\n    return /** @type {!Driver} */ (super.createSession(executor, caps, onQuit))\n  }\n\n  /**\n   * This function is a no-op as file detectors are not supported by this\n   * implementation.\n   * @override\n   */\n  setFileDetector() {}\n\n  /**\n   * Get the context that is currently in effect.\n   *\n   * @return {!Promise<Context>} Current context.\n   */\n  getContext() {\n    return this.execute(new command.Command(ExtensionCommand.GET_CONTEXT))\n  }\n\n  /**\n   * Changes target context for commands between chrome- and content.\n   *\n   * Changing the current context has a stateful impact on all subsequent\n   * commands. The {@link Context.CONTENT} context has normal web\n   * platform document permissions, as if you would evaluate arbitrary\n   * JavaScript. The {@link Context.CHROME} context gets elevated\n   * permissions that lets you manipulate the browser chrome itself,\n   * with full access to the XUL toolkit.\n   *\n   * Use your powers wisely.\n   *\n   * @param {!Promise<void>} ctx The context to switch to.\n   */\n  setContext(ctx) {\n    return this.execute(new command.Command(ExtensionCommand.SET_CONTEXT).setParameter('context', ctx))\n  }\n\n  /**\n   * Installs a new addon with the current session. This function will return an\n   * ID that may later be used to {@linkplain #uninstallAddon uninstall} the\n   * addon.\n   *\n   *\n   * @param {string} path Path on the local filesystem to the web extension to\n   *     install.\n   * @param {boolean} temporary Flag indicating whether the extension should be\n   *     installed temporarily - gets removed on restart\n   * @return {!Promise<string>} A promise that will resolve to an ID for the\n   *     newly installed addon.\n   * @see #uninstallAddon\n   */\n  async installAddon(path, temporary = false) {\n    let stats = fs.statSync(path)\n    let buf\n    if (stats.isDirectory()) {\n      let zip = new Zip()\n      await zip.addDir(path)\n      buf = await zip.toBuffer('DEFLATE')\n    } else {\n      buf = await io.read(path)\n    }\n    return this.execute(\n      new command.Command(ExtensionCommand.INSTALL_ADDON)\n        .setParameter('addon', buf.toString('base64'))\n        .setParameter('temporary', temporary),\n    )\n  }\n\n  /**\n   * Uninstalls an addon from the current browser session's profile.\n   *\n   * @param {(string|!Promise<string>)} id ID of the addon to uninstall.\n   * @return {!Promise} A promise that will resolve when the operation has\n   *     completed.\n   * @see #installAddon\n   */\n  async uninstallAddon(id) {\n    id = await Promise.resolve(id)\n    return this.execute(new command.Command(ExtensionCommand.UNINSTALL_ADDON).setParameter('id', id))\n  }\n\n  /**\n   * Take full page screenshot of the visible region\n   *\n   * @return {!Promise<string>} A promise that will be\n   *     resolved to the screenshot as a base-64 encoded PNG.\n   */\n  takeFullPageScreenshot() {\n    return this.execute(new command.Command(ExtensionCommand.FULL_PAGE_SCREENSHOT))\n  }\n}\n\n/**\n * Provides methods for locating the executable for a Firefox release channel\n * on Windows and MacOS. For other systems (i.e. Linux), Firefox will always\n * be located on the system PATH.\n * @deprecated Instead of using this class, you should configure the\n *    {@link Options} with the appropriate binary location or let Selenium\n *    Manager handle it for you.\n * @final\n */\nclass Channel {\n  /**\n   * @param {string} darwin The path to check when running on MacOS.\n   * @param {string} win32 The path to check when running on Windows.\n   */\n  constructor(darwin, win32) {\n    /** @private @const */ this.darwin_ = darwin\n    /** @private @const */ this.win32_ = win32\n    /** @private {Promise<string>} */\n    this.found_ = null\n  }\n\n  /**\n   * Attempts to locate the Firefox executable for this release channel. This\n   * will first check the default installation location for the channel before\n   * checking the user's PATH. The returned promise will be rejected if Firefox\n   * can not be found.\n   *\n   * @return {!Promise<string>} A promise for the location of the located\n   *     Firefox executable.\n   */\n  locate() {\n    if (this.found_) {\n      return this.found_\n    }\n\n    let found\n    switch (process.platform) {\n      case 'darwin':\n        found = io.exists(this.darwin_).then((exists) => (exists ? this.darwin_ : io.findInPath('firefox')))\n        break\n\n      case 'win32':\n        found = findInProgramFiles(this.win32_).then((found) => found || io.findInPath('firefox.exe'))\n        break\n\n      default:\n        found = Promise.resolve(io.findInPath('firefox'))\n        break\n    }\n\n    this.found_ = found.then((found) => {\n      if (found) {\n        // TODO: verify version info.\n        return found\n      }\n      throw Error('Could not locate Firefox on the current system')\n    })\n    return this.found_\n  }\n\n  /** @return {!Promise<string>} */\n  [Symbols.serialize]() {\n    return this.locate()\n  }\n}\n\n/**\n * Firefox's developer channel.\n * @const\n * @see <https://www.mozilla.org/en-US/firefox/channel/desktop/#developer>\n */\nChannel.DEV = new Channel(\n  '/Applications/Firefox Developer Edition.app/Contents/MacOS/firefox',\n  'Firefox Developer Edition\\\\firefox.exe',\n)\n\n/**\n * Firefox's beta channel. Note this is provided mainly for convenience as\n * the beta channel has the same installation location as the main release\n * channel.\n * @const\n * @see <https://www.mozilla.org/en-US/firefox/channel/desktop/#beta>\n */\nChannel.BETA = new Channel('/Applications/Firefox.app/Contents/MacOS/firefox', 'Mozilla Firefox\\\\firefox.exe')\n\n/**\n * Firefox's release channel.\n * @const\n * @see <https://www.mozilla.org/en-US/firefox/desktop/>\n */\nChannel.RELEASE = new Channel('/Applications/Firefox.app/Contents/MacOS/firefox', 'Mozilla Firefox\\\\firefox.exe')\n\n/**\n * Firefox's nightly release channel.\n * @const\n * @see <https://www.mozilla.org/en-US/firefox/channel/desktop/#nightly>\n */\nChannel.NIGHTLY = new Channel('/Applications/Firefox Nightly.app/Contents/MacOS/firefox', 'Nightly\\\\firefox.exe')\n\n// PUBLIC API\n\nmodule.exports = {\n  Channel,\n  Context,\n  Driver,\n  Options,\n  ServiceBuilder,\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc2VsZW5pdW0td2ViZHJpdmVyL2ZpcmVmb3guanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDhCQUE4Qiw2QkFBNkI7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLG9CQUFvQjtBQUN4QjtBQUNBO0FBQ0EsY0FBYyxTQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLG9CQUFvQjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWlFO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksY0FBYztBQUNsQjtBQUNBLGNBQWMsU0FBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLGVBQWU7QUFDN0Q7QUFDQTtBQUNBO0FBQ0EsY0FBYyxTQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRVk7O0FBRVosV0FBVyxtQkFBTyxDQUFDLHdCQUFTO0FBQzVCLGFBQWEsbUJBQU8sQ0FBQyw0QkFBVztBQUNoQyxnQkFBZ0IsbUJBQU8sQ0FBQyw2RUFBZTtBQUN2QyxnQkFBZ0IsbUJBQU8sQ0FBQyw2RUFBZTtBQUN2QyxhQUFhLG1CQUFPLENBQUMscUVBQVE7QUFDN0IsV0FBVyxtQkFBTyxDQUFDLGlFQUFNO0FBQ3pCLGVBQWUsbUJBQU8sQ0FBQyx5RUFBVTtBQUNqQyxrQkFBa0IsbUJBQU8sQ0FBQyxpRkFBaUI7QUFDM0MsWUFBWSxtQkFBTyxDQUFDLG1FQUFVO0FBQzlCLFFBQVEsb0NBQW9DLEVBQUUsbUJBQU8sQ0FBQyx1RkFBb0I7QUFDMUUsUUFBUSxNQUFNLEVBQUUsbUJBQU8sQ0FBQyxtRUFBVTtBQUNsQyxRQUFRLGlCQUFpQixFQUFFLG1CQUFPLENBQUMsNkZBQXVCO0FBQzFEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFFBQVE7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFlBQVksa0JBQWtCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpRUFBaUUsVUFBVTtBQUMzRTs7QUFFQTtBQUNBOztBQUVBLFFBQVEsNEJBQTRCO0FBQ3BDLGdCQUFnQiwyQkFBMkIsT0FBTyxjQUFjO0FBQ2hFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFFBQVEsZUFBZTtBQUN2QixnQkFBZ0IsY0FBYyxPQUFPLGNBQWM7QUFDbkQ7QUFDQTtBQUNBLCtEQUErRCxVQUFVO0FBQ3pFOztBQUVBLDhCQUE4QixzQ0FBc0M7QUFDcEU7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esa0JBQWtCLFNBQVM7QUFDM0I7O0FBRUEsa0JBQWtCLGdCQUFnQjtBQUNsQztBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGNBQWMsOEJBQThCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFdBQVcsU0FBUztBQUNwQixXQUFXLGdCQUFnQjtBQUMzQjtBQUNBLFlBQVksa0JBQWtCO0FBQzlCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsUUFBUTtBQUMxQzs7QUFFQTtBQUNBOztBQUVBLG9CQUFvQix1QkFBdUI7QUFDM0M7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSx1Q0FBdUM7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsNEJBQTRCO0FBQ3pDLGNBQWMsVUFBVTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsZ0NBQWdDO0FBQzlDLGNBQWMsVUFBVTtBQUN4QixjQUFjLFdBQVc7QUFDekI7QUFDQTtBQUNBLGVBQWUsZUFBZTtBQUM5QjtBQUNBO0FBQ0EsNENBQTRDLGVBQWU7QUFDM0Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esd0NBQXdDLE1BQU0sZUFBZSxPQUFPO0FBQ3BFOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsV0FBVztBQUN4QixjQUFjLFVBQVU7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLHlCQUF5QjtBQUN0QyxjQUFjLFVBQVU7QUFDeEIsY0FBYyxXQUFXO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RCxXQUFXO0FBQ2xFO0FBQ0E7QUFDQSw2RUFBNkUsYUFBYTtBQUMxRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixjQUFjLFVBQVU7QUFDeEIsY0FBYyxXQUFXO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBLDJEQUEyRCxlQUFlO0FBQzFFO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxVQUFVO0FBQ3ZCLGNBQWMsVUFBVTtBQUN4QixjQUFjLFdBQVc7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsY0FBYyxVQUFVO0FBQ3hCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLGlCQUFpQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBLFlBQVksbUJBQW1CO0FBQy9CLG9DQUFvQyxZQUFZO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsR0FBRztBQUNIOztBQUVBLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxrQkFBa0I7QUFDN0IsWUFBWSxtQkFBbUI7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsZ0JBQWdCO0FBQzNCO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsWUFBWSwrQ0FBK0M7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxVQUFVO0FBQ3ZCO0FBQ0EsY0FBYyxpQkFBaUI7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsZ0NBQWdDO0FBQzdDO0FBQ0EsU0FBUyxlQUFlLElBQUksbUJBQW1CO0FBQy9DLGFBQWEsdUNBQXVDO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLE9BQU87QUFDckI7QUFDQSxjQUFjLFNBQVM7QUFDdkI7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsZ0JBQWdCLDBCQUEwQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxnQkFBZ0IsMEJBQTBCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSLDJDQUEyQyw0QkFBNEI7QUFDdkU7QUFDQTtBQUNBOztBQUVBLHNCQUFzQixTQUFTO0FBQy9COztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLG1CQUFtQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQix1QkFBdUI7QUFDM0M7QUFDQSxzQkFBc0Isc0JBQXNCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLGdCQUFnQjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsbUNBQW1DLHNDQUFzQztBQUN6RTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQSxhQUFhLFNBQVM7QUFDdEI7QUFDQSxjQUFjLGtCQUFrQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsMkJBQTJCO0FBQ3hDLGNBQWMsVUFBVTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLGtCQUFrQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU8sZUFBZTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixpQkFBaUI7QUFDbkM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLGtCQUFrQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUEsZUFBZSxrQkFBa0I7QUFDakM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2dvb2dsZS1zaGVldHMtc2VsZW5pdW0tYXV0b21hdGlvbi8uL25vZGVfbW9kdWxlcy9zZWxlbml1bS13ZWJkcml2ZXIvZmlyZWZveC5qcz83OGUzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBTb2Z0d2FyZSBGcmVlZG9tIENvbnNlcnZhbmN5IChTRkMpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgU0ZDIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBEZWZpbmVzIHRoZSB7QGxpbmtwbGFpbiBEcml2ZXIgV2ViRHJpdmVyfSBjbGllbnQgZm9yIEZpcmVmb3guXG4gKiBCZWZvcmUgdXNpbmcgdGhpcyBtb2R1bGUsIHlvdSBtdXN0IGRvd25sb2FkIHRoZSBsYXRlc3RcbiAqIFtnZWNrb2RyaXZlciByZWxlYXNlXSBhbmQgZW5zdXJlIGl0IGNhbiBiZSBmb3VuZCBvbiB5b3VyIHN5c3RlbSBbUEFUSF0uXG4gKlxuICogRWFjaCBGaXJlZm94RHJpdmVyIGluc3RhbmNlIHdpbGwgYmUgY3JlYXRlZCB3aXRoIGFuIGFub255bW91cyBwcm9maWxlLFxuICogZW5zdXJpbmcgYnJvd3NlciBoaXN0b3J5cyBkbyBub3Qgc2hhcmUgc2Vzc2lvbiBkYXRhIChjb29raWVzLCBoaXN0b3J5LCBjYWNoZSxcbiAqIG9mZmxpbmUgc3RvcmFnZSwgZXRjLilcbiAqXG4gKiBfX0N1c3RvbWl6aW5nIHRoZSBGaXJlZm94IFByb2ZpbGVfX1xuICpcbiAqIFRoZSBwcm9maWxlIHVzZWQgZm9yIGVhY2ggV2ViRHJpdmVyIHNlc3Npb24gbWF5IGJlIGNvbmZpZ3VyZWQgdXNpbmcgdGhlXG4gKiB7QGxpbmtwbGFpbiBPcHRpb25zfSBjbGFzcy4gRm9yIGV4YW1wbGUsIHlvdSBtYXkgaW5zdGFsbCBhbiBleHRlbnNpb24sIGxpa2VcbiAqIEZpcmVidWc6XG4gKlxuICogICAgIGNvbnN0IHtCdWlsZGVyfSA9IHJlcXVpcmUoJ3NlbGVuaXVtLXdlYmRyaXZlcicpO1xuICogICAgIGNvbnN0IGZpcmVmb3ggPSByZXF1aXJlKCdzZWxlbml1bS13ZWJkcml2ZXIvZmlyZWZveCcpO1xuICpcbiAqICAgICBsZXQgb3B0aW9ucyA9IG5ldyBmaXJlZm94Lk9wdGlvbnMoKVxuICogICAgICAgICAuYWRkRXh0ZW5zaW9ucygnL3BhdGgvdG8vZmlyZWJ1Zy54cGknKVxuICogICAgICAgICAuc2V0UHJlZmVyZW5jZSgnZXh0ZW5zaW9ucy5maXJlYnVnLnNob3dDaHJvbWVFcnJvcnMnLCB0cnVlKTtcbiAqXG4gKiAgICAgbGV0IGRyaXZlciA9IG5ldyBCdWlsZGVyKClcbiAqICAgICAgICAgLmZvckJyb3dzZXIoJ2ZpcmVmb3gnKVxuICogICAgICAgICAuc2V0RmlyZWZveE9wdGlvbnMob3B0aW9ucylcbiAqICAgICAgICAgLmJ1aWxkKCk7XG4gKlxuICogVGhlIHtAbGlua3BsYWluIE9wdGlvbnN9IGNsYXNzIG1heSBhbHNvIGJlIHVzZWQgdG8gY29uZmlndXJlIFdlYkRyaXZlciBiYXNlZFxuICogb24gYSBwcmUtZXhpc3RpbmcgYnJvd3NlciBwcm9maWxlOlxuICpcbiAqICAgICBsZXQgcHJvZmlsZSA9ICcvdXNyL2xvY2FsL2hvbWUvYm9iLy5tb3ppbGxhL2ZpcmVmb3gvM2Znb2c3NWgudGVzdGluZyc7XG4gKiAgICAgbGV0IG9wdGlvbnMgPSBuZXcgZmlyZWZveC5PcHRpb25zKCkuc2V0UHJvZmlsZShwcm9maWxlKTtcbiAqXG4gKiBUaGUgRmlyZWZveERyaXZlciB3aWxsIF9uZXZlcl8gbW9kaWZ5IGEgcHJlLWV4aXN0aW5nIHByb2ZpbGU7IGluc3RlYWQgaXQgd2lsbFxuICogY3JlYXRlIGEgY29weSBmb3IgaXQgdG8gbW9kaWZ5LiBCeSBleHRlbnNpb24sIHRoZXJlIGFyZSBjZXJ0YWluIGJyb3dzZXJcbiAqIHByZWZlcmVuY2VzIHRoYXQgYXJlIHJlcXVpcmVkIGZvciBXZWJEcml2ZXIgdG8gZnVuY3Rpb24gcHJvcGVybHkgYW5kIHRoZXlcbiAqIHdpbGwgYWx3YXlzIGJlIG92ZXJ3cml0dGVuLlxuICpcbiAqIF9fVXNpbmcgYSBDdXN0b20gRmlyZWZveCBCaW5hcnlfX1xuICpcbiAqIE9uIFdpbmRvd3MgYW5kIE1hY09TLCB0aGUgRmlyZWZveERyaXZlciB3aWxsIHNlYXJjaCBmb3IgRmlyZWZveCBpbiBpdHNcbiAqIGRlZmF1bHQgaW5zdGFsbGF0aW9uIGxvY2F0aW9uOlxuICpcbiAqIC0gV2luZG93czogQzpcXFByb2dyYW0gRmlsZXMgYW5kIEM6XFxQcm9ncmFtIEZpbGVzICh4ODYpLlxuICogLSBNYWNPUzogL0FwcGxpY2F0aW9ucy9GaXJlZm94LmFwcFxuICpcbiAqIEZvciBMaW51eCwgRmlyZWZveCB3aWxsIGFsd2F5cyBiZSBsb2NhdGVkIG9uIHRoZSBQQVRIOiBgJCh3aGVyZSBmaXJlZm94KWAuXG4gKlxuICogWW91IGNhbiBwcm92aWRlIGEgY3VzdG9tIGxvY2F0aW9uIGZvciBGaXJlZm94IGJ5IHNldHRpbmcgdGhlIGJpbmFyeSBpbiB0aGVcbiAqIHtAbGluayBPcHRpb25zfTpzZXRCaW5hcnkgbWV0aG9kLlxuICpcbiAqICAgICBjb25zdCB7QnVpbGRlcn0gPSByZXF1aXJlKCdzZWxlbml1bS13ZWJkcml2ZXInKTtcbiAqICAgICBjb25zdCBmaXJlZm94ID0gcmVxdWlyZSgnc2VsZW5pdW0td2ViZHJpdmVyL2ZpcmVmb3gnKTtcbiAqXG4gKiAgICBsZXQgb3B0aW9ucyA9IG5ldyBmaXJlZm94Lk9wdGlvbnMoKVxuICogICAgICAgICAuc2V0QmluYXJ5KCcvbXkvZmlyZWZveC9pbnN0YWxsL2Rpci9maXJlZm94Jyk7XG4gKiAgICAgbGV0IGRyaXZlciA9IG5ldyBCdWlsZGVyKClcbiAqICAgICAgICAgLmZvckJyb3dzZXIoJ2ZpcmVmb3gnKVxuICogICAgICAgICAuc2V0RmlyZWZveE9wdGlvbnMob3B0aW9ucylcbiAqICAgICAgICAgLmJ1aWxkKCk7XG4gKlxuICogX19SZW1vdGUgVGVzdGluZ19fXG4gKlxuICogWW91IG1heSBjdXN0b21pemUgdGhlIEZpcmVmb3ggYmluYXJ5IGFuZCBwcm9maWxlIHdoZW4gcnVubmluZyBhZ2FpbnN0IGFcbiAqIHJlbW90ZSBTZWxlbml1bSBzZXJ2ZXIuIFlvdXIgY3VzdG9tIHByb2ZpbGUgd2lsbCBiZSBwYWNrYWdlZCBhcyBhIHppcCBhbmRcbiAqIHRyYW5zZmVycmVkIHRvIHRoZSByZW1vdGUgaG9zdCBmb3IgdXNlLiBUaGUgcHJvZmlsZSB3aWxsIGJlIHRyYW5zZmVycmVkXG4gKiBfb25jZSBmb3IgZWFjaCBuZXcgc2Vzc2lvbl8uIFRoZSBwZXJmb3JtYW5jZSBpbXBhY3Qgc2hvdWxkIGJlIG1pbmltYWwgaWZcbiAqIHlvdSd2ZSBvbmx5IGNvbmZpZ3VyZWQgYSBmZXcgZXh0cmEgYnJvd3NlciBwcmVmZXJlbmNlcy4gSWYgeW91IGhhdmUgYSBsYXJnZVxuICogcHJvZmlsZSB3aXRoIHNldmVyYWwgZXh0ZW5zaW9ucywgeW91IHNob3VsZCBjb25zaWRlciBpbnN0YWxsaW5nIGl0IG9uIHRoZVxuICogcmVtb3RlIGhvc3QgYW5kIGRlZmluaW5nIGl0cyBwYXRoIHZpYSB0aGUge0BsaW5rIE9wdGlvbnN9IGNsYXNzLiBDdXN0b21cbiAqIGJpbmFyaWVzIGFyZSBuZXZlciBjb3BpZWQgdG8gcmVtb3RlIG1hY2hpbmVzIGFuZCBtdXN0IGJlIHJlZmVyZW5jZWQgYnlcbiAqIGluc3RhbGxhdGlvbiBwYXRoLlxuICpcbiAqICAgICBjb25zdCB7QnVpbGRlcn0gPSByZXF1aXJlKCdzZWxlbml1bS13ZWJkcml2ZXInKTtcbiAqICAgICBjb25zdCBmaXJlZm94ID0gcmVxdWlyZSgnc2VsZW5pdW0td2ViZHJpdmVyL2ZpcmVmb3gnKTtcbiAqXG4gKiAgICAgbGV0IG9wdGlvbnMgPSBuZXcgZmlyZWZveC5PcHRpb25zKClcbiAqICAgICAgICAgLnNldFByb2ZpbGUoJy9wcm9maWxlL3BhdGgvb24vcmVtb3RlL2hvc3QnKVxuICogICAgICAgICAuc2V0QmluYXJ5KCcvaW5zdGFsbC9kaXIvb24vcmVtb3RlL2hvc3QvZmlyZWZveCcpO1xuICpcbiAqICAgICBsZXQgZHJpdmVyID0gbmV3IEJ1aWxkZXIoKVxuICogICAgICAgICAuZm9yQnJvd3NlcignZmlyZWZveCcpXG4gKiAgICAgICAgIC51c2luZ1NlcnZlcignaHR0cDovLzEyNy4wLjAuMTo0NDQ0L3dkL2h1YicpXG4gKiAgICAgICAgIC5zZXRGaXJlZm94T3B0aW9ucyhvcHRpb25zKVxuICogICAgICAgICAuYnVpbGQoKTtcbiAqXG4gKiBbZ2Vja29kcml2ZXIgcmVsZWFzZV06IGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL2dlY2tvZHJpdmVyL3JlbGVhc2VzL1xuICogW1BBVEhdOiBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1BBVEhfJTI4dmFyaWFibGUlMjlcbiAqXG4gKiBAbW9kdWxlIHNlbGVuaXVtLXdlYmRyaXZlci9maXJlZm94XG4gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IGZzID0gcmVxdWlyZSgnbm9kZTpmcycpXG5jb25zdCBwYXRoID0gcmVxdWlyZSgnbm9kZTpwYXRoJylcbmNvbnN0IFN5bWJvbHMgPSByZXF1aXJlKCcuL2xpYi9zeW1ib2xzJylcbmNvbnN0IGNvbW1hbmQgPSByZXF1aXJlKCcuL2xpYi9jb21tYW5kJylcbmNvbnN0IGh0dHAgPSByZXF1aXJlKCcuL2h0dHAnKVxuY29uc3QgaW8gPSByZXF1aXJlKCcuL2lvJylcbmNvbnN0IHJlbW90ZSA9IHJlcXVpcmUoJy4vcmVtb3RlJylcbmNvbnN0IHdlYmRyaXZlciA9IHJlcXVpcmUoJy4vbGliL3dlYmRyaXZlcicpXG5jb25zdCB6aXAgPSByZXF1aXJlKCcuL2lvL3ppcCcpXG5jb25zdCB7IEJyb3dzZXIsIENhcGFiaWxpdGllcywgQ2FwYWJpbGl0eSB9ID0gcmVxdWlyZSgnLi9saWIvY2FwYWJpbGl0aWVzJylcbmNvbnN0IHsgWmlwIH0gPSByZXF1aXJlKCcuL2lvL3ppcCcpXG5jb25zdCB7IGdldEJpbmFyeVBhdGhzIH0gPSByZXF1aXJlKCcuL2NvbW1vbi9kcml2ZXJGaW5kZXInKVxuY29uc3QgRklSRUZPWF9DQVBBQklMSVRZX0tFWSA9ICdtb3o6ZmlyZWZveE9wdGlvbnMnXG5cbi8qKlxuICogVGhyb3duIHdoZW4gdGhlcmUgYW4gYWRkLW9uIGlzIG1hbGZvcm1lZC5cbiAqIEBmaW5hbFxuICovXG5jbGFzcyBBZGRvbkZvcm1hdEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAvKiogQHBhcmFtIHtzdHJpbmd9IG1zZyBUaGUgZXJyb3IgbWVzc2FnZS4gKi9cbiAgY29uc3RydWN0b3IobXNnKSB7XG4gICAgc3VwZXIobXNnKVxuICAgIC8qKiBAb3ZlcnJpZGUgKi9cbiAgICB0aGlzLm5hbWUgPSB0aGlzLmNvbnN0cnVjdG9yLm5hbWVcbiAgfVxufVxuXG4vKipcbiAqIEluc3RhbGxzIGFuIGV4dGVuc2lvbiB0byB0aGUgZ2l2ZW4gZGlyZWN0b3J5LlxuICogQHBhcmFtIHtzdHJpbmd9IGV4dGVuc2lvbiBQYXRoIHRvIHRoZSB4cGkgZXh0ZW5zaW9uIGZpbGUgdG8gaW5zdGFsbC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXIgUGF0aCB0byB0aGUgZGlyZWN0b3J5IHRvIGluc3RhbGwgdGhlIGV4dGVuc2lvbiBpbi5cbiAqIEByZXR1cm4geyFQcm9taXNlPHN0cmluZz59IEEgcHJvbWlzZSBmb3IgdGhlIGFkZC1vbiBJRCBvbmNlXG4gKiAgICAgaW5zdGFsbGVkLlxuICovXG5hc3luYyBmdW5jdGlvbiBpbnN0YWxsRXh0ZW5zaW9uKGV4dGVuc2lvbiwgZGlyKSB7XG4gIGNvbnN0IGV4dCA9IGV4dGVuc2lvbi5zbGljZSgtNClcbiAgaWYgKGV4dCAhPT0gJy54cGknICYmIGV4dCAhPT0gJy56aXAnKSB7XG4gICAgdGhyb3cgRXJyb3IoJ0ZpbGUgbmFtZSBkb2VzIG5vdCBlbmQgaW4gXCIuemlwXCIgb3IgXCIueHBpXCI6ICcgKyBleHQpXG4gIH1cblxuICBsZXQgYXJjaGl2ZSA9IGF3YWl0IHppcC5sb2FkKGV4dGVuc2lvbilcbiAgaWYgKCFhcmNoaXZlLmhhcygnbWFuaWZlc3QuanNvbicpKSB7XG4gICAgdGhyb3cgbmV3IEFkZG9uRm9ybWF0RXJyb3IoYENvdWxkbid0IGZpbmQgbWFuaWZlc3QuanNvbiBpbiAke2V4dGVuc2lvbn1gKVxuICB9XG5cbiAgbGV0IGJ1ZiA9IGF3YWl0IGFyY2hpdmUuZ2V0RmlsZSgnbWFuaWZlc3QuanNvbicpXG4gIGxldCBwYXJzZWRKU09OID0gSlNPTi5wYXJzZShidWYudG9TdHJpbmcoJ3V0ZjgnKSlcblxuICBsZXQgeyBicm93c2VyX3NwZWNpZmljX3NldHRpbmdzIH0gPVxuICAgIC8qKiBAdHlwZSB7e2Jyb3dzZXJfc3BlY2lmaWNfc2V0dGluZ3M6e2dlY2tvOntpZDpzdHJpbmd9fX19ICovXG4gICAgcGFyc2VkSlNPTlxuXG4gIGlmIChicm93c2VyX3NwZWNpZmljX3NldHRpbmdzICYmIGJyb3dzZXJfc3BlY2lmaWNfc2V0dGluZ3MuZ2Vja28pIHtcbiAgICAvKiBicm93c2VyX3NwZWNpZmljX3NldHRpbmdzIGlzIGFuIGFsdGVybmF0aXZlIHRvIGFwcGxpY2F0aW9uc1xuICAgICAqIEl0IGlzIG1lYW50IHRvIGZhY2lsaXRhdGUgY3Jvc3MtYnJvd3NlciBwbHVnaW5zIHNpbmNlIEZpcmVmb3g0OFxuICAgICAqIHNlZSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xMjYyMDA1XG4gICAgICovXG4gICAgcGFyc2VkSlNPTi5hcHBsaWNhdGlvbnMgPSBicm93c2VyX3NwZWNpZmljX3NldHRpbmdzXG4gIH1cblxuICBsZXQgeyBhcHBsaWNhdGlvbnMgfSA9XG4gICAgLyoqIEB0eXBlIHt7YXBwbGljYXRpb25zOntnZWNrbzp7aWQ6c3RyaW5nfX19fSAqL1xuICAgIHBhcnNlZEpTT05cbiAgaWYgKCEoYXBwbGljYXRpb25zICYmIGFwcGxpY2F0aW9ucy5nZWNrbyAmJiBhcHBsaWNhdGlvbnMuZ2Vja28uaWQpKSB7XG4gICAgdGhyb3cgbmV3IEFkZG9uRm9ybWF0RXJyb3IoYENvdWxkIG5vdCBmaW5kIGFkZC1vbiBJRCBmb3IgJHtleHRlbnNpb259YClcbiAgfVxuXG4gIGF3YWl0IGlvLmNvcHkoZXh0ZW5zaW9uLCBgJHtwYXRoLmpvaW4oZGlyLCBhcHBsaWNhdGlvbnMuZ2Vja28uaWQpfS54cGlgKVxuICByZXR1cm4gYXBwbGljYXRpb25zLmdlY2tvLmlkXG59XG5cbmNsYXNzIFByb2ZpbGUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICAvKiogQHByaXZhdGUgez9zdHJpbmd9ICovXG4gICAgdGhpcy50ZW1wbGF0ZV8gPSBudWxsXG5cbiAgICAvKiogQHByaXZhdGUgeyFBcnJheTxzdHJpbmc+fSAqL1xuICAgIHRoaXMuZXh0ZW5zaW9uc18gPSBbXVxuICB9XG5cbiAgYWRkRXh0ZW5zaW9ucygvKiogIUFycmF5PHN0cmluZz4gKi8gcGF0aHMpIHtcbiAgICB0aGlzLmV4dGVuc2lvbnNfID0gdGhpcy5leHRlbnNpb25zXy5jb25jYXQoLi4ucGF0aHMpXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7KCFQcm9taXNlPHN0cmluZz58dW5kZWZpbmVkKX0gYSBwcm9taXNlIGZvciBhIGJhc2U2NCBlbmNvZGVkXG4gICAqICAgICBwcm9maWxlLCBvciB1bmRlZmluZWQgaWYgdGhlcmUncyBubyBkYXRhIHRvIGluY2x1ZGUuXG4gICAqL1xuICBbU3ltYm9scy5zZXJpYWxpemVdKCkge1xuICAgIGlmICh0aGlzLnRlbXBsYXRlXyB8fCB0aGlzLmV4dGVuc2lvbnNfLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGJ1aWxkUHJvZmlsZSh0aGlzLnRlbXBsYXRlXywgdGhpcy5leHRlbnNpb25zXylcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHs/c3RyaW5nfSB0ZW1wbGF0ZSBwYXRoIHRvIGFuIGV4aXN0aW5nIHByb2ZpbGUgdG8gdXNlIGFzIGEgdGVtcGxhdGUuXG4gKiBAcGFyYW0geyFBcnJheTxzdHJpbmc+fSBleHRlbnNpb25zIHBhdGhzIHRvIGV4dGVuc2lvbnMgdG8gaW5zdGFsbCBpbiB0aGUgbmV3XG4gKiAgICAgcHJvZmlsZS5cbiAqIEByZXR1cm4geyFQcm9taXNlPHN0cmluZz59IGEgcHJvbWlzZSBmb3IgdGhlIGJhc2U2NCBlbmNvZGVkIHByb2ZpbGUuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGJ1aWxkUHJvZmlsZSh0ZW1wbGF0ZSwgZXh0ZW5zaW9ucykge1xuICBsZXQgZGlyID0gdGVtcGxhdGVcblxuICBpZiAoZXh0ZW5zaW9ucy5sZW5ndGgpIHtcbiAgICBkaXIgPSBhd2FpdCBpby50bXBEaXIoKVxuICAgIGlmICh0ZW1wbGF0ZSkge1xuICAgICAgYXdhaXQgaW8uY29weURpcigvKiogQHR5cGUge3N0cmluZ30gKi8gKHRlbXBsYXRlKSwgZGlyLCAvKHBhcmVudFxcLmxvY2t8bG9ja3xcXC5wYXJlbnRsb2NrKS8pXG4gICAgfVxuXG4gICAgY29uc3QgZXh0ZW5zaW9uc0RpciA9IHBhdGguam9pbihkaXIsICdleHRlbnNpb25zJylcbiAgICBhd2FpdCBpby5ta2RpcihleHRlbnNpb25zRGlyKVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBleHRlbnNpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhd2FpdCBpbnN0YWxsRXh0ZW5zaW9uKGV4dGVuc2lvbnNbaV0sIGV4dGVuc2lvbnNEaXIpXG4gICAgfVxuICB9XG5cbiAgbGV0IHppcCA9IG5ldyBaaXAoKVxuICByZXR1cm4gemlwXG4gICAgLmFkZERpcihkaXIpXG4gICAgLnRoZW4oKCkgPT4gemlwLnRvQnVmZmVyKCkpXG4gICAgLnRoZW4oKGJ1ZikgPT4gYnVmLnRvU3RyaW5nKCdiYXNlNjQnKSlcbn1cblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHRoZSBGaXJlZm94RHJpdmVyLlxuICovXG5jbGFzcyBPcHRpb25zIGV4dGVuZHMgQ2FwYWJpbGl0aWVzIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7KENhcGFiaWxpdGllc3xNYXA8c3RyaW5nLCA/PnxPYmplY3QpPX0gb3RoZXIgQW5vdGhlciBzZXQgb2ZcbiAgICogICAgIGNhcGFiaWxpdGllcyB0byBpbml0aWFsaXplIHRoaXMgaW5zdGFuY2UgZnJvbS5cbiAgICovXG4gIGNvbnN0cnVjdG9yKG90aGVyKSB7XG4gICAgc3VwZXIob3RoZXIpXG4gICAgdGhpcy5zZXRCcm93c2VyTmFtZShCcm93c2VyLkZJUkVGT1gpXG4gICAgLy8gRmlyZWZveCAxMjkgb253YXJkcyB0aGUgQ0RQIHByb3RvY29sIHdpbGwgbm90IGJlIGVuYWJsZWQgYnkgZGVmYXVsdC4gU2V0dGluZyB0aGlzIHByZWZlcmVuY2Ugd2lsbCBlbmFibGUgaXQuXG4gICAgLy8gaHR0cHM6Ly9meGR4LmRldi9kZXByZWNhdGluZy1jZHAtc3VwcG9ydC1pbi1maXJlZm94LWVtYnJhY2luZy10aGUtZnV0dXJlLXdpdGgtd2ViZHJpdmVyLWJpZGkvLlxuICAgIHRoaXMuc2V0UHJlZmVyZW5jZSgncmVtb3RlLmFjdGl2ZS1wcm90b2NvbHMnLCAzKVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4geyFPYmplY3R9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmaXJlZm94T3B0aW9uc18oKSB7XG4gICAgbGV0IG9wdGlvbnMgPSB0aGlzLmdldChGSVJFRk9YX0NBUEFCSUxJVFlfS0VZKVxuICAgIGlmICghb3B0aW9ucykge1xuICAgICAgb3B0aW9ucyA9IHt9XG4gICAgICB0aGlzLnNldChGSVJFRk9YX0NBUEFCSUxJVFlfS0VZLCBvcHRpb25zKVxuICAgIH1cbiAgICByZXR1cm4gb3B0aW9uc1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4geyFQcm9maWxlfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcHJvZmlsZV8oKSB7XG4gICAgbGV0IG9wdGlvbnMgPSB0aGlzLmZpcmVmb3hPcHRpb25zXygpXG4gICAgaWYgKCFvcHRpb25zLnByb2ZpbGUpIHtcbiAgICAgIG9wdGlvbnMucHJvZmlsZSA9IG5ldyBQcm9maWxlKClcbiAgICB9XG4gICAgcmV0dXJuIG9wdGlvbnMucHJvZmlsZVxuICB9XG5cbiAgLyoqXG4gICAqIFNwZWNpZnkgYWRkaXRpb25hbCBjb21tYW5kIGxpbmUgYXJndW1lbnRzIHRoYXQgc2hvdWxkIGJlIHVzZWQgd2hlbiBzdGFydGluZ1xuICAgKiB0aGUgRmlyZWZveCBicm93c2VyLlxuICAgKlxuICAgKiBAcGFyYW0gey4uLihzdHJpbmd8IUFycmF5PHN0cmluZz4pfSBhcmdzIFRoZSBhcmd1bWVudHMgdG8gaW5jbHVkZS5cbiAgICogQHJldHVybiB7IU9wdGlvbnN9IEEgc2VsZiByZWZlcmVuY2UuXG4gICAqL1xuICBhZGRBcmd1bWVudHMoLi4uYXJncykge1xuICAgIGlmIChhcmdzLmxlbmd0aCkge1xuICAgICAgbGV0IG9wdGlvbnMgPSB0aGlzLmZpcmVmb3hPcHRpb25zXygpXG4gICAgICBvcHRpb25zLmFyZ3MgPSBvcHRpb25zLmFyZ3MgPyBvcHRpb25zLmFyZ3MuY29uY2F0KC4uLmFyZ3MpIDogYXJnc1xuICAgIH1cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGluaXRpYWwgd2luZG93IHNpemVcbiAgICpcbiAgICogQHBhcmFtIHt7d2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXJ9fSBzaXplIFRoZSBkZXNpcmVkIHdpbmRvdyBzaXplLlxuICAgKiBAcmV0dXJuIHshT3B0aW9uc30gQSBzZWxmIHJlZmVyZW5jZS5cbiAgICogQHRocm93cyB7VHlwZUVycm9yfSBpZiB3aWR0aCBvciBoZWlnaHQgaXMgdW5zcGVjaWZpZWQsIG5vdCBhIG51bWJlciwgb3JcbiAgICogICAgIGxlc3MgdGhhbiBvciBlcXVhbCB0byAwLlxuICAgKi9cbiAgd2luZG93U2l6ZSh7IHdpZHRoLCBoZWlnaHQgfSkge1xuICAgIGZ1bmN0aW9uIGNoZWNrQXJnKGFyZykge1xuICAgICAgaWYgKHR5cGVvZiBhcmcgIT09ICdudW1iZXInIHx8IGFyZyA8PSAwKSB7XG4gICAgICAgIHRocm93IFR5cGVFcnJvcignQXJndW1lbnRzIG11c3QgYmUge3dpZHRoLCBoZWlnaHR9IHdpdGggbnVtYmVycyA+IDAnKVxuICAgICAgfVxuICAgIH1cblxuICAgIGNoZWNrQXJnKHdpZHRoKVxuICAgIGNoZWNrQXJnKGhlaWdodClcbiAgICByZXR1cm4gdGhpcy5hZGRBcmd1bWVudHMoYC0td2lkdGg9JHt3aWR0aH1gLCBgLS1oZWlnaHQ9JHtoZWlnaHR9YClcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgZXh0ZW5zaW9ucyB0aGF0IHNob3VsZCBiZSBpbnN0YWxsZWQgd2hlbiBzdGFydGluZyBGaXJlZm94LlxuICAgKlxuICAgKiBAcGFyYW0gey4uLnN0cmluZ30gcGF0aHMgVGhlIHBhdGhzIHRvIHRoZSBleHRlbnNpb24gWFBJIGZpbGVzIHRvIGluc3RhbGwuXG4gICAqIEByZXR1cm4geyFPcHRpb25zfSBBIHNlbGYgcmVmZXJlbmNlLlxuICAgKi9cbiAgYWRkRXh0ZW5zaW9ucyguLi5wYXRocykge1xuICAgIHRoaXMucHJvZmlsZV8oKS5hZGRFeHRlbnNpb25zKHBhdGhzKVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSB0aGUgcHJlZmVyZW5jZSBrZXkuXG4gICAqIEBwYXJhbSB7KHN0cmluZ3xudW1iZXJ8Ym9vbGVhbil9IHZhbHVlIHRoZSBwcmVmZXJlbmNlIHZhbHVlLlxuICAgKiBAcmV0dXJuIHshT3B0aW9uc30gQSBzZWxmIHJlZmVyZW5jZS5cbiAgICogQHRocm93cyB7VHlwZUVycm9yfSBpZiBlaXRoZXIgdGhlIGtleSBvciB2YWx1ZSBoYXMgYW4gaW52YWxpZCB0eXBlLlxuICAgKi9cbiAgc2V0UHJlZmVyZW5jZShrZXksIHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiBrZXkgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoYGtleSBtdXN0IGJlIGEgc3RyaW5nLCBidXQgZ290ICR7dHlwZW9mIGtleX1gKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJyAmJiB0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoYHZhbHVlIG11c3QgYmUgYSBzdHJpbmcsIG51bWJlciwgb3IgYm9vbGVhbiwgYnV0IGdvdCAke3R5cGVvZiB2YWx1ZX1gKVxuICAgIH1cbiAgICBsZXQgb3B0aW9ucyA9IHRoaXMuZmlyZWZveE9wdGlvbnNfKClcbiAgICBvcHRpb25zLnByZWZzID0gb3B0aW9ucy5wcmVmcyB8fCB7fVxuICAgIG9wdGlvbnMucHJlZnNba2V5XSA9IHZhbHVlXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBwYXRoIHRvIGFuIGV4aXN0aW5nIHByb2ZpbGUgdG8gdXNlIGFzIGEgdGVtcGxhdGUgZm9yIG5ldyBicm93c2VyXG4gICAqIHNlc3Npb25zLiBUaGlzIHByb2ZpbGUgd2lsbCBiZSBjb3BpZWQgZm9yIGVhY2ggbmV3IHNlc3Npb24gLSBjaGFuZ2VzIHdpbGxcbiAgICogbm90IGJlIGFwcGxpZWQgdG8gdGhlIHByb2ZpbGUgaXRzZWxmLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvZmlsZSBUaGUgcHJvZmlsZSB0byB1c2UuXG4gICAqIEByZXR1cm4geyFPcHRpb25zfSBBIHNlbGYgcmVmZXJlbmNlLlxuICAgKiBAdGhyb3dzIHtUeXBlRXJyb3J9IGlmIHByb2ZpbGUgaXMgbm90IGEgc3RyaW5nLlxuICAgKi9cbiAgc2V0UHJvZmlsZShwcm9maWxlKSB7XG4gICAgaWYgKHR5cGVvZiBwcm9maWxlICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKGBwcm9maWxlIG11c3QgYmUgYSBzdHJpbmcsIGJ1dCBnb3QgJHt0eXBlb2YgcHJvZmlsZX1gKVxuICAgIH1cbiAgICB0aGlzLnByb2ZpbGVfKCkudGVtcGxhdGVfID0gcHJvZmlsZVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgYmluYXJ5IHRvIHVzZS4gVGhlIGJpbmFyeSBtYXkgYmUgc3BlY2lmaWVkIGFzIHRoZSBwYXRoIHRvIGFcbiAgICogRmlyZWZveCBleGVjdXRhYmxlLlxuICAgKlxuICAgKiBAcGFyYW0geyhzdHJpbmcpfSBiaW5hcnkgVGhlIGJpbmFyeSB0byB1c2UuXG4gICAqIEByZXR1cm4geyFPcHRpb25zfSBBIHNlbGYgcmVmZXJlbmNlLlxuICAgKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIGBiaW5hcnlgIGlzIGFuIGludmFsaWQgdHlwZS5cbiAgICovXG4gIHNldEJpbmFyeShiaW5hcnkpIHtcbiAgICBpZiAoYmluYXJ5IGluc3RhbmNlb2YgQ2hhbm5lbCB8fCB0eXBlb2YgYmluYXJ5ID09PSAnc3RyaW5nJykge1xuICAgICAgdGhpcy5maXJlZm94T3B0aW9uc18oKS5iaW5hcnkgPSBiaW5hcnlcbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuICAgIHRocm93IFR5cGVFcnJvcignYmluYXJ5IG11c3QgYmUgYSBzdHJpbmcgcGF0aCAnKVxuICB9XG5cbiAgLyoqXG4gICAqIEVuYWJsZXMgTW9iaWxlIHN0YXJ0IHVwIGZlYXR1cmVzXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBhbmRyb2lkUGFja2FnZSBUaGUgcGFja2FnZSB0byB1c2VcbiAgICogQHJldHVybiB7IU9wdGlvbnN9IEEgc2VsZiByZWZlcmVuY2VcbiAgICovXG4gIGVuYWJsZU1vYmlsZShhbmRyb2lkUGFja2FnZSA9ICdvcmcubW96aWxsYS5maXJlZm94JywgYW5kcm9pZEFjdGl2aXR5ID0gbnVsbCwgZGV2aWNlU2VyaWFsID0gbnVsbCkge1xuICAgIHRoaXMuZmlyZWZveE9wdGlvbnNfKCkuYW5kcm9pZFBhY2thZ2UgPSBhbmRyb2lkUGFja2FnZVxuXG4gICAgaWYgKGFuZHJvaWRBY3Rpdml0eSkge1xuICAgICAgdGhpcy5maXJlZm94T3B0aW9uc18oKS5hbmRyb2lkQWN0aXZpdHkgPSBhbmRyb2lkQWN0aXZpdHlcbiAgICB9XG4gICAgaWYgKGRldmljZVNlcmlhbCkge1xuICAgICAgdGhpcy5maXJlZm94T3B0aW9uc18oKS5kZXZpY2VTZXJpYWwgPSBkZXZpY2VTZXJpYWxcbiAgICB9XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBFbmFibGVzIG1vejpkZWJ1Z2dlckFkZHJlc3MgZm9yIGZpcmVmb3ggY2RwXG4gICAqL1xuICBlbmFibGVEZWJ1Z2dlcigpIHtcbiAgICByZXR1cm4gdGhpcy5zZXQoJ21vejpkZWJ1Z2dlckFkZHJlc3MnLCB0cnVlKVxuICB9XG5cbiAgLyoqXG4gICAqIEVuYWJsZSBiaWRpIGNvbm5lY3Rpb25cbiAgICogQHJldHVybnMgeyFDYXBhYmlsaXRpZXN9XG4gICAqL1xuICBlbmFibGVCaWRpKCkge1xuICAgIHJldHVybiB0aGlzLnNldCgnd2ViU29ja2V0VXJsJywgdHJ1ZSlcbiAgfVxufVxuXG4vKipcbiAqIEVudW0gb2YgYXZhaWxhYmxlIGNvbW1hbmQgY29udGV4dHMuXG4gKlxuICogQ29tbWFuZCBjb250ZXh0cyBhcmUgc3BlY2lmaWMgdG8gTWFyaW9uZXR0ZSwgYW5kIG1heSBiZSB1c2VkIHdpdGggdGhlXG4gKiB7QGxpbmsgI2NvbnRleHQ9fSBtZXRob2QuIENvbnRleHRzIGFsbG93IHlvdSB0byBkaXJlY3QgYWxsIHN1YnNlcXVlbnRcbiAqIGNvbW1hbmRzIHRvIGVpdGhlciBcImNvbnRlbnRcIiAoZGVmYXVsdCkgb3IgXCJjaHJvbWVcIi4gVGhlIGxhdHRlciBnaXZlc1xuICogeW91IGVsZXZhdGVkIHNlY3VyaXR5IHBlcm1pc3Npb25zLlxuICpcbiAqIEBlbnVtIHtzdHJpbmd9XG4gKi9cbmNvbnN0IENvbnRleHQgPSB7XG4gIENPTlRFTlQ6ICdjb250ZW50JyxcbiAgQ0hST01FOiAnY2hyb21lJyxcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gZmlsZSBQYXRoIHRvIHRoZSBmaWxlIHRvIGZpbmQsIHJlbGF0aXZlIHRvIHRoZSBwcm9ncmFtIGZpbGVzXG4gKiAgICAgcm9vdC5cbiAqIEByZXR1cm4geyFQcm9taXNlPD9zdHJpbmc+fSBBIHByb21pc2UgZm9yIHRoZSBsb2NhdGVkIGV4ZWN1dGFibGUuXG4gKiAgICAgVGhlIHByb21pc2Ugd2lsbCByZXNvbHZlIHRvIHtAY29kZSBudWxsfSBpZiBGaXJlZm94IHdhcyBub3QgZm91bmQuXG4gKi9cbmZ1bmN0aW9uIGZpbmRJblByb2dyYW1GaWxlcyhmaWxlKSB7XG4gIGxldCBmaWxlcyA9IFtcbiAgICBwcm9jZXNzLmVudlsnUFJPR1JBTUZJTEVTJ10gfHwgJ0M6XFxcXFByb2dyYW0gRmlsZXMnLFxuICAgIHByb2Nlc3MuZW52WydQUk9HUkFNRklMRVMoWDg2KSddIHx8ICdDOlxcXFxQcm9ncmFtIEZpbGVzICh4ODYpJyxcbiAgXS5tYXAoKHByZWZpeCkgPT4gcGF0aC5qb2luKHByZWZpeCwgZmlsZSkpXG4gIHJldHVybiBpby5leGlzdHMoZmlsZXNbMF0pLnRoZW4oZnVuY3Rpb24gKGV4aXN0cykge1xuICAgIHJldHVybiBleGlzdHNcbiAgICAgID8gZmlsZXNbMF1cbiAgICAgIDogaW8uZXhpc3RzKGZpbGVzWzFdKS50aGVuKGZ1bmN0aW9uIChleGlzdHMpIHtcbiAgICAgICAgICByZXR1cm4gZXhpc3RzID8gZmlsZXNbMV0gOiBudWxsXG4gICAgICAgIH0pXG4gIH0pXG59XG5cbi8qKiBAZW51bSB7c3RyaW5nfSAqL1xuY29uc3QgRXh0ZW5zaW9uQ29tbWFuZCA9IHtcbiAgR0VUX0NPTlRFWFQ6ICdnZXRDb250ZXh0JyxcbiAgU0VUX0NPTlRFWFQ6ICdzZXRDb250ZXh0JyxcbiAgSU5TVEFMTF9BRERPTjogJ2luc3RhbGwgYWRkb24nLFxuICBVTklOU1RBTExfQURET046ICd1bmluc3RhbGwgYWRkb24nLFxuICBGVUxMX1BBR0VfU0NSRUVOU0hPVDogJ2Z1bGxQYWdlIHNjcmVlbnNob3QnLFxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBjb21tYW5kIGV4ZWN1dG9yIHdpdGggc3VwcG9ydCBmb3IgTWFyaW9uZXR0ZSdzIGN1c3RvbSBjb21tYW5kcy5cbiAqIEBwYXJhbSB7IVByb21pc2U8c3RyaW5nPn0gc2VydmVyVXJsIFRoZSBzZXJ2ZXIncyBVUkwuXG4gKiBAcmV0dXJuIHshY29tbWFuZC5FeGVjdXRvcn0gVGhlIG5ldyBjb21tYW5kIGV4ZWN1dG9yLlxuICovXG5mdW5jdGlvbiBjcmVhdGVFeGVjdXRvcihzZXJ2ZXJVcmwpIHtcbiAgbGV0IGNsaWVudCA9IHNlcnZlclVybC50aGVuKCh1cmwpID0+IG5ldyBodHRwLkh0dHBDbGllbnQodXJsKSlcbiAgbGV0IGV4ZWN1dG9yID0gbmV3IGh0dHAuRXhlY3V0b3IoY2xpZW50KVxuICBjb25maWd1cmVFeGVjdXRvcihleGVjdXRvcilcbiAgcmV0dXJuIGV4ZWN1dG9yXG59XG5cbi8qKlxuICogQ29uZmlndXJlcyB0aGUgZ2l2ZW4gZXhlY3V0b3Igd2l0aCBGaXJlZm94LXNwZWNpZmljIGNvbW1hbmRzLlxuICogQHBhcmFtIHshaHR0cC5FeGVjdXRvcn0gZXhlY3V0b3IgdGhlIGV4ZWN1dG9yIHRvIGNvbmZpZ3VyZS5cbiAqL1xuZnVuY3Rpb24gY29uZmlndXJlRXhlY3V0b3IoZXhlY3V0b3IpIHtcbiAgZXhlY3V0b3IuZGVmaW5lQ29tbWFuZChFeHRlbnNpb25Db21tYW5kLkdFVF9DT05URVhULCAnR0VUJywgJy9zZXNzaW9uLzpzZXNzaW9uSWQvbW96L2NvbnRleHQnKVxuXG4gIGV4ZWN1dG9yLmRlZmluZUNvbW1hbmQoRXh0ZW5zaW9uQ29tbWFuZC5TRVRfQ09OVEVYVCwgJ1BPU1QnLCAnL3Nlc3Npb24vOnNlc3Npb25JZC9tb3ovY29udGV4dCcpXG5cbiAgZXhlY3V0b3IuZGVmaW5lQ29tbWFuZChFeHRlbnNpb25Db21tYW5kLklOU1RBTExfQURET04sICdQT1NUJywgJy9zZXNzaW9uLzpzZXNzaW9uSWQvbW96L2FkZG9uL2luc3RhbGwnKVxuXG4gIGV4ZWN1dG9yLmRlZmluZUNvbW1hbmQoRXh0ZW5zaW9uQ29tbWFuZC5VTklOU1RBTExfQURET04sICdQT1NUJywgJy9zZXNzaW9uLzpzZXNzaW9uSWQvbW96L2FkZG9uL3VuaW5zdGFsbCcpXG5cbiAgZXhlY3V0b3IuZGVmaW5lQ29tbWFuZChFeHRlbnNpb25Db21tYW5kLkZVTExfUEFHRV9TQ1JFRU5TSE9ULCAnR0VUJywgJy9zZXNzaW9uLzpzZXNzaW9uSWQvbW96L3NjcmVlbnNob3QvZnVsbCcpXG59XG5cbi8qKlxuICogQ3JlYXRlcyB7QGxpbmsgc2VsZW5pdW0td2ViZHJpdmVyL3JlbW90ZS5Ecml2ZXJTZXJ2aWNlfSBpbnN0YW5jZXMgdGhhdCBtYW5hZ2VcbiAqIGEgW2dlY2tvZHJpdmVyXShodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9nZWNrb2RyaXZlcikgc2VydmVyIGluIGEgY2hpbGRcbiAqIHByb2Nlc3MuXG4gKi9cbmNsYXNzIFNlcnZpY2VCdWlsZGVyIGV4dGVuZHMgcmVtb3RlLkRyaXZlclNlcnZpY2UuQnVpbGRlciB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG9wdF9leGUgUGF0aCB0byB0aGUgc2VydmVyIGV4ZWN1dGFibGUgdG8gdXNlLiBJZiBvbWl0dGVkLFxuICAgKiAgICAgdGhlIGJ1aWxkZXIgd2lsbCBhdHRlbXB0IHRvIGxvY2F0ZSB0aGUgZ2Vja29kcml2ZXIgb24gdGhlIHN5c3RlbSBQQVRILlxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0X2V4ZSkge1xuICAgIHN1cGVyKG9wdF9leGUpXG4gICAgdGhpcy5zZXRMb29wYmFjayh0cnVlKSAvLyBSZXF1aXJlZC5cbiAgfVxuXG4gIC8qKlxuICAgKiBFbmFibGVzIHZlcmJvc2UgbG9nZ2luZy5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFuPX0gb3B0X3RyYWNlIFdoZXRoZXIgdG8gZW5hYmxlIHRyYWNlLWxldmVsIGxvZ2dpbmcuIEJ5XG4gICAqICAgICBkZWZhdWx0LCBvbmx5IGRlYnVnIGxvZ2dpbmcgaXMgZW5hYmxlZC5cbiAgICogQHJldHVybiB7IVNlcnZpY2VCdWlsZGVyfSBBIHNlbGYgcmVmZXJlbmNlLlxuICAgKi9cbiAgZW5hYmxlVmVyYm9zZUxvZ2dpbmcob3B0X3RyYWNlKSB7XG4gICAgcmV0dXJuIHRoaXMuYWRkQXJndW1lbnRzKG9wdF90cmFjZSA/ICctdnYnIDogJy12JylcbiAgfVxufVxuXG4vKipcbiAqIEEgV2ViRHJpdmVyIGNsaWVudCBmb3IgRmlyZWZveC5cbiAqL1xuY2xhc3MgRHJpdmVyIGV4dGVuZHMgd2ViZHJpdmVyLldlYkRyaXZlciB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IEZpcmVmb3ggc2Vzc2lvbi5cbiAgICpcbiAgICogQHBhcmFtIHsoT3B0aW9uc3xDYXBhYmlsaXRpZXN8T2JqZWN0KT19IG9wdF9jb25maWcgVGhlXG4gICAqICAgIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhpcyBkcml2ZXIsIHNwZWNpZmllZCBhcyBlaXRoZXIgYW5cbiAgICogICAge0BsaW5rIE9wdGlvbnN9IG9yIHtAbGluayBDYXBhYmlsaXRpZXN9LCBvciBhcyBhIHJhdyBoYXNoIG9iamVjdC5cbiAgICogQHBhcmFtIHsoaHR0cC5FeGVjdXRvcnxyZW1vdGUuRHJpdmVyU2VydmljZSk9fSBvcHRfZXhlY3V0b3IgRWl0aGVyIGFcbiAgICogICBwcmUtY29uZmlndXJlZCBjb21tYW5kIGV4ZWN1dG9yIHRvIHVzZSBmb3IgY29tbXVuaWNhdGluZyB3aXRoIGFuXG4gICAqICAgZXh0ZXJuYWxseSBtYW5hZ2VkIHJlbW90ZSBlbmQgKHdoaWNoIGlzIGFzc3VtZWQgdG8gYWxyZWFkeSBiZSBydW5uaW5nKSxcbiAgICogICBvciB0aGUgYERyaXZlclNlcnZpY2VgIHRvIHVzZSB0byBzdGFydCB0aGUgZ2Vja29kcml2ZXIgaW4gYSBjaGlsZFxuICAgKiAgIHByb2Nlc3MuXG4gICAqXG4gICAqICAgSWYgYW4gZXhlY3V0b3IgaXMgcHJvdmlkZWQsIGNhcmUgc2hvdWxkIGUgdGFrZW4gbm90IHRvIHVzZSByZXVzZSBpdCB3aXRoXG4gICAqICAgb3RoZXIgY2xpZW50cyBhcyBpdHMgaW50ZXJuYWwgY29tbWFuZCBtYXBwaW5ncyB3aWxsIGJlIHVwZGF0ZWQgdG8gc3VwcG9ydFxuICAgKiAgIEZpcmVmb3gtc3BlY2lmaWMgY29tbWFuZHMuXG4gICAqXG4gICAqICAgX1RoaXMgcGFyYW1ldGVyIG1heSBvbmx5IGJlIHVzZWQgd2l0aCBNb3ppbGxhJ3MgR2Vja29Ecml2ZXIuX1xuICAgKlxuICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgYSBjdXN0b20gY29tbWFuZCBleGVjdXRvciBpcyBwcm92aWRlZCBhbmQgdGhlIGRyaXZlciBpc1xuICAgKiAgICAgY29uZmlndXJlZCB0byB1c2UgdGhlIGxlZ2FjeSBGaXJlZm94RHJpdmVyIGZyb20gdGhlIFNlbGVuaXVtIHByb2plY3QuXG4gICAqIEByZXR1cm4geyFEcml2ZXJ9IEEgbmV3IGRyaXZlciBpbnN0YW5jZS5cbiAgICovXG4gIHN0YXRpYyBjcmVhdGVTZXNzaW9uKG9wdF9jb25maWcsIG9wdF9leGVjdXRvcikge1xuICAgIGxldCBjYXBzID0gb3B0X2NvbmZpZyBpbnN0YW5jZW9mIENhcGFiaWxpdGllcyA/IG9wdF9jb25maWcgOiBuZXcgT3B0aW9ucyhvcHRfY29uZmlnKVxuXG4gICAgbGV0IGZpcmVmb3hCcm93c2VyUGF0aCA9IG51bGxcblxuICAgIGxldCBleGVjdXRvclxuICAgIGxldCBvblF1aXRcblxuICAgIGlmIChvcHRfZXhlY3V0b3IgaW5zdGFuY2VvZiBodHRwLkV4ZWN1dG9yKSB7XG4gICAgICBleGVjdXRvciA9IG9wdF9leGVjdXRvclxuICAgICAgY29uZmlndXJlRXhlY3V0b3IoZXhlY3V0b3IpXG4gICAgfSBlbHNlIGlmIChvcHRfZXhlY3V0b3IgaW5zdGFuY2VvZiByZW1vdGUuRHJpdmVyU2VydmljZSkge1xuICAgICAgaWYgKCFvcHRfZXhlY3V0b3IuZ2V0RXhlY3V0YWJsZSgpKSB7XG4gICAgICAgIGNvbnN0IHsgZHJpdmVyUGF0aCwgYnJvd3NlclBhdGggfSA9IGdldEJpbmFyeVBhdGhzKGNhcHMpXG4gICAgICAgIG9wdF9leGVjdXRvci5zZXRFeGVjdXRhYmxlKGRyaXZlclBhdGgpXG4gICAgICAgIGZpcmVmb3hCcm93c2VyUGF0aCA9IGJyb3dzZXJQYXRoXG4gICAgICB9XG4gICAgICBleGVjdXRvciA9IGNyZWF0ZUV4ZWN1dG9yKG9wdF9leGVjdXRvci5zdGFydCgpKVxuICAgICAgb25RdWl0ID0gKCkgPT4gb3B0X2V4ZWN1dG9yLmtpbGwoKVxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgc2VydmljZSA9IG5ldyBTZXJ2aWNlQnVpbGRlcigpLmJ1aWxkKClcbiAgICAgIGlmICghc2VydmljZS5nZXRFeGVjdXRhYmxlKCkpIHtcbiAgICAgICAgY29uc3QgeyBkcml2ZXJQYXRoLCBicm93c2VyUGF0aCB9ID0gZ2V0QmluYXJ5UGF0aHMoY2FwcylcbiAgICAgICAgc2VydmljZS5zZXRFeGVjdXRhYmxlKGRyaXZlclBhdGgpXG4gICAgICAgIGZpcmVmb3hCcm93c2VyUGF0aCA9IGJyb3dzZXJQYXRoXG4gICAgICB9XG4gICAgICBleGVjdXRvciA9IGNyZWF0ZUV4ZWN1dG9yKHNlcnZpY2Uuc3RhcnQoKSlcbiAgICAgIG9uUXVpdCA9ICgpID0+IHNlcnZpY2Uua2lsbCgpXG4gICAgfVxuXG4gICAgaWYgKGZpcmVmb3hCcm93c2VyUGF0aCkge1xuICAgICAgY29uc3QgdmVuZG9yT3B0aW9ucyA9IGNhcHMuZ2V0KEZJUkVGT1hfQ0FQQUJJTElUWV9LRVkpXG4gICAgICBpZiAodmVuZG9yT3B0aW9ucykge1xuICAgICAgICB2ZW5kb3JPcHRpb25zWydiaW5hcnknXSA9IGZpcmVmb3hCcm93c2VyUGF0aFxuICAgICAgICBjYXBzLnNldChGSVJFRk9YX0NBUEFCSUxJVFlfS0VZLCB2ZW5kb3JPcHRpb25zKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2Fwcy5zZXQoRklSRUZPWF9DQVBBQklMSVRZX0tFWSwgeyBiaW5hcnk6IGZpcmVmb3hCcm93c2VyUGF0aCB9KVxuICAgICAgfVxuICAgICAgY2Fwcy5kZWxldGUoQ2FwYWJpbGl0eS5CUk9XU0VSX1ZFUlNJT04pXG4gICAgfVxuXG4gICAgcmV0dXJuIC8qKiBAdHlwZSB7IURyaXZlcn0gKi8gKHN1cGVyLmNyZWF0ZVNlc3Npb24oZXhlY3V0b3IsIGNhcHMsIG9uUXVpdCkpXG4gIH1cblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiBpcyBhIG5vLW9wIGFzIGZpbGUgZGV0ZWN0b3JzIGFyZSBub3Qgc3VwcG9ydGVkIGJ5IHRoaXNcbiAgICogaW1wbGVtZW50YXRpb24uXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc2V0RmlsZURldGVjdG9yKCkge31cblxuICAvKipcbiAgICogR2V0IHRoZSBjb250ZXh0IHRoYXQgaXMgY3VycmVudGx5IGluIGVmZmVjdC5cbiAgICpcbiAgICogQHJldHVybiB7IVByb21pc2U8Q29udGV4dD59IEN1cnJlbnQgY29udGV4dC5cbiAgICovXG4gIGdldENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZXhlY3V0ZShuZXcgY29tbWFuZC5Db21tYW5kKEV4dGVuc2lvbkNvbW1hbmQuR0VUX0NPTlRFWFQpKVxuICB9XG5cbiAgLyoqXG4gICAqIENoYW5nZXMgdGFyZ2V0IGNvbnRleHQgZm9yIGNvbW1hbmRzIGJldHdlZW4gY2hyb21lLSBhbmQgY29udGVudC5cbiAgICpcbiAgICogQ2hhbmdpbmcgdGhlIGN1cnJlbnQgY29udGV4dCBoYXMgYSBzdGF0ZWZ1bCBpbXBhY3Qgb24gYWxsIHN1YnNlcXVlbnRcbiAgICogY29tbWFuZHMuIFRoZSB7QGxpbmsgQ29udGV4dC5DT05URU5UfSBjb250ZXh0IGhhcyBub3JtYWwgd2ViXG4gICAqIHBsYXRmb3JtIGRvY3VtZW50IHBlcm1pc3Npb25zLCBhcyBpZiB5b3Ugd291bGQgZXZhbHVhdGUgYXJiaXRyYXJ5XG4gICAqIEphdmFTY3JpcHQuIFRoZSB7QGxpbmsgQ29udGV4dC5DSFJPTUV9IGNvbnRleHQgZ2V0cyBlbGV2YXRlZFxuICAgKiBwZXJtaXNzaW9ucyB0aGF0IGxldHMgeW91IG1hbmlwdWxhdGUgdGhlIGJyb3dzZXIgY2hyb21lIGl0c2VsZixcbiAgICogd2l0aCBmdWxsIGFjY2VzcyB0byB0aGUgWFVMIHRvb2xraXQuXG4gICAqXG4gICAqIFVzZSB5b3VyIHBvd2VycyB3aXNlbHkuXG4gICAqXG4gICAqIEBwYXJhbSB7IVByb21pc2U8dm9pZD59IGN0eCBUaGUgY29udGV4dCB0byBzd2l0Y2ggdG8uXG4gICAqL1xuICBzZXRDb250ZXh0KGN0eCkge1xuICAgIHJldHVybiB0aGlzLmV4ZWN1dGUobmV3IGNvbW1hbmQuQ29tbWFuZChFeHRlbnNpb25Db21tYW5kLlNFVF9DT05URVhUKS5zZXRQYXJhbWV0ZXIoJ2NvbnRleHQnLCBjdHgpKVxuICB9XG5cbiAgLyoqXG4gICAqIEluc3RhbGxzIGEgbmV3IGFkZG9uIHdpdGggdGhlIGN1cnJlbnQgc2Vzc2lvbi4gVGhpcyBmdW5jdGlvbiB3aWxsIHJldHVybiBhblxuICAgKiBJRCB0aGF0IG1heSBsYXRlciBiZSB1c2VkIHRvIHtAbGlua3BsYWluICN1bmluc3RhbGxBZGRvbiB1bmluc3RhbGx9IHRoZVxuICAgKiBhZGRvbi5cbiAgICpcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggUGF0aCBvbiB0aGUgbG9jYWwgZmlsZXN5c3RlbSB0byB0aGUgd2ViIGV4dGVuc2lvbiB0b1xuICAgKiAgICAgaW5zdGFsbC5cbiAgICogQHBhcmFtIHtib29sZWFufSB0ZW1wb3JhcnkgRmxhZyBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIGV4dGVuc2lvbiBzaG91bGQgYmVcbiAgICogICAgIGluc3RhbGxlZCB0ZW1wb3JhcmlseSAtIGdldHMgcmVtb3ZlZCBvbiByZXN0YXJ0XG4gICAqIEByZXR1cm4geyFQcm9taXNlPHN0cmluZz59IEEgcHJvbWlzZSB0aGF0IHdpbGwgcmVzb2x2ZSB0byBhbiBJRCBmb3IgdGhlXG4gICAqICAgICBuZXdseSBpbnN0YWxsZWQgYWRkb24uXG4gICAqIEBzZWUgI3VuaW5zdGFsbEFkZG9uXG4gICAqL1xuICBhc3luYyBpbnN0YWxsQWRkb24ocGF0aCwgdGVtcG9yYXJ5ID0gZmFsc2UpIHtcbiAgICBsZXQgc3RhdHMgPSBmcy5zdGF0U3luYyhwYXRoKVxuICAgIGxldCBidWZcbiAgICBpZiAoc3RhdHMuaXNEaXJlY3RvcnkoKSkge1xuICAgICAgbGV0IHppcCA9IG5ldyBaaXAoKVxuICAgICAgYXdhaXQgemlwLmFkZERpcihwYXRoKVxuICAgICAgYnVmID0gYXdhaXQgemlwLnRvQnVmZmVyKCdERUZMQVRFJylcbiAgICB9IGVsc2Uge1xuICAgICAgYnVmID0gYXdhaXQgaW8ucmVhZChwYXRoKVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5leGVjdXRlKFxuICAgICAgbmV3IGNvbW1hbmQuQ29tbWFuZChFeHRlbnNpb25Db21tYW5kLklOU1RBTExfQURET04pXG4gICAgICAgIC5zZXRQYXJhbWV0ZXIoJ2FkZG9uJywgYnVmLnRvU3RyaW5nKCdiYXNlNjQnKSlcbiAgICAgICAgLnNldFBhcmFtZXRlcigndGVtcG9yYXJ5JywgdGVtcG9yYXJ5KSxcbiAgICApXG4gIH1cblxuICAvKipcbiAgICogVW5pbnN0YWxscyBhbiBhZGRvbiBmcm9tIHRoZSBjdXJyZW50IGJyb3dzZXIgc2Vzc2lvbidzIHByb2ZpbGUuXG4gICAqXG4gICAqIEBwYXJhbSB7KHN0cmluZ3whUHJvbWlzZTxzdHJpbmc+KX0gaWQgSUQgb2YgdGhlIGFkZG9uIHRvIHVuaW5zdGFsbC5cbiAgICogQHJldHVybiB7IVByb21pc2V9IEEgcHJvbWlzZSB0aGF0IHdpbGwgcmVzb2x2ZSB3aGVuIHRoZSBvcGVyYXRpb24gaGFzXG4gICAqICAgICBjb21wbGV0ZWQuXG4gICAqIEBzZWUgI2luc3RhbGxBZGRvblxuICAgKi9cbiAgYXN5bmMgdW5pbnN0YWxsQWRkb24oaWQpIHtcbiAgICBpZCA9IGF3YWl0IFByb21pc2UucmVzb2x2ZShpZClcbiAgICByZXR1cm4gdGhpcy5leGVjdXRlKG5ldyBjb21tYW5kLkNvbW1hbmQoRXh0ZW5zaW9uQ29tbWFuZC5VTklOU1RBTExfQURET04pLnNldFBhcmFtZXRlcignaWQnLCBpZCkpXG4gIH1cblxuICAvKipcbiAgICogVGFrZSBmdWxsIHBhZ2Ugc2NyZWVuc2hvdCBvZiB0aGUgdmlzaWJsZSByZWdpb25cbiAgICpcbiAgICogQHJldHVybiB7IVByb21pc2U8c3RyaW5nPn0gQSBwcm9taXNlIHRoYXQgd2lsbCBiZVxuICAgKiAgICAgcmVzb2x2ZWQgdG8gdGhlIHNjcmVlbnNob3QgYXMgYSBiYXNlLTY0IGVuY29kZWQgUE5HLlxuICAgKi9cbiAgdGFrZUZ1bGxQYWdlU2NyZWVuc2hvdCgpIHtcbiAgICByZXR1cm4gdGhpcy5leGVjdXRlKG5ldyBjb21tYW5kLkNvbW1hbmQoRXh0ZW5zaW9uQ29tbWFuZC5GVUxMX1BBR0VfU0NSRUVOU0hPVCkpXG4gIH1cbn1cblxuLyoqXG4gKiBQcm92aWRlcyBtZXRob2RzIGZvciBsb2NhdGluZyB0aGUgZXhlY3V0YWJsZSBmb3IgYSBGaXJlZm94IHJlbGVhc2UgY2hhbm5lbFxuICogb24gV2luZG93cyBhbmQgTWFjT1MuIEZvciBvdGhlciBzeXN0ZW1zIChpLmUuIExpbnV4KSwgRmlyZWZveCB3aWxsIGFsd2F5c1xuICogYmUgbG9jYXRlZCBvbiB0aGUgc3lzdGVtIFBBVEguXG4gKiBAZGVwcmVjYXRlZCBJbnN0ZWFkIG9mIHVzaW5nIHRoaXMgY2xhc3MsIHlvdSBzaG91bGQgY29uZmlndXJlIHRoZVxuICogICAge0BsaW5rIE9wdGlvbnN9IHdpdGggdGhlIGFwcHJvcHJpYXRlIGJpbmFyeSBsb2NhdGlvbiBvciBsZXQgU2VsZW5pdW1cbiAqICAgIE1hbmFnZXIgaGFuZGxlIGl0IGZvciB5b3UuXG4gKiBAZmluYWxcbiAqL1xuY2xhc3MgQ2hhbm5lbCB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZGFyd2luIFRoZSBwYXRoIHRvIGNoZWNrIHdoZW4gcnVubmluZyBvbiBNYWNPUy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHdpbjMyIFRoZSBwYXRoIHRvIGNoZWNrIHdoZW4gcnVubmluZyBvbiBXaW5kb3dzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZGFyd2luLCB3aW4zMikge1xuICAgIC8qKiBAcHJpdmF0ZSBAY29uc3QgKi8gdGhpcy5kYXJ3aW5fID0gZGFyd2luXG4gICAgLyoqIEBwcml2YXRlIEBjb25zdCAqLyB0aGlzLndpbjMyXyA9IHdpbjMyXG4gICAgLyoqIEBwcml2YXRlIHtQcm9taXNlPHN0cmluZz59ICovXG4gICAgdGhpcy5mb3VuZF8gPSBudWxsXG4gIH1cblxuICAvKipcbiAgICogQXR0ZW1wdHMgdG8gbG9jYXRlIHRoZSBGaXJlZm94IGV4ZWN1dGFibGUgZm9yIHRoaXMgcmVsZWFzZSBjaGFubmVsLiBUaGlzXG4gICAqIHdpbGwgZmlyc3QgY2hlY2sgdGhlIGRlZmF1bHQgaW5zdGFsbGF0aW9uIGxvY2F0aW9uIGZvciB0aGUgY2hhbm5lbCBiZWZvcmVcbiAgICogY2hlY2tpbmcgdGhlIHVzZXIncyBQQVRILiBUaGUgcmV0dXJuZWQgcHJvbWlzZSB3aWxsIGJlIHJlamVjdGVkIGlmIEZpcmVmb3hcbiAgICogY2FuIG5vdCBiZSBmb3VuZC5cbiAgICpcbiAgICogQHJldHVybiB7IVByb21pc2U8c3RyaW5nPn0gQSBwcm9taXNlIGZvciB0aGUgbG9jYXRpb24gb2YgdGhlIGxvY2F0ZWRcbiAgICogICAgIEZpcmVmb3ggZXhlY3V0YWJsZS5cbiAgICovXG4gIGxvY2F0ZSgpIHtcbiAgICBpZiAodGhpcy5mb3VuZF8pIHtcbiAgICAgIHJldHVybiB0aGlzLmZvdW5kX1xuICAgIH1cblxuICAgIGxldCBmb3VuZFxuICAgIHN3aXRjaCAocHJvY2Vzcy5wbGF0Zm9ybSkge1xuICAgICAgY2FzZSAnZGFyd2luJzpcbiAgICAgICAgZm91bmQgPSBpby5leGlzdHModGhpcy5kYXJ3aW5fKS50aGVuKChleGlzdHMpID0+IChleGlzdHMgPyB0aGlzLmRhcndpbl8gOiBpby5maW5kSW5QYXRoKCdmaXJlZm94JykpKVxuICAgICAgICBicmVha1xuXG4gICAgICBjYXNlICd3aW4zMic6XG4gICAgICAgIGZvdW5kID0gZmluZEluUHJvZ3JhbUZpbGVzKHRoaXMud2luMzJfKS50aGVuKChmb3VuZCkgPT4gZm91bmQgfHwgaW8uZmluZEluUGF0aCgnZmlyZWZveC5leGUnKSlcbiAgICAgICAgYnJlYWtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgZm91bmQgPSBQcm9taXNlLnJlc29sdmUoaW8uZmluZEluUGF0aCgnZmlyZWZveCcpKVxuICAgICAgICBicmVha1xuICAgIH1cblxuICAgIHRoaXMuZm91bmRfID0gZm91bmQudGhlbigoZm91bmQpID0+IHtcbiAgICAgIGlmIChmb3VuZCkge1xuICAgICAgICAvLyBUT0RPOiB2ZXJpZnkgdmVyc2lvbiBpbmZvLlxuICAgICAgICByZXR1cm4gZm91bmRcbiAgICAgIH1cbiAgICAgIHRocm93IEVycm9yKCdDb3VsZCBub3QgbG9jYXRlIEZpcmVmb3ggb24gdGhlIGN1cnJlbnQgc3lzdGVtJylcbiAgICB9KVxuICAgIHJldHVybiB0aGlzLmZvdW5kX1xuICB9XG5cbiAgLyoqIEByZXR1cm4geyFQcm9taXNlPHN0cmluZz59ICovXG4gIFtTeW1ib2xzLnNlcmlhbGl6ZV0oKSB7XG4gICAgcmV0dXJuIHRoaXMubG9jYXRlKClcbiAgfVxufVxuXG4vKipcbiAqIEZpcmVmb3gncyBkZXZlbG9wZXIgY2hhbm5lbC5cbiAqIEBjb25zdFxuICogQHNlZSA8aHR0cHM6Ly93d3cubW96aWxsYS5vcmcvZW4tVVMvZmlyZWZveC9jaGFubmVsL2Rlc2t0b3AvI2RldmVsb3Blcj5cbiAqL1xuQ2hhbm5lbC5ERVYgPSBuZXcgQ2hhbm5lbChcbiAgJy9BcHBsaWNhdGlvbnMvRmlyZWZveCBEZXZlbG9wZXIgRWRpdGlvbi5hcHAvQ29udGVudHMvTWFjT1MvZmlyZWZveCcsXG4gICdGaXJlZm94IERldmVsb3BlciBFZGl0aW9uXFxcXGZpcmVmb3guZXhlJyxcbilcblxuLyoqXG4gKiBGaXJlZm94J3MgYmV0YSBjaGFubmVsLiBOb3RlIHRoaXMgaXMgcHJvdmlkZWQgbWFpbmx5IGZvciBjb252ZW5pZW5jZSBhc1xuICogdGhlIGJldGEgY2hhbm5lbCBoYXMgdGhlIHNhbWUgaW5zdGFsbGF0aW9uIGxvY2F0aW9uIGFzIHRoZSBtYWluIHJlbGVhc2VcbiAqIGNoYW5uZWwuXG4gKiBAY29uc3RcbiAqIEBzZWUgPGh0dHBzOi8vd3d3Lm1vemlsbGEub3JnL2VuLVVTL2ZpcmVmb3gvY2hhbm5lbC9kZXNrdG9wLyNiZXRhPlxuICovXG5DaGFubmVsLkJFVEEgPSBuZXcgQ2hhbm5lbCgnL0FwcGxpY2F0aW9ucy9GaXJlZm94LmFwcC9Db250ZW50cy9NYWNPUy9maXJlZm94JywgJ01vemlsbGEgRmlyZWZveFxcXFxmaXJlZm94LmV4ZScpXG5cbi8qKlxuICogRmlyZWZveCdzIHJlbGVhc2UgY2hhbm5lbC5cbiAqIEBjb25zdFxuICogQHNlZSA8aHR0cHM6Ly93d3cubW96aWxsYS5vcmcvZW4tVVMvZmlyZWZveC9kZXNrdG9wLz5cbiAqL1xuQ2hhbm5lbC5SRUxFQVNFID0gbmV3IENoYW5uZWwoJy9BcHBsaWNhdGlvbnMvRmlyZWZveC5hcHAvQ29udGVudHMvTWFjT1MvZmlyZWZveCcsICdNb3ppbGxhIEZpcmVmb3hcXFxcZmlyZWZveC5leGUnKVxuXG4vKipcbiAqIEZpcmVmb3gncyBuaWdodGx5IHJlbGVhc2UgY2hhbm5lbC5cbiAqIEBjb25zdFxuICogQHNlZSA8aHR0cHM6Ly93d3cubW96aWxsYS5vcmcvZW4tVVMvZmlyZWZveC9jaGFubmVsL2Rlc2t0b3AvI25pZ2h0bHk+XG4gKi9cbkNoYW5uZWwuTklHSFRMWSA9IG5ldyBDaGFubmVsKCcvQXBwbGljYXRpb25zL0ZpcmVmb3ggTmlnaHRseS5hcHAvQ29udGVudHMvTWFjT1MvZmlyZWZveCcsICdOaWdodGx5XFxcXGZpcmVmb3guZXhlJylcblxuLy8gUFVCTElDIEFQSVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQ2hhbm5lbCxcbiAgQ29udGV4dCxcbiAgRHJpdmVyLFxuICBPcHRpb25zLFxuICBTZXJ2aWNlQnVpbGRlcixcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/firefox.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/http/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/selenium-webdriver/http/index.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Defines an {@linkplain cmd.Executor command executor} that\n * communicates with a remote end using HTTP + JSON.\n */\n\n\n\nconst http = __webpack_require__(/*! node:http */ \"node:http\")\nconst https = __webpack_require__(/*! node:https */ \"node:https\")\nconst url = __webpack_require__(/*! node:url */ \"node:url\")\n\nconst httpLib = __webpack_require__(/*! ../lib/http */ \"(rsc)/./node_modules/selenium-webdriver/lib/http.js\")\n\n/**\n * @typedef {{protocol: (?string|undefined),\n *            auth: (?string|undefined),\n *            hostname: (?string|undefined),\n *            host: (?string|undefined),\n *            port: (?string|undefined),\n *            path: (?string|undefined),\n *            pathname: (?string|undefined)}}\n */\nlet RequestOptions // eslint-disable-line\n\n/**\n * @param {string} aUrl The request URL to parse.\n * @return {RequestOptions} The request options.\n * @throws {Error} if the URL does not include a hostname.\n */\nfunction getRequestOptions(aUrl) {\n  // eslint-disable-next-line n/no-deprecated-api\n  let options = url.parse(aUrl)\n  if (!options.hostname) {\n    throw new Error('Invalid URL: ' + aUrl)\n  }\n  // Delete the search and has portions as they are not used.\n  options.search = null\n  options.hash = null\n  options.path = options.pathname\n  options.hostname = options.hostname === 'localhost' ? '127.0.0.1' : options.hostname // To support Node 17 and above. Refer https://github.com/nodejs/node/issues/40702 for details.\n  return options\n}\n\n/** @const {string} */\nconst USER_AGENT = (function () {\n  const version = (__webpack_require__(/*! ../package.json */ \"(rsc)/./node_modules/selenium-webdriver/package.json\").version)\n  const platform = { darwin: 'mac', win32: 'windows' }[process.platform] || 'linux'\n  return `selenium/${version} (js ${platform})`\n})()\n\n/**\n * A basic HTTP client used to send messages to a remote end.\n *\n * @implements {httpLib.Client}\n */\nclass HttpClient {\n  /**\n   * @param {string} serverUrl URL for the WebDriver server to send commands to.\n   * @param {http.Agent=} opt_agent The agent to use for each request.\n   *     Defaults to `http.globalAgent`.\n   * @param {?string=} opt_proxy The proxy to use for the connection to the\n   *     server. Default is to use no proxy.\n   * @param {?Object.<string,Object>} client_options\n   */\n  constructor(serverUrl, opt_agent, opt_proxy, client_options = {}) {\n    /** @private {http.Agent} */\n    this.agent_ = opt_agent || null\n\n    /**\n     * Base options for each request.\n     * @private {RequestOptions}\n     */\n    this.options_ = getRequestOptions(serverUrl)\n\n    /**\n     * client options, header overrides\n     */\n    this.client_options = client_options\n\n    /**\n     * sets keep-alive for the agent\n     * see https://stackoverflow.com/a/58332910\n     */\n    this.keepAlive = this.client_options['keep-alive']\n\n    /**  @private {?RequestOptions} */\n    this.proxyOptions_ = opt_proxy ? getRequestOptions(opt_proxy) : null\n  }\n\n  get keepAlive() {\n    return this.agent_.keepAlive\n  }\n\n  set keepAlive(value) {\n    if (value === 'true' || value === true) {\n      this.agent_.keepAlive = true\n    }\n  }\n\n  /** @override */\n  send(httpRequest) {\n    let data\n\n    let headers = {}\n\n    if (httpRequest.headers) {\n      httpRequest.headers.forEach(function (value, name) {\n        headers[name] = value\n      })\n    }\n\n    headers['User-Agent'] = this.client_options['user-agent'] || USER_AGENT\n    headers['Content-Length'] = 0\n    if (httpRequest.method == 'POST' || httpRequest.method == 'PUT') {\n      data = JSON.stringify(httpRequest.data)\n      headers['Content-Length'] = Buffer.byteLength(data, 'utf8')\n      headers['Content-Type'] = 'application/json;charset=UTF-8'\n    }\n\n    let path = this.options_.path\n    if (path.endsWith('/') && httpRequest.path.startsWith('/')) {\n      path += httpRequest.path.substring(1)\n    } else {\n      path += httpRequest.path\n    }\n    // eslint-disable-next-line n/no-deprecated-api\n    let parsedPath = url.parse(path)\n\n    let options = {\n      agent: this.agent_ || null,\n      method: httpRequest.method,\n\n      auth: this.options_.auth,\n      hostname: this.options_.hostname,\n      port: this.options_.port,\n      protocol: this.options_.protocol,\n\n      path: parsedPath.path,\n      pathname: parsedPath.pathname,\n      search: parsedPath.search,\n      hash: parsedPath.hash,\n\n      headers,\n    }\n\n    return new Promise((fulfill, reject) => {\n      sendRequest(options, fulfill, reject, data, this.proxyOptions_)\n    })\n  }\n}\n\n/**\n * Sends a single HTTP request.\n * @param {!Object} options The request options.\n * @param {function(!httpLib.Response)} onOk The function to call if the\n *     request succeeds.\n * @param {function(!Error)} onError The function to call if the request fails.\n * @param {?string=} opt_data The data to send with the request.\n * @param {?RequestOptions=} opt_proxy The proxy server to use for the request.\n * @param {number=} opt_retries The current number of retries.\n */\nfunction sendRequest(options, onOk, onError, opt_data, opt_proxy, opt_retries) {\n  var hostname = options.hostname\n  var port = options.port\n\n  if (opt_proxy) {\n    let proxy = /** @type {RequestOptions} */ (opt_proxy)\n\n    // RFC 2616, section 5.1.2:\n    // The absoluteURI form is REQUIRED when the request is being made to a\n    // proxy.\n    let absoluteUri = url.format(options)\n\n    // RFC 2616, section 14.23:\n    // An HTTP/1.1 proxy MUST ensure that any request message it forwards does\n    // contain an appropriate Host header field that identifies the service\n    // being requested by the proxy.\n    let targetHost = options.hostname\n    if (options.port) {\n      targetHost += ':' + options.port\n    }\n\n    // Update the request options with our proxy info.\n    options.headers['Host'] = targetHost\n    options.path = absoluteUri\n    options.host = proxy.host\n    options.hostname = proxy.hostname\n    options.port = proxy.port\n\n    // Update the protocol to avoid EPROTO errors when the webdriver proxy\n    // uses a different protocol from the remote selenium server.\n    options.protocol = opt_proxy.protocol\n\n    if (proxy.auth) {\n      options.headers['Proxy-Authorization'] = 'Basic ' + Buffer.from(proxy.auth).toString('base64')\n    }\n  }\n\n  let requestFn = options.protocol === 'https:' ? https.request : http.request\n  var request = requestFn(options, function onResponse(response) {\n    if (response.statusCode == 302 || response.statusCode == 303) {\n      let location\n      try {\n        // eslint-disable-next-line n/no-deprecated-api\n        location = url.parse(response.headers['location'])\n      } catch (ex) {\n        onError(\n          Error(\n            'Failed to parse \"Location\" header for server redirect: ' +\n              ex.message +\n              '\\nResponse was: \\n' +\n              new httpLib.Response(response.statusCode, response.headers, ''),\n          ),\n        )\n        return\n      }\n\n      if (!location.hostname) {\n        location.hostname = hostname\n        location.port = port\n        location.auth = options.auth\n      }\n\n      request.destroy()\n      sendRequest(\n        {\n          method: 'GET',\n          protocol: location.protocol || options.protocol,\n          hostname: location.hostname,\n          port: location.port,\n          path: location.path,\n          auth: location.auth,\n          pathname: location.pathname,\n          search: location.search,\n          hash: location.hash,\n          headers: {\n            Accept: 'application/json; charset=utf-8',\n            'User-Agent': options.headers['User-Agent'] || USER_AGENT,\n          },\n        },\n        onOk,\n        onError,\n        undefined,\n        opt_proxy,\n      )\n      return\n    }\n\n    const body = []\n    response.on('data', body.push.bind(body))\n    response.on('end', function () {\n      const resp = new httpLib.Response(\n        /** @type {number} */ (response.statusCode),\n        /** @type {!Object<string>} */ (response.headers),\n        Buffer.concat(body).toString('utf8').replace(/\\0/g, ''),\n      )\n      onOk(resp)\n    })\n  })\n\n  request.on('error', function (e) {\n    if (typeof opt_retries === 'undefined') {\n      opt_retries = 0\n    }\n\n    if (shouldRetryRequest(opt_retries, e)) {\n      opt_retries += 1\n      setTimeout(function () {\n        sendRequest(options, onOk, onError, opt_data, opt_proxy, opt_retries)\n      }, 15)\n    } else {\n      let message = e.message\n      if (e.code) {\n        message = e.code + ' ' + message\n      }\n      onError(new Error(message))\n    }\n  })\n\n  if (opt_data) {\n    request.write(opt_data)\n  }\n\n  request.end()\n}\n\nconst MAX_RETRIES = 3\n\n/**\n * A retry is sometimes needed on Windows where we may quickly run out of\n * ephemeral ports. A more robust solution is bumping the MaxUserPort setting\n * as described here: http://msdn.microsoft.com/en-us/library/aa560610%28v=bts.20%29.aspx\n *\n * @param {!number} retries\n * @param {!Error} err\n * @return {boolean}\n */\nfunction shouldRetryRequest(retries, err) {\n  return retries < MAX_RETRIES && isRetryableNetworkError(err)\n}\n\n/**\n * @param {!Error} err\n * @return {boolean}\n */\nfunction isRetryableNetworkError(err) {\n  if (err && err.code) {\n    return (\n      err.code === 'ECONNABORTED' ||\n      err.code === 'ECONNRESET' ||\n      err.code === 'ECONNREFUSED' ||\n      err.code === 'EADDRINUSE' ||\n      err.code === 'EPIPE' ||\n      err.code === 'ETIMEDOUT'\n    )\n  }\n\n  return false\n}\n\n// PUBLIC API\n\nmodule.exports.Agent = http.Agent\nmodule.exports.Executor = httpLib.Executor\nmodule.exports.HttpClient = HttpClient\nmodule.exports.Request = httpLib.Request\nmodule.exports.Response = httpLib.Response\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/http/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/http/util.js":
/*!******************************************************!*\
  !*** ./node_modules/selenium-webdriver/http/util.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Various HTTP utilities.\n */\n\n\n\nconst Executor = (__webpack_require__(/*! ./index */ \"(rsc)/./node_modules/selenium-webdriver/http/index.js\").Executor)\nconst HttpClient = (__webpack_require__(/*! ./index */ \"(rsc)/./node_modules/selenium-webdriver/http/index.js\").HttpClient)\nconst HttpRequest = (__webpack_require__(/*! ./index */ \"(rsc)/./node_modules/selenium-webdriver/http/index.js\").Request)\nconst Command = (__webpack_require__(/*! ../lib/command */ \"(rsc)/./node_modules/selenium-webdriver/lib/command.js\").Command)\nconst CommandName = (__webpack_require__(/*! ../lib/command */ \"(rsc)/./node_modules/selenium-webdriver/lib/command.js\").Name)\nconst error = __webpack_require__(/*! ../lib/error */ \"(rsc)/./node_modules/selenium-webdriver/lib/error.js\")\n\n/**\n * Queries a WebDriver server for its current status.\n * @param {string} url Base URL of the server to query.\n * @return {!Promise<!Object>} A promise that resolves with\n *     a hash of the server status.\n */\nfunction getStatus(url) {\n  const client = new HttpClient(url)\n  const executor = new Executor(client)\n  const command = new Command(CommandName.GET_SERVER_STATUS)\n  return executor.execute(command)\n}\n\nclass CancellationError {}\n\n/**\n * Waits for a WebDriver server to be healthy and accepting requests.\n * @param {string} url Base URL of the server to query.\n * @param {number} timeout How long to wait for the server.\n * @param {Promise=} opt_cancelToken A promise used as a cancellation signal:\n *     if resolved before the server is ready, the wait will be terminated\n *     early with a {@link CancellationError}.\n * @return {!Promise} A promise that will resolve when the server is ready, or\n *     if the wait is cancelled.\n */\nfunction waitForServer(url, timeout, opt_cancelToken) {\n  return new Promise((onResolve, onReject) => {\n    let start = Date.now()\n\n    let done = false\n    let resolve = (status) => {\n      done = true\n      onResolve(status)\n    }\n    let reject = (err) => {\n      done = true\n      onReject(err)\n    }\n\n    if (opt_cancelToken) {\n      opt_cancelToken.then((_) => reject(new CancellationError()))\n    }\n\n    checkServerStatus()\n\n    function checkServerStatus() {\n      return getStatus(url).then((status) => resolve(status), onError)\n    }\n\n    function onError(e) {\n      // Some servers don't support the status command. If they are able to\n      // response with an error, then can consider the server ready.\n      if (e instanceof error.UnsupportedOperationError) {\n        resolve({})\n        return\n      }\n\n      if (Date.now() - start > timeout) {\n        reject(Error('Timed out waiting for the WebDriver server at ' + url))\n      } else {\n        setTimeout(function () {\n          if (!done) {\n            checkServerStatus()\n          }\n        }, 50)\n      }\n    }\n  })\n}\n\n/**\n * Polls a URL with GET requests until it returns a 2xx response or the\n * timeout expires.\n * @param {string} url The URL to poll.\n * @param {number} timeout How long to wait, in milliseconds.\n * @param {Promise=} opt_cancelToken A promise used as a cancellation signal:\n *     if resolved before the a 2xx response is received, the wait will be\n *     terminated early with a {@link CancellationError}.\n * @return {!Promise} A promise that will resolve when a 2xx is received from\n *     the given URL, or if the wait is cancelled.\n */\nfunction waitForUrl(url, timeout, opt_cancelToken) {\n  return new Promise((onResolve, onReject) => {\n    let client = new HttpClient(url)\n    let request = new HttpRequest('GET', '')\n    let start = Date.now()\n\n    let done = false\n    let resolve = () => {\n      done = true\n      onResolve()\n    }\n    let reject = (err) => {\n      done = true\n      onReject(err)\n    }\n\n    if (opt_cancelToken) {\n      opt_cancelToken.then((_) => reject(new CancellationError()))\n    }\n\n    testUrl()\n\n    function testUrl() {\n      client.send(request).then(onResponse, onError)\n    }\n\n    function onError() {\n      if (Date.now() - start > timeout) {\n        reject(Error('Timed out waiting for the URL to return 2xx: ' + url))\n      } else {\n        setTimeout(function () {\n          if (!done) {\n            testUrl()\n          }\n        }, 50)\n      }\n    }\n\n    function onResponse(response) {\n      if (done) {\n        return\n      }\n      if (response.status > 199 && response.status < 300) {\n        resolve()\n        return\n      }\n      onError()\n    }\n  })\n}\n\n// PUBLIC API\nmodule.exports.getStatus = getStatus\nmodule.exports.CancellationError = CancellationError\nmodule.exports.waitForServer = waitForServer\nmodule.exports.waitForUrl = waitForUrl\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/http/util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/ie.js":
/*!***********************************************!*\
  !*** ./node_modules/selenium-webdriver/ie.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Defines a {@linkplain Driver WebDriver} client for Microsoft's\n * Internet Explorer. Before using the IEDriver, you must download the latest\n * [IEDriverServer](https://www.selenium.dev/downloads/)\n * and place it on your\n * [PATH](http://en.wikipedia.org/wiki/PATH_%28variable%29). You must also apply\n * the system configuration outlined on the Selenium project\n * [wiki](https://github.com/SeleniumHQ/selenium/wiki/InternetExplorerDriver)\n *\n * @module selenium-webdriver/ie\n */\n\n\n\nconst http = __webpack_require__(/*! ./http */ \"(rsc)/./node_modules/selenium-webdriver/http/index.js\")\nconst portprober = __webpack_require__(/*! ./net/portprober */ \"(rsc)/./node_modules/selenium-webdriver/net/portprober.js\")\nconst remote = __webpack_require__(/*! ./remote */ \"(rsc)/./node_modules/selenium-webdriver/remote/index.js\")\nconst webdriver = __webpack_require__(/*! ./lib/webdriver */ \"(rsc)/./node_modules/selenium-webdriver/lib/webdriver.js\")\nconst { Browser, Capabilities } = __webpack_require__(/*! ./lib/capabilities */ \"(rsc)/./node_modules/selenium-webdriver/lib/capabilities.js\")\nconst error = __webpack_require__(/*! ./lib/error */ \"(rsc)/./node_modules/selenium-webdriver/lib/error.js\")\nconst { getBinaryPaths } = __webpack_require__(/*! ./common/driverFinder */ \"(rsc)/./node_modules/selenium-webdriver/common/driverFinder.js\")\n\nconst OPTIONS_CAPABILITY_KEY = 'se:ieOptions'\nconst SCROLL_BEHAVIOUR = {\n  BOTTOM: 1,\n  TOP: 0,\n}\n\n/**\n * IEDriverServer logging levels.\n * @enum {string}\n */\nconst Level = {\n  FATAL: 'FATAL',\n  ERROR: 'ERROR',\n  WARN: 'WARN',\n  INFO: 'INFO',\n  DEBUG: 'DEBUG',\n  TRACE: 'TRACE',\n}\n\n/**\n * Option keys:\n * https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities#ie-specific\n * @enum {string}\n */\nconst Key = {\n  IGNORE_PROTECTED_MODE_SETTINGS: 'ignoreProtectedModeSettings',\n  IGNORE_ZOOM_SETTING: 'ignoreZoomSetting',\n  INITIAL_BROWSER_URL: 'initialBrowserUrl',\n  ENABLE_PERSISTENT_HOVER: 'enablePersistentHover',\n  ENABLE_ELEMENT_CACHE_CLEANUP: 'enableElementCacheCleanup',\n  ELEMENT_SCROLL_BEHAVIOR: 'elementScrollBehavior',\n  REQUIRE_WINDOW_FOCUS: 'requireWindowFocus',\n  BROWSER_ATTACH_TIMEOUT: 'browserAttachTimeout',\n  FORCE_CREATE_PROCESS: 'ie.forceCreateProcessApi',\n  BROWSER_COMMAND_LINE_SWITCHES: 'ie.browserCommandLineSwitches',\n  USE_PER_PROCESS_PROXY: 'ie.usePerProcessProxy',\n  ENSURE_CLEAN_SESSION: 'ie.ensureCleanSession',\n  LOG_FILE: 'logFile',\n  LOG_LEVEL: 'logLevel',\n  HOST: 'host',\n  EXTRACT_PATH: 'extractPath',\n  SILENT: 'silent',\n  FILE_UPLOAD_DIALOG_TIMEOUT: 'ie.fileUploadDialogTimeout',\n  ATTACH_TO_EDGE_CHROMIUM: 'ie.edgechromium',\n  EDGE_EXECUTABLE_PATH: 'ie.edgepath',\n  IGNORE_PROCESS_MATCH: 'ie.ignoreprocessmatch',\n}\n\n/**\n * Class for managing IEDriver specific options.\n */\nclass Options extends Capabilities {\n  /**\n   * @param {(Capabilities|Map<string, ?>|Object)=} other Another set of\n   *     capabilities to initialize this instance from.\n   */\n  constructor(other = undefined) {\n    super(other)\n\n    /** @private {!Object} */\n    this.options_ = this.get(OPTIONS_CAPABILITY_KEY) || {}\n\n    this.set(OPTIONS_CAPABILITY_KEY, this.options_)\n    this.setBrowserName(Browser.INTERNET_EXPLORER)\n  }\n\n  /**\n   * Whether to disable the protected mode settings check when the session is\n   * created. Disabling this setting may lead to significant instability as the\n   * browser may become unresponsive/hang. Only \"best effort\" support is provided\n   * when using this capability.\n   *\n   * For more information, refer to the IEDriver's\n   * [required system configuration](http://goo.gl/eH0Yi3).\n   *\n   * @param {boolean} ignoreSettings Whether to ignore protected mode settings.\n   * @return {!Options} A self reference.\n   */\n  introduceFlakinessByIgnoringProtectedModeSettings(ignoreSettings) {\n    this.options_[Key.IGNORE_PROTECTED_MODE_SETTINGS] = !!ignoreSettings\n    return this\n  }\n\n  /**\n   * Indicates whether to skip the check that the browser's zoom level is set to\n   * 100%.\n   *\n   * @param {boolean} ignore Whether to ignore the browser's zoom level settings.\n   * @return {!Options} A self reference.\n   */\n  ignoreZoomSetting(ignore) {\n    this.options_[Key.IGNORE_ZOOM_SETTING] = !!ignore\n    return this\n  }\n\n  /**\n   * Sets the initial URL loaded when IE starts. This is intended to be used with\n   * {@link #introduceFlakinessByIgnoringProtectedModeSettings} to allow the user to initialize IE in\n   * the proper Protected Mode zone. Setting this option may cause browser\n   * instability or flaky and unresponsive code. Only \"best effort\" support is\n   * provided when using this option.\n   *\n   * @param {string} url The initial browser URL.\n   * @return {!Options} A self reference.\n   */\n  initialBrowserUrl(url) {\n    this.options_[Key.INITIAL_BROWSER_URL] = url\n    return this\n  }\n\n  /**\n   * Configures whether to enable persistent mouse hovering (true by default).\n   * Persistent hovering is achieved by continuously firing mouse over events at\n   * the last location the mouse cursor has been moved to.\n   *\n   * @param {boolean} enable Whether to enable persistent hovering.\n   * @return {!Options} A self reference.\n   */\n  enablePersistentHover(enable) {\n    this.options_[Key.ENABLE_PERSISTENT_HOVER] = !!enable\n    return this\n  }\n\n  /**\n   * Configures whether the driver should attempt to remove obsolete\n   * {@linkplain webdriver.WebElement WebElements} from its internal cache on\n   * page navigation (true by default). Disabling this option will cause the\n   * driver to run with a larger memory footprint.\n   *\n   * @param {boolean} enable Whether to enable element reference cleanup.\n   * @return {!Options} A self reference.\n   */\n  enableElementCacheCleanup(enable) {\n    this.options_[Key.ENABLE_ELEMENT_CACHE_CLEANUP] = !!enable\n    return this\n  }\n\n  /**\n   * Configures whether to require the IE window to have input focus before\n   * performing any user interactions (i.e. mouse or keyboard events). This\n   * option is disabled by default, but delivers much more accurate interaction\n   * events when enabled.\n   *\n   * @param {boolean} require Whether to require window focus.\n   * @return {!Options} A self reference.\n   */\n  requireWindowFocus(require) {\n    this.options_[Key.REQUIRE_WINDOW_FOCUS] = !!require\n    return this\n  }\n\n  /**\n   * Configures the timeout, in milliseconds, that the driver will attempt to\n   * located and attach to a newly opened instance of Internet Explorer. The\n   * default is zero, which indicates waiting indefinitely.\n   *\n   * @param {number} timeout How long to wait for IE.\n   * @return {!Options} A self reference.\n   */\n  browserAttachTimeout(timeout) {\n    this.options_[Key.BROWSER_ATTACH_TIMEOUT] = Math.max(timeout, 0)\n    return this\n  }\n\n  /**\n   * Configures whether to launch Internet Explorer using the CreateProcess API.\n   * If this option is not specified, IE is launched using IELaunchURL, if\n   * available. For IE 8 and above, this option requires the TabProcGrowth\n   * registry value to be set to 0.\n   *\n   * @param {boolean} force Whether to use the CreateProcess API.\n   * @return {!Options} A self reference.\n   */\n  forceCreateProcessApi(force) {\n    this.options_[Key.FORCE_CREATE_PROCESS] = !!force\n    return this\n  }\n\n  /**\n   * Specifies command-line switches to use when launching Internet Explorer.\n   * This is only valid when used with {@link #forceCreateProcessApi}.\n   *\n   * @param {...(string|!Array.<string>)} args The arguments to add.\n   * @return {!Options} A self reference.\n   */\n\n  addBrowserCommandSwitches(...args) {\n    let current = this.options_[Key.BROWSER_COMMAND_LINE_SWITCHES] || []\n    if (typeof current == 'string') {\n      current = current.split(' ')\n    }\n    this.options_[Key.BROWSER_COMMAND_LINE_SWITCHES] = current.concat(args).join(' ')\n    return this\n  }\n\n  /**\n   * Specifies command-line switches to use when launching Internet Explorer.\n   * This is only valid when used with {@link #forceCreateProcessApi}.\n   *\n   * @param {...(string|!Array.<string>)} args The arguments to add.\n   * @deprecated Use {@link #addBrowserCommandSwitches} instead.\n   * @return {!Options} A self reference.\n   */\n\n  addArguments(...args) {\n    let current = this.options_[Key.BROWSER_COMMAND_LINE_SWITCHES] || []\n    if (typeof current == 'string') {\n      current = current.split(' ')\n    }\n    this.options_[Key.BROWSER_COMMAND_LINE_SWITCHES] = current.concat(args).join(' ')\n    return this\n  }\n\n  /**\n   * Configures whether proxies should be configured on a per-process basis. If\n   * not set, setting a {@linkplain #setProxy proxy} will configure the system\n   * proxy. The default behavior is to use the system proxy.\n   *\n   * @param {boolean} enable Whether to enable per-process proxy settings.\n   * @return {!Options} A self reference.\n   */\n  usePerProcessProxy(enable) {\n    this.options_[Key.USE_PER_PROCESS_PROXY] = !!enable\n    return this\n  }\n\n  /**\n   * Configures whether to clear the cache, cookies, history, and saved form data\n   * before starting the browser. _Using this capability will clear session data\n   * for all running instances of Internet Explorer, including those started\n   * manually._\n   *\n   * @param {boolean} cleanSession Whether to clear all session data on startup.\n   * @return {!Options} A self reference.\n   */\n  ensureCleanSession(cleanSession) {\n    this.options_[Key.ENSURE_CLEAN_SESSION] = !!cleanSession\n    return this\n  }\n\n  /**\n   * Sets the path to the log file the driver should log to.\n   * @param {string} file The log file path.\n   * @return {!Options} A self reference.\n   */\n  setLogFile(file) {\n    this.options_[Key.LOG_FILE] = file\n    return this\n  }\n\n  /**\n   * Sets the IEDriverServer's logging {@linkplain Level level}.\n   * @param {Level} level The logging level.\n   * @return {!Options} A self reference.\n   */\n  setLogLevel(level) {\n    this.options_[Key.LOG_LEVEL] = level\n    return this\n  }\n\n  /**\n   * Sets the IP address of the driver's host adapter.\n   * @param {string} host The IP address to use.\n   * @return {!Options} A self reference.\n   */\n  setHost(host) {\n    this.options_[Key.HOST] = host\n    return this\n  }\n\n  /**\n   * Sets the path of the temporary data directory to use.\n   * @param {string} path The log file path.\n   * @return {!Options} A self reference.\n   */\n  setExtractPath(path) {\n    this.options_[Key.EXTRACT_PATH] = path\n    return this\n  }\n\n  /**\n   * Sets whether the driver should start in silent mode.\n   * @param {boolean} silent Whether to run in silent mode.\n   * @return {!Options} A self reference.\n   */\n  silent(silent) {\n    this.options_[Key.SILENT] = silent\n    return this\n  }\n\n  /**\n   * The options File Upload Dialog Timeout in milliseconds\n   *\n   * @param {number} timeout How long to wait for IE.\n   * @return {!Options} A self reference.\n   */\n  fileUploadDialogTimeout(timeout) {\n    this.options_[Key.FILE_UPLOAD_DIALOG_TIMEOUT] = Math.max(timeout, 0)\n    return this\n  }\n\n  /**\n   * Sets the path of the EdgeChromium driver.\n   * @param {string} path The EdgeChromium driver path.\n   * @return {!Options} A self reference.\n   */\n  setEdgePath(path) {\n    this.options_[Key.EDGE_EXECUTABLE_PATH] = path\n    return this\n  }\n\n  /**\n   * Sets the IEDriver to drive Chromium-based Edge in Internet Explorer mode.\n   *\n   * @param {boolean} attachEdgeChromium Whether to run in Chromium-based-Edge in IE mode\n   * @return {!Options} A self reference.\n   */\n  setEdgeChromium(attachEdgeChromium) {\n    this.options_[Key.ATTACH_TO_EDGE_CHROMIUM] = !!attachEdgeChromium\n    return this\n  }\n\n  /**\n   * Sets how elements should be scrolled into view for interaction.\n   * @param {number} behavior The desired scroll behavior: either 0 to align with\n   *     the top of the viewport or 1 to align with the bottom.\n   * @return {!Options} A self reference.\n   */\n  setScrollBehavior(behavior) {\n    if (behavior && behavior !== SCROLL_BEHAVIOUR.TOP && behavior !== SCROLL_BEHAVIOUR.BOTTOM) {\n      throw new error.InvalidArgumentError(`Element Scroll Behavior out of range.\n      It should be either ${SCROLL_BEHAVIOUR.TOP} or ${SCROLL_BEHAVIOUR.BOTTOM}`)\n    }\n    this.options_[Key.ELEMENT_SCROLL_BEHAVIOR] = behavior\n    return this\n  }\n}\n\nfunction createServiceFromCapabilities(capabilities) {\n  if (process.platform !== 'win32') {\n    throw Error(\n      'The IEDriver may only be used on Windows, but you appear to be on ' +\n        process.platform +\n        '. Did you mean to run against a remote ' +\n        'WebDriver server?',\n    )\n  }\n\n  let exe = null // Let Selenium Manager find it\n  var args = []\n  if (capabilities.has(Key.HOST)) {\n    args.push('--host=' + capabilities.get(Key.HOST))\n  }\n  if (capabilities.has(Key.LOG_FILE)) {\n    args.push('--log-file=' + capabilities.get(Key.LOG_FILE))\n  }\n  if (capabilities.has(Key.LOG_LEVEL)) {\n    args.push('--log-level=' + capabilities.get(Key.LOG_LEVEL))\n  }\n  if (capabilities.has(Key.EXTRACT_PATH)) {\n    args.push('--extract-path=' + capabilities.get(Key.EXTRACT_PATH))\n  }\n  if (capabilities.get(Key.SILENT)) {\n    args.push('--silent')\n  }\n\n  var port = portprober.findFreePort()\n  return new remote.DriverService(exe, {\n    loopback: true,\n    port: port,\n    args: port.then(function (port) {\n      return args.concat('--port=' + port)\n    }),\n    stdio: 'ignore',\n  })\n}\n\n/**\n * Creates {@link selenium-webdriver/remote.DriverService} instances that manage\n * an [IEDriverServer](https://github.com/SeleniumHQ/selenium/wiki/InternetExplorerDriver)\n * server in a child process.\n */\nclass ServiceBuilder extends remote.DriverService.Builder {\n  /**\n   * @param {string=} opt_exe Path to the server executable to use. If omitted,\n   *     the builder will attempt to locate the IEDriverServer on the system PATH.\n   */\n  constructor(opt_exe) {\n    super(opt_exe)\n    this.setLoopback(true) // Required.\n  }\n}\n\n/**\n * A WebDriver client for Microsoft's Internet Explorer.\n */\nclass Driver extends webdriver.WebDriver {\n  /**\n   * Creates a new session for Microsoft's Internet Explorer.\n   *\n   * @param {(Capabilities|Options)=} options The configuration options.\n   * @param {(remote.DriverService)=} opt_service The `DriverService` to use\n   *   to start the IEDriverServer in a child process, optionally.\n   * @return {!Driver} A new driver instance.\n   */\n  static createSession(options, opt_service) {\n    options = options || new Options()\n\n    let service\n\n    if (opt_service instanceof remote.DriverService) {\n      service = opt_service\n    } else {\n      service = createServiceFromCapabilities(options)\n    }\n    if (!service.getExecutable()) {\n      service.setExecutable(getBinaryPaths(options).driverPath)\n    }\n\n    let client = service.start().then((url) => new http.HttpClient(url))\n    let executor = new http.Executor(client)\n\n    return /** @type {!Driver} */ (super.createSession(executor, options, () => service.kill()))\n  }\n\n  /**\n   * This function is a no-op as file detectors are not supported by this\n   * implementation.\n   * @override\n   */\n  setFileDetector() {}\n}\n\n// PUBLIC API\n\nexports.Driver = Driver\nexports.Options = Options\nexports.Level = Level\nexports.ServiceBuilder = ServiceBuilder\nexports.Key = Key\nexports.VENDOR_COMMAND_PREFIX = OPTIONS_CAPABILITY_KEY\nexports.Behavior = SCROLL_BEHAVIOUR\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/ie.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/index.js":
/*!**************************************************!*\
  !*** ./node_modules/selenium-webdriver/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview The main user facing module. Exports WebDriver's primary\n * public API and provides convenience assessors to certain sub-modules.\n */\n\n\n\nconst _http = __webpack_require__(/*! ./http */ \"(rsc)/./node_modules/selenium-webdriver/http/index.js\")\nconst by = __webpack_require__(/*! ./lib/by */ \"(rsc)/./node_modules/selenium-webdriver/lib/by.js\")\nconst capabilities = __webpack_require__(/*! ./lib/capabilities */ \"(rsc)/./node_modules/selenium-webdriver/lib/capabilities.js\")\nconst chrome = __webpack_require__(/*! ./chrome */ \"(rsc)/./node_modules/selenium-webdriver/chrome.js\")\nconst edge = __webpack_require__(/*! ./edge */ \"(rsc)/./node_modules/selenium-webdriver/edge.js\")\nconst error = __webpack_require__(/*! ./lib/error */ \"(rsc)/./node_modules/selenium-webdriver/lib/error.js\")\nconst firefox = __webpack_require__(/*! ./firefox */ \"(rsc)/./node_modules/selenium-webdriver/firefox.js\")\nconst ie = __webpack_require__(/*! ./ie */ \"(rsc)/./node_modules/selenium-webdriver/ie.js\")\nconst input = __webpack_require__(/*! ./lib/input */ \"(rsc)/./node_modules/selenium-webdriver/lib/input.js\")\nconst logging = __webpack_require__(/*! ./lib/logging */ \"(rsc)/./node_modules/selenium-webdriver/lib/logging.js\")\nconst promise = __webpack_require__(/*! ./lib/promise */ \"(rsc)/./node_modules/selenium-webdriver/lib/promise.js\")\nconst remote = __webpack_require__(/*! ./remote */ \"(rsc)/./node_modules/selenium-webdriver/remote/index.js\")\nconst safari = __webpack_require__(/*! ./safari */ \"(rsc)/./node_modules/selenium-webdriver/safari.js\")\nconst session = __webpack_require__(/*! ./lib/session */ \"(rsc)/./node_modules/selenium-webdriver/lib/session.js\")\nconst until = __webpack_require__(/*! ./lib/until */ \"(rsc)/./node_modules/selenium-webdriver/lib/until.js\")\nconst webdriver = __webpack_require__(/*! ./lib/webdriver */ \"(rsc)/./node_modules/selenium-webdriver/lib/webdriver.js\")\nconst select = __webpack_require__(/*! ./lib/select */ \"(rsc)/./node_modules/selenium-webdriver/lib/select.js\")\nconst LogInspector = __webpack_require__(/*! ./bidi/logInspector */ \"(rsc)/./node_modules/selenium-webdriver/bidi/logInspector.js\")\nconst BrowsingContext = __webpack_require__(/*! ./bidi/browsingContext */ \"(rsc)/./node_modules/selenium-webdriver/bidi/browsingContext.js\")\nconst BrowsingContextInspector = __webpack_require__(/*! ./bidi/browsingContextInspector */ \"(rsc)/./node_modules/selenium-webdriver/bidi/browsingContextInspector.js\")\nconst ScriptManager = __webpack_require__(/*! ./bidi/scriptManager */ \"(rsc)/./node_modules/selenium-webdriver/bidi/scriptManager.js\")\nconst NetworkInspector = __webpack_require__(/*! ./bidi/networkInspector */ \"(rsc)/./node_modules/selenium-webdriver/bidi/networkInspector.js\")\nconst version = (__webpack_require__(/*! ./package.json */ \"(rsc)/./node_modules/selenium-webdriver/package.json\").version)\n\nconst Browser = capabilities.Browser\nconst Capabilities = capabilities.Capabilities\nconst Capability = capabilities.Capability\nconst WebDriver = webdriver.WebDriver\n\nlet seleniumServer\n\n/**\n * Starts an instance of the Selenium server if not yet running.\n * @param {string} jar Path to the server jar to use.\n * @return {!Promise<string>} A promise for the server's\n *     address once started.\n */\nfunction startSeleniumServer(jar) {\n  if (!seleniumServer) {\n    seleniumServer = new remote.SeleniumServer(jar)\n  }\n  return seleniumServer.start()\n}\n\n/**\n * {@linkplain webdriver.WebDriver#setFileDetector WebDriver's setFileDetector}\n * method uses a non-standard command to transfer files from the local client\n * to the remote end hosting the browser. Many of the WebDriver sub-types, like\n * the {@link chrome.Driver} and {@link firefox.Driver}, do not support this\n * command. Thus, these classes override the `setFileDetector` to no-op.\n *\n * This function uses a mixin to re-enable `setFileDetector` by calling the\n * original method on the WebDriver prototype directly. This is used only when\n * the builder creates a Chrome or Firefox instance that communicates with a\n * remote end (and thus, support for remote file detectors is unknown).\n *\n * @param {function(new: webdriver.WebDriver, ...?)} ctor\n * @return {function(new: webdriver.WebDriver, ...?)}\n */\nfunction ensureFileDetectorsAreEnabled(ctor) {\n  return class extends ctor {\n    /** @param {input.FileDetector} detector */\n    setFileDetector(detector) {\n      webdriver.WebDriver.prototype.setFileDetector.call(this, detector)\n    }\n  }\n}\n\n/**\n * A thenable wrapper around a {@linkplain webdriver.IWebDriver IWebDriver}\n * instance that allows commands to be issued directly instead of having to\n * repeatedly call `then`:\n *\n *     let driver = new Builder().build();\n *     driver.then(d => d.get(url));  // You can do this...\n *     driver.get(url);               // ...or this\n *\n * If the driver instance fails to resolve (e.g. the session cannot be created),\n * every issued command will fail.\n *\n * @extends {webdriver.IWebDriver}\n * @extends {IThenable<!webdriver.IWebDriver>}\n * @interface\n */\nclass ThenableWebDriver {\n  /** @param {...?} args */\n  static createSession(...args) {} // eslint-disable-line\n}\n\n/**\n * @const {!Map<function(new: WebDriver, !IThenable<!Session>, ...?),\n *              function(new: ThenableWebDriver, !IThenable<!Session>, ...?)>}\n */\nconst THENABLE_DRIVERS = new Map()\n\n/**\n * @param {function(new: WebDriver, !IThenable<!Session>, ...?)} ctor\n * @param {...?} args\n * @return {!ThenableWebDriver}\n */\nfunction createDriver(ctor, ...args) {\n  let thenableWebDriverProxy = THENABLE_DRIVERS.get(ctor)\n  if (!thenableWebDriverProxy) {\n    /**\n     * @extends {WebDriver}  // Needed since `ctor` is dynamically typed.\n     * @implements {ThenableWebDriver}\n     */\n    thenableWebDriverProxy = class extends ctor {\n      /**\n       * @param {!IThenable<!Session>} session\n       * @param {...?} rest\n       */\n      constructor(session, ...rest) {\n        super(session, ...rest)\n\n        const pd = this.getSession().then((session) => {\n          return new ctor(session, ...rest)\n        })\n\n        /** @override */\n        this.then = pd.then.bind(pd)\n\n        /** @override */\n        this.catch = pd.catch.bind(pd)\n      }\n    }\n    THENABLE_DRIVERS.set(ctor, thenableWebDriverProxy)\n  }\n  return thenableWebDriverProxy.createSession(...args)\n}\n\n/**\n * Creates new {@link webdriver.WebDriver WebDriver} instances. The environment\n * variables listed below may be used to override a builder's configuration,\n * allowing quick runtime changes.\n *\n * - {@code SELENIUM_BROWSER}: defines the target browser in the form\n *   {@code browser[:version][:platform]}.\n *\n * - {@code SELENIUM_REMOTE_URL}: defines the remote URL for all builder\n *   instances. This environment variable should be set to a fully qualified\n *   URL for a WebDriver server (e.g. http://localhost:4444/wd/hub). This\n *   option always takes precedence over {@code SELENIUM_SERVER_JAR}.\n *\n * - {@code SELENIUM_SERVER_JAR}: defines the path to the\n *   <a href=\"https://www.selenium.dev/downloads/\">\n *   standalone Selenium server</a> jar to use. The server will be started the\n *   first time a WebDriver instance and be killed when the process exits.\n *\n * Suppose you had mytest.js that created WebDriver with\n *\n *     var driver = new webdriver.Builder()\n *         .forBrowser('chrome')\n *         .build();\n *\n * This test could be made to use Firefox on the local machine by running with\n * `SELENIUM_BROWSER=firefox node mytest.js`. Rather than change the code to\n * target Google Chrome on a remote machine, you can simply set the\n * `SELENIUM_BROWSER` and `SELENIUM_REMOTE_URL` environment variables:\n *\n *     SELENIUM_BROWSER=chrome:36:LINUX \\\n *     SELENIUM_REMOTE_URL=http://www.example.com:4444/wd/hub \\\n *     node mytest.js\n *\n * You could also use a local copy of the standalone Selenium server:\n *\n *     SELENIUM_BROWSER=chrome:36:LINUX \\\n *     SELENIUM_SERVER_JAR=/path/to/selenium-server-standalone.jar \\\n *     node mytest.js\n */\nclass Builder {\n  constructor() {\n    /** @private @const */\n    this.log_ = logging.getLogger(`${logging.Type.DRIVER}.Builder`)\n\n    /** @private {string} */\n    this.url_ = ''\n\n    /** @private {?string} */\n    this.proxy_ = null\n\n    /** @private {!Capabilities} */\n    this.capabilities_ = new Capabilities()\n\n    /** @private {chrome.Options} */\n    this.chromeOptions_ = null\n\n    /** @private {chrome.ServiceBuilder} */\n    this.chromeService_ = null\n\n    /** @private {firefox.Options} */\n    this.firefoxOptions_ = null\n\n    /** @private {firefox.ServiceBuilder} */\n    this.firefoxService_ = null\n\n    /** @private {ie.Options} */\n    this.ieOptions_ = null\n\n    /** @private {ie.ServiceBuilder} */\n    this.ieService_ = null\n\n    /** @private {safari.Options} */\n    this.safariOptions_ = null\n\n    /** @private {edge.Options} */\n    this.edgeOptions_ = null\n\n    /** @private {remote.DriverService.Builder} */\n    this.edgeService_ = null\n\n    /** @private {boolean} */\n    this.ignoreEnv_ = false\n\n    /** @private {http.Agent} */\n    this.agent_ = null\n  }\n\n  /**\n   * Configures this builder to ignore any environment variable overrides and to\n   * only use the configuration specified through this instance's API.\n   *\n   * @return {!Builder} A self reference.\n   */\n  disableEnvironmentOverrides() {\n    this.ignoreEnv_ = true\n    return this\n  }\n\n  /**\n   * Sets the URL of a remote WebDriver server to use. Once a remote URL has\n   * been specified, the builder direct all new clients to that server. If this\n   * method is never called, the Builder will attempt to create all clients\n   * locally.\n   *\n   * As an alternative to this method, you may also set the\n   * `SELENIUM_REMOTE_URL` environment variable.\n   *\n   * @param {string} url The URL of a remote server to use.\n   * @return {!Builder} A self reference.\n   */\n  usingServer(url) {\n    this.url_ = url\n    return this\n  }\n\n  /**\n   * @return {string} The URL of the WebDriver server this instance is\n   *     configured to use.\n   */\n  getServerUrl() {\n    return this.url_\n  }\n\n  /**\n   * Sets the URL of the proxy to use for the WebDriver's HTTP connections.\n   * If this method is never called, the Builder will create a connection\n   * without a proxy.\n   *\n   * @param {string} proxy The URL of a proxy to use.\n   * @return {!Builder} A self reference.\n   */\n  usingWebDriverProxy(proxy) {\n    this.proxy_ = proxy\n    return this\n  }\n\n  /**\n   * @return {?string} The URL of the proxy server to use for the WebDriver's\n   *    HTTP connections, or `null` if not set.\n   */\n  getWebDriverProxy() {\n    return this.proxy_\n  }\n\n  /**\n   * Sets the http agent to use for each request.\n   * If this method is not called, the Builder will use http.globalAgent by default.\n   *\n   * @param {http.Agent} agent The agent to use for each request.\n   * @return {!Builder} A self reference.\n   */\n  usingHttpAgent(agent) {\n    this.agent_ = agent\n    return this\n  }\n\n  /**\n   * @return {http.Agent} The http agent used for each request\n   */\n  getHttpAgent() {\n    return this.agent_\n  }\n\n  /**\n   * Recommended way is to use set*Options where * is the browser(eg setChromeOptions)\n   *\n   * Sets the desired capabilities when requesting a new session. This will\n   * overwrite any previously set capabilities.\n   * @param {!(Object|Capabilities)} capabilities The desired capabilities for\n   *     a new session.\n   * @return {!Builder} A self reference.\n   */\n  withCapabilities(capabilities) {\n    this.capabilities_ = new Capabilities(capabilities)\n    return this\n  }\n\n  /**\n   * Returns the base set of capabilities this instance is currently configured\n   * to use.\n   * @return {!Capabilities} The current capabilities for this builder.\n   */\n  getCapabilities() {\n    return this.capabilities_\n  }\n\n  /**\n   * Sets the desired capability when requesting a new session.\n   * If there is already a capability named key, its value will be overwritten with value.\n   * This is a convenience wrapper around builder.getCapabilities().set(key, value) to support Builder method chaining.\n   * @param {string} key The capability key.\n   * @param {*} value The capability value.\n   * @return {!Builder} A self reference.\n   */\n  setCapability(key, value) {\n    this.capabilities_.set(key, value)\n    return this\n  }\n\n  /**\n   * Configures the target browser for clients created by this instance.\n   * Any calls to {@link #withCapabilities} after this function will\n   * overwrite these settings.\n   *\n   * You may also define the target browser using the {@code SELENIUM_BROWSER}\n   * environment variable. If set, this environment variable should be of the\n   * form `browser[:[version][:platform]]`.\n   *\n   * @param {(string|!Browser)} name The name of the target browser;\n   *     common defaults are available on the {@link webdriver.Browser} enum.\n   * @param {string=} opt_version A desired version; may be omitted if any\n   *     version should be used.\n   * @param {(string|!capabilities.Platform)=} opt_platform\n   *     The desired platform; may be omitted if any platform may be used.\n   * @return {!Builder} A self reference.\n   */\n  forBrowser(name, opt_version, opt_platform) {\n    this.capabilities_.setBrowserName(name)\n    if (opt_version) {\n      this.capabilities_.setBrowserVersion(opt_version)\n    }\n    if (opt_platform) {\n      this.capabilities_.setPlatform(opt_platform)\n    }\n    return this\n  }\n\n  /**\n   * Sets the proxy configuration for the target browser.\n   * Any calls to {@link #withCapabilities} after this function will\n   * overwrite these settings.\n   *\n   * @param {!./lib/proxy.Config} config The configuration to use.\n   * @return {!Builder} A self reference.\n   */\n  setProxy(config) {\n    this.capabilities_.setProxy(config)\n    return this\n  }\n\n  /**\n   * Sets the logging preferences for the created session. Preferences may be\n   * changed by repeated calls, or by calling {@link #withCapabilities}.\n   * @param {!(./lib/logging.Preferences|Object<string, string>)} prefs The\n   *     desired logging preferences.\n   * @return {!Builder} A self reference.\n   */\n  setLoggingPrefs(prefs) {\n    this.capabilities_.setLoggingPrefs(prefs)\n    return this\n  }\n\n  /**\n   * Sets the default action to take with an unexpected alert before returning\n   * an error.\n   *\n   * @param {?capabilities.UserPromptHandler} behavior The desired behavior.\n   * @return {!Builder} A self reference.\n   * @see capabilities.Capabilities#setAlertBehavior\n   */\n  setAlertBehavior(behavior) {\n    this.capabilities_.setAlertBehavior(behavior)\n    return this\n  }\n\n  /**\n   * Sets Chrome specific {@linkplain chrome.Options options} for drivers\n   * created by this builder. Any logging or proxy settings defined on the given\n   * options will take precedence over those set through\n   * {@link #setLoggingPrefs} and {@link #setProxy}, respectively.\n   *\n   * @param {!chrome.Options} options The ChromeDriver options to use.\n   * @return {!Builder} A self reference.\n   */\n  setChromeOptions(options) {\n    this.chromeOptions_ = options\n    return this\n  }\n\n  /**\n   * @return {chrome.Options} the Chrome specific options currently configured\n   *     for this builder.\n   */\n  getChromeOptions() {\n    return this.chromeOptions_\n  }\n\n  /**\n   * Sets the service builder to use for managing the chromedriver child process\n   * when creating new Chrome sessions.\n   *\n   * @param {chrome.ServiceBuilder} service the service to use.\n   * @return {!Builder} A self reference.\n   */\n  setChromeService(service) {\n    if (service && !(service instanceof chrome.ServiceBuilder)) {\n      throw TypeError('not a chrome.ServiceBuilder object')\n    }\n    this.chromeService_ = service\n    return this\n  }\n\n  /**\n   * Sets Firefox specific {@linkplain firefox.Options options} for drivers\n   * created by this builder. Any logging or proxy settings defined on the given\n   * options will take precedence over those set through\n   * {@link #setLoggingPrefs} and {@link #setProxy}, respectively.\n   *\n   * @param {!firefox.Options} options The FirefoxDriver options to use.\n   * @return {!Builder} A self reference.\n   */\n  setFirefoxOptions(options) {\n    this.firefoxOptions_ = options\n    return this\n  }\n\n  /**\n   * @return {firefox.Options} the Firefox specific options currently configured\n   *     for this instance.\n   */\n  getFirefoxOptions() {\n    return this.firefoxOptions_\n  }\n\n  /**\n   * Sets the {@link firefox.ServiceBuilder} to use to manage the geckodriver\n   * child process when creating Firefox sessions locally.\n   *\n   * @param {firefox.ServiceBuilder} service the service to use.\n   * @return {!Builder} a self reference.\n   */\n  setFirefoxService(service) {\n    if (service && !(service instanceof firefox.ServiceBuilder)) {\n      throw TypeError('not a firefox.ServiceBuilder object')\n    }\n    this.firefoxService_ = service\n    return this\n  }\n\n  /**\n   * Set Internet Explorer specific {@linkplain ie.Options options} for drivers\n   * created by this builder. Any proxy settings defined on the given options\n   * will take precedence over those set through {@link #setProxy}.\n   *\n   * @param {!ie.Options} options The IEDriver options to use.\n   * @return {!Builder} A self reference.\n   */\n  setIeOptions(options) {\n    this.ieOptions_ = options\n    return this\n  }\n\n  /**\n   * Sets the {@link ie.ServiceBuilder} to use to manage the geckodriver\n   * child process when creating IE sessions locally.\n   *\n   * @param {ie.ServiceBuilder} service the service to use.\n   * @return {!Builder} a self reference.\n   */\n  setIeService(service) {\n    this.ieService_ = service\n    return this\n  }\n\n  /**\n   * Set {@linkplain edge.Options options} specific to Microsoft's Edge browser\n   * for drivers created by this builder. Any proxy settings defined on the\n   * given options will take precedence over those set through\n   * {@link #setProxy}.\n   *\n   * @param {!edge.Options} options The MicrosoftEdgeDriver options to use.\n   * @return {!Builder} A self reference.\n   */\n  setEdgeOptions(options) {\n    this.edgeOptions_ = options\n    return this\n  }\n\n  /**\n   * Sets the {@link edge.ServiceBuilder} to use to manage the\n   * MicrosoftEdgeDriver child process when creating sessions locally.\n   *\n   * @param {edge.ServiceBuilder} service the service to use.\n   * @return {!Builder} a self reference.\n   */\n  setEdgeService(service) {\n    if (service && !(service instanceof edge.ServiceBuilder)) {\n      throw TypeError('not a edge.ServiceBuilder object')\n    }\n    this.edgeService_ = service\n    return this\n  }\n\n  /**\n   * Sets Safari specific {@linkplain safari.Options options} for drivers\n   * created by this builder. Any logging settings defined on the given options\n   * will take precedence over those set through {@link #setLoggingPrefs}.\n   *\n   * @param {!safari.Options} options The Safari options to use.\n   * @return {!Builder} A self reference.\n   */\n  setSafariOptions(options) {\n    this.safariOptions_ = options\n    return this\n  }\n\n  /**\n   * @return {safari.Options} the Safari specific options currently configured\n   *     for this instance.\n   */\n  getSafariOptions() {\n    return this.safariOptions_\n  }\n\n  /**\n   * Creates a new WebDriver client based on this builder's current\n   * configuration.\n   *\n   * This method will return a {@linkplain ThenableWebDriver} instance, allowing\n   * users to issue commands directly without calling `then()`. The returned\n   * thenable wraps a promise that will resolve to a concrete\n   * {@linkplain webdriver.WebDriver WebDriver} instance. The promise will be\n   * rejected if the remote end fails to create a new session.\n   *\n   * @return {!ThenableWebDriver} A new WebDriver instance.\n   * @throws {Error} If the current configuration is invalid.\n   */\n  build() {\n    // Create a copy for any changes we may need to make based on the current\n    // environment.\n    const capabilities = new Capabilities(this.capabilities_)\n\n    let browser\n    if (!this.ignoreEnv_ && process.env.SELENIUM_BROWSER) {\n      this.log_.fine(`SELENIUM_BROWSER=${process.env.SELENIUM_BROWSER}`)\n      browser = process.env.SELENIUM_BROWSER.split(/:/, 3)\n      capabilities.setBrowserName(browser[0])\n\n      browser[1] && capabilities.setBrowserVersion(browser[1])\n      browser[2] && capabilities.setPlatform(browser[2])\n    }\n\n    browser = capabilities.get(Capability.BROWSER_NAME)\n\n    /**\n     * If browser is not defined in forBrowser, check if browserOptions are defined to pick the browserName\n     */\n    if (!browser) {\n      const options =\n        this.chromeOptions_ || this.firefoxOptions_ || this.ieOptions_ || this.safariOptions_ || this.edgeOptions_\n      if (options) {\n        browser = options['map_'].get(Capability.BROWSER_NAME)\n      }\n    }\n\n    if (typeof browser !== 'string') {\n      throw TypeError(\n        `Target browser must be a string, but is <${typeof browser}>;` + ' did you forget to call forBrowser()?',\n      )\n    }\n\n    if (browser === 'ie') {\n      browser = Browser.INTERNET_EXPLORER\n    }\n\n    // Apply browser specific overrides.\n    if (browser === Browser.CHROME && this.chromeOptions_) {\n      capabilities.merge(this.chromeOptions_)\n    } else if (browser === Browser.FIREFOX && this.firefoxOptions_) {\n      capabilities.merge(this.firefoxOptions_)\n    } else if (browser === Browser.INTERNET_EXPLORER && this.ieOptions_) {\n      capabilities.merge(this.ieOptions_)\n    } else if (browser === Browser.SAFARI && this.safariOptions_) {\n      capabilities.merge(this.safariOptions_)\n    } else if (browser === Browser.EDGE && this.edgeOptions_) {\n      capabilities.merge(this.edgeOptions_)\n    }\n\n    checkOptions(capabilities, 'chromeOptions', chrome.Options, 'setChromeOptions')\n    checkOptions(capabilities, 'moz:firefoxOptions', firefox.Options, 'setFirefoxOptions')\n    checkOptions(capabilities, 'safari.options', safari.Options, 'setSafariOptions')\n\n    // Check for a remote browser.\n    let url = this.url_\n    if (!this.ignoreEnv_) {\n      if (process.env.SELENIUM_REMOTE_URL) {\n        this.log_.fine(`SELENIUM_REMOTE_URL=${process.env.SELENIUM_REMOTE_URL}`)\n        url = process.env.SELENIUM_REMOTE_URL\n      } else if (process.env.SELENIUM_SERVER_JAR) {\n        this.log_.fine(`SELENIUM_SERVER_JAR=${process.env.SELENIUM_SERVER_JAR}`)\n        url = startSeleniumServer(process.env.SELENIUM_SERVER_JAR)\n      }\n    }\n\n    if (url) {\n      this.log_.fine('Creating session on remote server')\n      let client = Promise.resolve(url).then((url) => new _http.HttpClient(url, this.agent_, this.proxy_))\n      let executor = new _http.Executor(client)\n\n      if (browser === Browser.CHROME) {\n        const driver = ensureFileDetectorsAreEnabled(chrome.Driver)\n        return createDriver(driver, capabilities, executor)\n      }\n\n      if (browser === Browser.FIREFOX) {\n        const driver = ensureFileDetectorsAreEnabled(firefox.Driver)\n        return createDriver(driver, capabilities, executor)\n      }\n      return createDriver(WebDriver, executor, capabilities)\n    }\n\n    // Check for a native browser.\n    switch (browser) {\n      case Browser.CHROME: {\n        let service = null\n        if (this.chromeService_) {\n          service = this.chromeService_.build()\n        }\n        return createDriver(chrome.Driver, capabilities, service)\n      }\n\n      case Browser.FIREFOX: {\n        let service = null\n        if (this.firefoxService_) {\n          service = this.firefoxService_.build()\n        }\n        return createDriver(firefox.Driver, capabilities, service)\n      }\n\n      case Browser.INTERNET_EXPLORER: {\n        let service = null\n        if (this.ieService_) {\n          service = this.ieService_.build()\n        }\n        return createDriver(ie.Driver, capabilities, service)\n      }\n\n      case Browser.EDGE: {\n        let service = null\n        if (this.edgeService_) {\n          service = this.edgeService_.build()\n        }\n        return createDriver(edge.Driver, capabilities, service)\n      }\n\n      case Browser.SAFARI:\n        return createDriver(safari.Driver, capabilities)\n\n      default:\n        throw new Error('Do not know how to build driver: ' + browser + '; did you forget to call usingServer(url)?')\n    }\n  }\n}\n\n/**\n * In the 3.x releases, the various browser option classes\n * (e.g. firefox.Options) had to be manually set as an option using the\n * Capabilities class:\n *\n *     let ffo = new firefox.Options();\n *     // Configure firefox options...\n *\n *     let caps = new Capabilities();\n *     caps.set('moz:firefoxOptions', ffo);\n *\n *     let driver = new Builder()\n *         .withCapabilities(caps)\n *         .build();\n *\n * The options are now subclasses of Capabilities and can be used directly. A\n * direct translation of the above is:\n *\n *     let ffo = new firefox.Options();\n *     // Configure firefox options...\n *\n *     let driver = new Builder()\n *         .withCapabilities(ffo)\n *         .build();\n *\n * You can also set the options for various browsers at once and let the builder\n * choose the correct set at runtime (see Builder docs above):\n *\n *     let ffo = new firefox.Options();\n *     // Configure ...\n *\n *     let co = new chrome.Options();\n *     // Configure ...\n *\n *     let driver = new Builder()\n *         .setChromeOptions(co)\n *         .setFirefoxOptions(ffo)\n *         .build();\n *\n * @param {!Capabilities} caps\n * @param {string} key\n * @param {function(new: Capabilities)} optionType\n * @param {string} setMethod\n * @throws {error.InvalidArgumentError}\n */\nfunction checkOptions(caps, key, optionType, setMethod) {\n  let val = caps.get(key)\n  if (val instanceof optionType) {\n    throw new error.InvalidArgumentError(\n      'Options class extends Capabilities and should not be set as key ' +\n        `\"${key}\"; set browser-specific options with ` +\n        `Builder.${setMethod}(). For more information, see the ` +\n        'documentation attached to the function that threw this error',\n    )\n  }\n}\n\n// PUBLIC API\n\nexports.Browser = capabilities.Browser\nexports.Builder = Builder\nexports.Button = input.Button\nexports.By = by.By\nexports.RelativeBy = by.RelativeBy\nexports.withTagName = by.withTagName\nexports.locateWith = by.locateWith\nexports.Capabilities = capabilities.Capabilities\nexports.Capability = capabilities.Capability\nexports.Condition = webdriver.Condition\nexports.FileDetector = input.FileDetector\nexports.Key = input.Key\nexports.Origin = input.Origin\nexports.Session = session.Session\nexports.ThenableWebDriver = ThenableWebDriver\nexports.WebDriver = webdriver.WebDriver\nexports.WebElement = webdriver.WebElement\nexports.WebElementCondition = webdriver.WebElementCondition\nexports.WebElementPromise = webdriver.WebElementPromise\nexports.error = error\nexports.logging = logging\nexports.promise = promise\nexports.until = until\nexports.Select = select.Select\nexports.LogInspector = LogInspector\nexports.BrowsingContext = BrowsingContext\nexports.BrowsingContextInspector = BrowsingContextInspector\nexports.ScriptManager = ScriptManager\nexports.NetworkInspector = NetworkInspector\nexports.version = version\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/io/exec.js":
/*!****************************************************!*\
  !*** ./node_modules/selenium-webdriver/io/exec.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\n\nconst childProcess = __webpack_require__(/*! node:child_process */ \"node:child_process\")\n\n/**\n * Options for configuring an executed command.\n *\n * @record\n */\nclass Options {\n  constructor() {\n    /**\n     * Command line arguments for the child process, if any.\n     * @type (!Array<string>|undefined)\n     */\n    this.args\n\n    /**\n     * Environment variables for the spawned process. If unspecified, the\n     * child will inherit this process' environment.\n     *\n     * @type {(!Object<string, string>|undefined)}\n     */\n    this.env\n\n    /**\n     * IO conifguration for the spawned server child process. If unspecified,\n     * the child process' IO output will be ignored.\n     *\n     * @type {(string|!Array<string|number|!stream.Stream|null|undefined>|\n     *           undefined)}\n     * @see <https://nodejs.org/dist/latest-v8.x/docs/api/child_process.html#child_process_options_stdio>\n     */\n    this.stdio\n  }\n}\n\n/**\n * Describes a command's termination conditions.\n */\nclass Result {\n  /**\n   * @param {?number} code The exit code, or {@code null} if the command did not\n   *     exit normally.\n   * @param {?string} signal The signal used to kill the command, or\n   *     {@code null}.\n   */\n  constructor(code, signal) {\n    /** @type {?number} */\n    this.code = code\n\n    /** @type {?string} */\n    this.signal = signal\n  }\n\n  /** @override */\n  toString() {\n    return `Result(code=${this.code}, signal=${this.signal})`\n  }\n}\n\nconst COMMAND_RESULT = /** !WeakMap<!Command, !Promise<!Result>> */ new WeakMap()\nconst KILL_HOOK = /** !WeakMap<!Command, function(string)> */ new WeakMap()\n\n/**\n * Represents a command running in a sub-process.\n */\nclass Command {\n  /**\n   * @param {!Promise<!Result>} result The command result.\n   * @param {function(string)} onKill The function to call when {@link #kill()}\n   *     is called.\n   */\n  constructor(result, onKill) {\n    COMMAND_RESULT.set(this, result)\n    KILL_HOOK.set(this, onKill)\n  }\n\n  /**\n   * @return {!Promise<!Result>} A promise for the result of this\n   *     command.\n   */\n  result() {\n    return /** @type {!Promise<!Result>} */ (COMMAND_RESULT.get(this))\n  }\n\n  /**\n   * Sends a signal to the underlying process.\n   * @param {string=} opt_signal The signal to send; defaults to `SIGTERM`.\n   */\n  kill(opt_signal) {\n    KILL_HOOK.get(this)(opt_signal || 'SIGTERM')\n  }\n}\n\n// PUBLIC API\n\n/**\n * Spawns a child process. The returned {@link Command} may be used to wait\n * for the process result or to send signals to the process.\n *\n * @param {string} command The executable to spawn.\n * @param {Options=} opt_options The command options.\n * @return {!Command} The launched command.\n */\nfunction exec(command, opt_options) {\n  const options = opt_options || {}\n\n  let proc = childProcess.spawn(command, options.args || [], {\n    env: options.env || process.env,\n    stdio: options.stdio || 'ignore',\n  })\n\n  // This process should not wait on the spawned child, however, we do\n  // want to ensure the child is killed when this process exits.\n  proc.unref()\n  process.once('exit', onProcessExit)\n\n  const result = new Promise((resolve, reject) => {\n    proc.once('exit', (code, signal) => {\n      proc = null\n      process.removeListener('exit', onProcessExit)\n      resolve(new Result(code, signal))\n    })\n\n    proc.once('error', (err) => {\n      reject(err)\n    })\n  })\n  return new Command(result, killCommand)\n\n  function onProcessExit() {\n    killCommand('SIGTERM')\n  }\n\n  function killCommand(signal) {\n    process.removeListener('exit', onProcessExit)\n    if (proc) {\n      proc.kill(signal)\n      proc = null\n    }\n  }\n}\n\n// Exported to improve generated API documentation.\n\nmodule.exports = {\n  Command,\n  Options,\n  Result,\n  exec,\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc2VsZW5pdW0td2ViZHJpdmVyL2lvL2V4ZWMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFWTs7QUFFWixxQkFBcUIsbUJBQU8sQ0FBQyw4Q0FBb0I7O0FBRWpEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxTQUFTLHdCQUF3QixZQUFZO0FBQzFEO0FBQ0EsYUFBYSxTQUFTO0FBQ3RCLFVBQVUsV0FBVztBQUNyQjtBQUNBO0FBQ0EsZUFBZSxTQUFTO0FBQ3hCOztBQUVBLGVBQWUsU0FBUztBQUN4QjtBQUNBOztBQUVBO0FBQ0E7QUFDQSwwQkFBMEIsVUFBVSxXQUFXLFlBQVk7QUFDM0Q7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLG1CQUFtQjtBQUNoQyxhQUFhLGtCQUFrQixrQ0FBa0M7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsY0FBYyxtQkFBbUI7QUFDakM7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLG1CQUFtQjtBQUN6Qzs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxTQUFTLCtCQUErQjtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EseUNBQXlDLGVBQWU7QUFDeEQ7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFVBQVU7QUFDckIsWUFBWSxVQUFVO0FBQ3RCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2dvb2dsZS1zaGVldHMtc2VsZW5pdW0tYXV0b21hdGlvbi8uL25vZGVfbW9kdWxlcy9zZWxlbml1bS13ZWJkcml2ZXIvaW8vZXhlYy5qcz9mZmM2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBTb2Z0d2FyZSBGcmVlZG9tIENvbnNlcnZhbmN5IChTRkMpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgU0ZDIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbid1c2Ugc3RyaWN0J1xuXG5jb25zdCBjaGlsZFByb2Nlc3MgPSByZXF1aXJlKCdub2RlOmNoaWxkX3Byb2Nlc3MnKVxuXG4vKipcbiAqIE9wdGlvbnMgZm9yIGNvbmZpZ3VyaW5nIGFuIGV4ZWN1dGVkIGNvbW1hbmQuXG4gKlxuICogQHJlY29yZFxuICovXG5jbGFzcyBPcHRpb25zIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgLyoqXG4gICAgICogQ29tbWFuZCBsaW5lIGFyZ3VtZW50cyBmb3IgdGhlIGNoaWxkIHByb2Nlc3MsIGlmIGFueS5cbiAgICAgKiBAdHlwZSAoIUFycmF5PHN0cmluZz58dW5kZWZpbmVkKVxuICAgICAqL1xuICAgIHRoaXMuYXJnc1xuXG4gICAgLyoqXG4gICAgICogRW52aXJvbm1lbnQgdmFyaWFibGVzIGZvciB0aGUgc3Bhd25lZCBwcm9jZXNzLiBJZiB1bnNwZWNpZmllZCwgdGhlXG4gICAgICogY2hpbGQgd2lsbCBpbmhlcml0IHRoaXMgcHJvY2VzcycgZW52aXJvbm1lbnQuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7KCFPYmplY3Q8c3RyaW5nLCBzdHJpbmc+fHVuZGVmaW5lZCl9XG4gICAgICovXG4gICAgdGhpcy5lbnZcblxuICAgIC8qKlxuICAgICAqIElPIGNvbmlmZ3VyYXRpb24gZm9yIHRoZSBzcGF3bmVkIHNlcnZlciBjaGlsZCBwcm9jZXNzLiBJZiB1bnNwZWNpZmllZCxcbiAgICAgKiB0aGUgY2hpbGQgcHJvY2VzcycgSU8gb3V0cHV0IHdpbGwgYmUgaWdub3JlZC5cbiAgICAgKlxuICAgICAqIEB0eXBlIHsoc3RyaW5nfCFBcnJheTxzdHJpbmd8bnVtYmVyfCFzdHJlYW0uU3RyZWFtfG51bGx8dW5kZWZpbmVkPnxcbiAgICAgKiAgICAgICAgICAgdW5kZWZpbmVkKX1cbiAgICAgKiBAc2VlIDxodHRwczovL25vZGVqcy5vcmcvZGlzdC9sYXRlc3QtdjgueC9kb2NzL2FwaS9jaGlsZF9wcm9jZXNzLmh0bWwjY2hpbGRfcHJvY2Vzc19vcHRpb25zX3N0ZGlvPlxuICAgICAqL1xuICAgIHRoaXMuc3RkaW9cbiAgfVxufVxuXG4vKipcbiAqIERlc2NyaWJlcyBhIGNvbW1hbmQncyB0ZXJtaW5hdGlvbiBjb25kaXRpb25zLlxuICovXG5jbGFzcyBSZXN1bHQge1xuICAvKipcbiAgICogQHBhcmFtIHs/bnVtYmVyfSBjb2RlIFRoZSBleGl0IGNvZGUsIG9yIHtAY29kZSBudWxsfSBpZiB0aGUgY29tbWFuZCBkaWQgbm90XG4gICAqICAgICBleGl0IG5vcm1hbGx5LlxuICAgKiBAcGFyYW0gez9zdHJpbmd9IHNpZ25hbCBUaGUgc2lnbmFsIHVzZWQgdG8ga2lsbCB0aGUgY29tbWFuZCwgb3JcbiAgICogICAgIHtAY29kZSBudWxsfS5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGNvZGUsIHNpZ25hbCkge1xuICAgIC8qKiBAdHlwZSB7P251bWJlcn0gKi9cbiAgICB0aGlzLmNvZGUgPSBjb2RlXG5cbiAgICAvKiogQHR5cGUgez9zdHJpbmd9ICovXG4gICAgdGhpcy5zaWduYWwgPSBzaWduYWxcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIGBSZXN1bHQoY29kZT0ke3RoaXMuY29kZX0sIHNpZ25hbD0ke3RoaXMuc2lnbmFsfSlgXG4gIH1cbn1cblxuY29uc3QgQ09NTUFORF9SRVNVTFQgPSAvKiogIVdlYWtNYXA8IUNvbW1hbmQsICFQcm9taXNlPCFSZXN1bHQ+PiAqLyBuZXcgV2Vha01hcCgpXG5jb25zdCBLSUxMX0hPT0sgPSAvKiogIVdlYWtNYXA8IUNvbW1hbmQsIGZ1bmN0aW9uKHN0cmluZyk+ICovIG5ldyBXZWFrTWFwKClcblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgY29tbWFuZCBydW5uaW5nIGluIGEgc3ViLXByb2Nlc3MuXG4gKi9cbmNsYXNzIENvbW1hbmQge1xuICAvKipcbiAgICogQHBhcmFtIHshUHJvbWlzZTwhUmVzdWx0Pn0gcmVzdWx0IFRoZSBjb21tYW5kIHJlc3VsdC5cbiAgICogQHBhcmFtIHtmdW5jdGlvbihzdHJpbmcpfSBvbktpbGwgVGhlIGZ1bmN0aW9uIHRvIGNhbGwgd2hlbiB7QGxpbmsgI2tpbGwoKX1cbiAgICogICAgIGlzIGNhbGxlZC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHJlc3VsdCwgb25LaWxsKSB7XG4gICAgQ09NTUFORF9SRVNVTFQuc2V0KHRoaXMsIHJlc3VsdClcbiAgICBLSUxMX0hPT0suc2V0KHRoaXMsIG9uS2lsbClcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHshUHJvbWlzZTwhUmVzdWx0Pn0gQSBwcm9taXNlIGZvciB0aGUgcmVzdWx0IG9mIHRoaXNcbiAgICogICAgIGNvbW1hbmQuXG4gICAqL1xuICByZXN1bHQoKSB7XG4gICAgcmV0dXJuIC8qKiBAdHlwZSB7IVByb21pc2U8IVJlc3VsdD59ICovIChDT01NQU5EX1JFU1VMVC5nZXQodGhpcykpXG4gIH1cblxuICAvKipcbiAgICogU2VuZHMgYSBzaWduYWwgdG8gdGhlIHVuZGVybHlpbmcgcHJvY2Vzcy5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBvcHRfc2lnbmFsIFRoZSBzaWduYWwgdG8gc2VuZDsgZGVmYXVsdHMgdG8gYFNJR1RFUk1gLlxuICAgKi9cbiAga2lsbChvcHRfc2lnbmFsKSB7XG4gICAgS0lMTF9IT09LLmdldCh0aGlzKShvcHRfc2lnbmFsIHx8ICdTSUdURVJNJylcbiAgfVxufVxuXG4vLyBQVUJMSUMgQVBJXG5cbi8qKlxuICogU3Bhd25zIGEgY2hpbGQgcHJvY2Vzcy4gVGhlIHJldHVybmVkIHtAbGluayBDb21tYW5kfSBtYXkgYmUgdXNlZCB0byB3YWl0XG4gKiBmb3IgdGhlIHByb2Nlc3MgcmVzdWx0IG9yIHRvIHNlbmQgc2lnbmFscyB0byB0aGUgcHJvY2Vzcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29tbWFuZCBUaGUgZXhlY3V0YWJsZSB0byBzcGF3bi5cbiAqIEBwYXJhbSB7T3B0aW9ucz19IG9wdF9vcHRpb25zIFRoZSBjb21tYW5kIG9wdGlvbnMuXG4gKiBAcmV0dXJuIHshQ29tbWFuZH0gVGhlIGxhdW5jaGVkIGNvbW1hbmQuXG4gKi9cbmZ1bmN0aW9uIGV4ZWMoY29tbWFuZCwgb3B0X29wdGlvbnMpIHtcbiAgY29uc3Qgb3B0aW9ucyA9IG9wdF9vcHRpb25zIHx8IHt9XG5cbiAgbGV0IHByb2MgPSBjaGlsZFByb2Nlc3Muc3Bhd24oY29tbWFuZCwgb3B0aW9ucy5hcmdzIHx8IFtdLCB7XG4gICAgZW52OiBvcHRpb25zLmVudiB8fCBwcm9jZXNzLmVudixcbiAgICBzdGRpbzogb3B0aW9ucy5zdGRpbyB8fCAnaWdub3JlJyxcbiAgfSlcblxuICAvLyBUaGlzIHByb2Nlc3Mgc2hvdWxkIG5vdCB3YWl0IG9uIHRoZSBzcGF3bmVkIGNoaWxkLCBob3dldmVyLCB3ZSBkb1xuICAvLyB3YW50IHRvIGVuc3VyZSB0aGUgY2hpbGQgaXMga2lsbGVkIHdoZW4gdGhpcyBwcm9jZXNzIGV4aXRzLlxuICBwcm9jLnVucmVmKClcbiAgcHJvY2Vzcy5vbmNlKCdleGl0Jywgb25Qcm9jZXNzRXhpdClcblxuICBjb25zdCByZXN1bHQgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgcHJvYy5vbmNlKCdleGl0JywgKGNvZGUsIHNpZ25hbCkgPT4ge1xuICAgICAgcHJvYyA9IG51bGxcbiAgICAgIHByb2Nlc3MucmVtb3ZlTGlzdGVuZXIoJ2V4aXQnLCBvblByb2Nlc3NFeGl0KVxuICAgICAgcmVzb2x2ZShuZXcgUmVzdWx0KGNvZGUsIHNpZ25hbCkpXG4gICAgfSlcblxuICAgIHByb2Mub25jZSgnZXJyb3InLCAoZXJyKSA9PiB7XG4gICAgICByZWplY3QoZXJyKVxuICAgIH0pXG4gIH0pXG4gIHJldHVybiBuZXcgQ29tbWFuZChyZXN1bHQsIGtpbGxDb21tYW5kKVxuXG4gIGZ1bmN0aW9uIG9uUHJvY2Vzc0V4aXQoKSB7XG4gICAga2lsbENvbW1hbmQoJ1NJR1RFUk0nKVxuICB9XG5cbiAgZnVuY3Rpb24ga2lsbENvbW1hbmQoc2lnbmFsKSB7XG4gICAgcHJvY2Vzcy5yZW1vdmVMaXN0ZW5lcignZXhpdCcsIG9uUHJvY2Vzc0V4aXQpXG4gICAgaWYgKHByb2MpIHtcbiAgICAgIHByb2Mua2lsbChzaWduYWwpXG4gICAgICBwcm9jID0gbnVsbFxuICAgIH1cbiAgfVxufVxuXG4vLyBFeHBvcnRlZCB0byBpbXByb3ZlIGdlbmVyYXRlZCBBUEkgZG9jdW1lbnRhdGlvbi5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIENvbW1hbmQsXG4gIE9wdGlvbnMsXG4gIFJlc3VsdCxcbiAgZXhlYyxcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/io/exec.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/io/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/selenium-webdriver/io/index.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\n\nconst fs = __webpack_require__(/*! node:fs */ \"node:fs\")\nconst path = __webpack_require__(/*! node:path */ \"node:path\")\nconst tmp = __webpack_require__(/*! tmp */ \"(rsc)/./node_modules/tmp/lib/tmp.js\")\n\n/**\n * @param {!Function} fn .\n * @return {!Promise<T>} .\n * @template T\n */\nfunction checkedCall(fn) {\n  return new Promise((resolve, reject) => {\n    try {\n      fn((err, value) => {\n        if (err) {\n          reject(err)\n        } else {\n          resolve(value)\n        }\n      })\n    } catch (e) {\n      reject(e)\n    }\n  })\n}\n\n/**\n * Recursively removes a directory and all of its contents. This is equivalent\n * to {@code rm -rf} on a POSIX system.\n * @param {string} dirPath Path to the directory to remove.\n * @return {!Promise} A promise to be resolved when the operation has\n *     completed.\n */\nfunction rmDir(dirPath) {\n  return new Promise(function (fulfill, reject) {\n    fs.rm(dirPath, { recursive: true, maxRetries: 2 }, function (err) {\n      if (err && err.code === 'ENOENT') {\n        fulfill()\n      } else if (err) {\n        reject(err)\n      }\n      fulfill()\n    })\n  })\n}\n\n/**\n * Copies one file to another.\n * @param {string} src The source file.\n * @param {string} dst The destination file.\n * @return {!Promise<string>} A promise for the copied file's path.\n */\nfunction copy(src, dst) {\n  return new Promise(function (fulfill, reject) {\n    const rs = fs.createReadStream(src)\n    rs.on('error', reject)\n\n    const ws = fs.createWriteStream(dst)\n    ws.on('error', reject)\n    ws.on('close', () => fulfill(dst))\n\n    rs.pipe(ws)\n  })\n}\n\n/**\n * Recursively copies the contents of one directory to another.\n * @param {string} src The source directory to copy.\n * @param {string} dst The directory to copy into.\n * @param {(RegExp|function(string): boolean)=} opt_exclude An exclusion filter\n *     as either a regex or predicate function. All files matching this filter\n *     will not be copied.\n * @return {!Promise<string>} A promise for the destination\n *     directory's path once all files have been copied.\n */\nfunction copyDir(src, dst, opt_exclude) {\n  let predicate = opt_exclude\n  if (opt_exclude && typeof opt_exclude !== 'function') {\n    predicate = function (p) {\n      return !opt_exclude.test(p)\n    }\n  }\n\n  if (!fs.existsSync(dst)) {\n    fs.mkdirSync(dst)\n  }\n\n  let files = fs.readdirSync(src)\n  files = files.map(function (file) {\n    return path.join(src, file)\n  })\n\n  if (predicate) {\n    files = files.filter(/** @type {function(string): boolean} */ (predicate))\n  }\n\n  const results = []\n  files.forEach(function (file) {\n    const stats = fs.statSync(file)\n    const target = path.join(dst, path.basename(file))\n\n    if (stats.isDirectory()) {\n      if (!fs.existsSync(target)) {\n        fs.mkdirSync(target, stats.mode)\n      }\n      results.push(copyDir(file, target, predicate))\n    } else {\n      results.push(copy(file, target))\n    }\n  })\n\n  return Promise.all(results).then(() => dst)\n}\n\n/**\n * Tests if a file path exists.\n * @param {string} aPath The path to test.\n * @return {!Promise<boolean>} A promise for whether the file exists.\n */\nfunction exists(aPath) {\n  return new Promise(function (fulfill, reject) {\n    let type = typeof aPath\n    if (type !== 'string') {\n      reject(TypeError(`expected string path, but got ${type}`))\n    } else {\n      fulfill(fs.existsSync(aPath))\n    }\n  })\n}\n\n/**\n * Calls `stat(2)`.\n * @param {string} aPath The path to stat.\n * @return {!Promise<!fs.Stats>} A promise for the file stats.\n */\nfunction stat(aPath) {\n  return checkedCall((callback) => fs.stat(aPath, callback))\n}\n\n/**\n * Deletes a name from the filesystem and possibly the file it refers to. Has\n * no effect if the file does not exist.\n * @param {string} aPath The path to remove.\n * @return {!Promise} A promise for when the file has been removed.\n */\nfunction unlink(aPath) {\n  return new Promise(function (fulfill, reject) {\n    const exists = fs.existsSync(aPath)\n    if (exists) {\n      fs.unlink(aPath, function (err) {\n        ;(err && reject(err)) || fulfill()\n      })\n    } else {\n      fulfill()\n    }\n  })\n}\n\n/**\n * @return {!Promise<string>} A promise for the path to a temporary directory.\n * @see https://www.npmjs.org/package/tmp\n */\nfunction tmpDir() {\n  return checkedCall((callback) => tmp.dir({ unsafeCleanup: true }, callback))\n}\n\n/**\n * @param {{postfix: string}=} opt_options Temporary file options.\n * @return {!Promise<string>} A promise for the path to a temporary file.\n * @see https://www.npmjs.org/package/tmp\n */\nfunction tmpFile(opt_options) {\n  return checkedCall((callback) => {\n    /**  check fixed in v > 0.2.1 if\n     * (typeof options === 'function') {\n     *     return [{}, options];\n     * }\n     */\n    tmp.file(opt_options, callback)\n  })\n}\n\n/**\n * Searches the {@code PATH} environment variable for the given file.\n * @param {string} file The file to locate on the PATH.\n * @param {boolean=} opt_checkCwd Whether to always start with the search with\n *     the current working directory, regardless of whether it is explicitly\n *     listed on the PATH.\n * @return {?string} Path to the located file, or {@code null} if it could\n *     not be found.\n */\nfunction findInPath(file, opt_checkCwd) {\n  const dirs = []\n  if (opt_checkCwd) {\n    dirs.push(process.cwd())\n  }\n  dirs.push.apply(dirs, process.env['PATH'].split(path.delimiter))\n\n  let foundInDir = dirs.find((dir) => {\n    let tmp = path.join(dir, file)\n    try {\n      let stats = fs.statSync(tmp)\n      return stats.isFile() && !stats.isDirectory()\n      /*eslint no-unused-vars: \"off\"*/\n    } catch (ex) {\n      return false\n    }\n  })\n\n  return foundInDir ? path.join(foundInDir, file) : null\n}\n\n/**\n * Reads the contents of the given file.\n *\n * @param {string} aPath Path to the file to read.\n * @return {!Promise<!Buffer>} A promise that will resolve with a buffer of the\n *     file contents.\n */\nfunction read(aPath) {\n  return checkedCall((callback) => fs.readFile(aPath, callback))\n}\n\n/**\n * Writes to a file.\n *\n * @param {string} aPath Path to the file to write to.\n * @param {(string|!Buffer)} data The data to write.\n * @return {!Promise} A promise that will resolve when the operation has\n *     completed.\n */\nfunction write(aPath, data) {\n  return checkedCall((callback) => fs.writeFile(aPath, data, callback))\n}\n\n/**\n * Creates a directory.\n *\n * @param {string} aPath The directory path.\n * @return {!Promise<string>} A promise that will resolve with the path of the\n *     created directory.\n */\nfunction mkdir(aPath) {\n  return checkedCall((callback) => {\n    fs.mkdir(aPath, undefined, (err) => {\n      if (err && err.code !== 'EEXIST') {\n        callback(err)\n      } else {\n        callback(null, aPath)\n      }\n    })\n  })\n}\n\n/**\n * Recursively creates a directory and any ancestors that do not yet exist.\n *\n * @param {string} dir The directory path to create.\n * @return {!Promise<string>} A promise that will resolve with the path of the\n *     created directory.\n */\nfunction mkdirp(dir) {\n  return checkedCall((callback) => {\n    fs.mkdir(dir, undefined, (err) => {\n      if (!err) {\n        callback(null, dir)\n        return\n      }\n\n      switch (err.code) {\n        case 'EEXIST':\n          callback(null, dir)\n          return\n        case 'ENOENT':\n          return mkdirp(path.dirname(dir))\n            .then(() => mkdirp(dir))\n            .then(\n              () => callback(null, dir),\n              (err) => callback(err),\n            )\n        default:\n          callback(err)\n          return\n      }\n    })\n  })\n}\n\n/**\n * Recursively walks a directory, returning a promise that will resolve with\n * a list of all files/directories seen.\n *\n * @param {string} rootPath the directory to walk.\n * @return {!Promise<!Array<{path: string, dir: boolean}>>} a promise that will\n *     resolve with a list of entries seen. For each entry, the recorded path\n *     will be relative to `rootPath`.\n */\nfunction walkDir(rootPath) {\n  const seen = []\n  return (function walk(dir) {\n    return checkedCall((callback) => fs.readdir(dir, callback)).then((files) =>\n      Promise.all(\n        files.map((file) => {\n          file = path.join(dir, file)\n          return checkedCall((cb) => fs.stat(file, cb)).then((stats) => {\n            seen.push({\n              path: path.relative(rootPath, file),\n              dir: stats.isDirectory(),\n            })\n            return stats.isDirectory() && walk(file)\n          })\n        }),\n      ),\n    )\n  })(rootPath).then(() => seen)\n}\n\n// PUBLIC API\nmodule.exports = {\n  walkDir,\n  rmDir,\n  mkdirp,\n  mkdir,\n  write,\n  read,\n  findInPath,\n  tmpFile,\n  tmpDir,\n  unlink,\n  copy,\n  copyDir,\n  exists,\n  stat,\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/io/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/io/zip.js":
/*!***************************************************!*\
  !*** ./node_modules/selenium-webdriver/io/zip.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\n\nconst jszip = __webpack_require__(/*! jszip */ \"(rsc)/./node_modules/jszip/lib/index.js\")\nconst path = __webpack_require__(/*! node:path */ \"node:path\")\n\nconst io = __webpack_require__(/*! ./index */ \"(rsc)/./node_modules/selenium-webdriver/io/index.js\")\nconst { InvalidArgumentError } = __webpack_require__(/*! ../lib/error */ \"(rsc)/./node_modules/selenium-webdriver/lib/error.js\")\n\n/**\n * Manages a zip archive.\n */\nclass Zip {\n  constructor() {\n    /** @private @const */\n    this.z_ = new jszip()\n\n    /** @private @const {!Set<!Promise<?>>} */\n    this.pendingAdds_ = new Set()\n  }\n\n  /**\n   * Adds a file to this zip.\n   *\n   * @param {string} filePath path to the file to add.\n   * @param {string=} zipPath path to the file in the zip archive, defaults\n   *     to the basename of `filePath`.\n   * @return {!Promise<?>} a promise that will resolve when added.\n   */\n  addFile(filePath, zipPath = path.basename(filePath)) {\n    let add = io\n      .read(filePath)\n      .then((buffer) => this.z_.file(/** @type {string} */ (zipPath.replace(/\\\\/g, '/')), buffer))\n    this.pendingAdds_.add(add)\n    return add.then(\n      () => this.pendingAdds_.delete(add),\n      (e) => {\n        this.pendingAdds_.delete(add)\n        throw e\n      },\n    )\n  }\n\n  /**\n   * Recursively adds a directory and all of its contents to this archive.\n   *\n   * @param {string} dirPath path to the directory to add.\n   * @param {string=} zipPath path to the folder in the archive to add the\n   *     directory contents to. Defaults to the root folder.\n   * @return {!Promise<?>} returns a promise that will resolve when\n   * the operation is complete.\n   */\n  addDir(dirPath, zipPath = '') {\n    return io.walkDir(dirPath).then((entries) => {\n      let archive = this.z_\n      if (zipPath) {\n        archive = archive.folder(zipPath)\n      }\n\n      let files = []\n      entries.forEach((spec) => {\n        if (spec.dir) {\n          archive.folder(spec.path)\n        } else {\n          files.push(this.addFile(path.join(dirPath, spec.path), path.join(zipPath, spec.path)))\n        }\n      })\n\n      return Promise.all(files)\n    })\n  }\n\n  /**\n   * @param {string} path File path to test for within the archive.\n   * @return {boolean} Whether this zip archive contains an entry with the given\n   *     path.\n   */\n  has(path) {\n    return this.z_.file(path) !== null\n  }\n\n  /**\n   * Returns the contents of the file in this zip archive with the given `path`.\n   * The returned promise will be rejected with an {@link InvalidArgumentError}\n   * if either `path` does not exist within the archive, or if `path` refers\n   * to a directory.\n   *\n   * @param {string} path the path to the file whose contents to return.\n   * @return {!Promise<!Buffer>} a promise that will be resolved with the file's\n   *     contents as a buffer.\n   */\n  getFile(path) {\n    let file = this.z_.file(path)\n    if (!file) {\n      return Promise.reject(new InvalidArgumentError(`No such file in zip archive: ${path}`))\n    }\n\n    if (file.dir) {\n      return Promise.reject(new InvalidArgumentError(`The requested file is a directory: ${path}`))\n    }\n\n    return Promise.resolve(file.async('nodebuffer'))\n  }\n\n  /**\n   * Returns the compressed data for this archive in a buffer. _This method will\n   * not wait for any outstanding {@link #addFile add}\n   * {@link #addDir operations} before encoding the archive._\n   *\n   * @param {string} compression The desired compression.\n   *     Must be `STORE` (the default) or `DEFLATE`.\n   * @return {!Promise<!Buffer>} a promise that will resolve with this archive\n   *     as a buffer.\n   */\n  toBuffer(compression = 'STORE') {\n    if (compression !== 'STORE' && compression !== 'DEFLATE') {\n      return Promise.reject(new InvalidArgumentError(`compression must be one of {STORE, DEFLATE}, got ${compression}`))\n    }\n    return Promise.resolve(this.z_.generateAsync({ compression, type: 'nodebuffer' }))\n  }\n}\n\n/**\n * Asynchronously opens a zip archive.\n *\n * @param {string} path to the zip archive to load.\n * @return {!Promise<!Zip>} a promise that will resolve with the opened\n *     archive.\n */\nfunction load(path) {\n  return io.read(path).then((data) => {\n    let zip = new Zip()\n    return zip.z_.loadAsync(data).then(() => zip)\n  })\n}\n\n/**\n * Asynchronously unzips an archive file.\n *\n * @param {string} src path to the source file to unzip.\n * @param {string} dst path to the destination directory.\n * @return {!Promise<string>} a promise that will resolve with `dst` once the\n *     archive has been unzipped.\n */\nfunction unzip(src, dst) {\n  return load(src).then((zip) => {\n    const promisedDirs = new Map()\n    const promises = []\n\n    zip.z_.forEach((relPath, file) => {\n      let p\n      if (file.dir) {\n        p = createDir(relPath)\n      } else {\n        let dirname = path.dirname(relPath)\n        if (dirname === '.') {\n          p = writeFile(relPath, file)\n        } else {\n          p = createDir(dirname).then(() => writeFile(relPath, file))\n        }\n      }\n      promises.push(p)\n    })\n\n    return Promise.all(promises).then(() => dst)\n\n    function createDir(dir) {\n      let p = promisedDirs.get(dir)\n      if (!p) {\n        p = io.mkdirp(path.join(dst, dir))\n        promisedDirs.set(dir, p)\n      }\n      return p\n    }\n\n    function writeFile(relPath, file) {\n      return file.async('nodebuffer').then((buffer) => io.write(path.join(dst, relPath), buffer))\n    }\n  })\n}\n\n// PUBLIC API\nmodule.exports = { Zip, load, unzip }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/io/zip.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/lib/atoms/bidi-mutation-listener.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/selenium-webdriver/lib/atoms/bidi-mutation-listener.js ***!
  \*****************************************************************************/
/***/ (() => {

eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nfunction observeMutations(channel) {\n  const observer = new MutationObserver((mutations) => {\n    for (const mutation of mutations) {\n      switch (mutation.type) {\n        case 'attributes':\n          // Don't report our own attribute has changed.\n          if (mutation.attributeName === 'data-__webdriver_id') {\n            break\n          }\n          const curr = mutation.target.getAttribute(mutation.attributeName)\n          let id = mutation.target.dataset.__webdriver_id\n          if (!id) {\n            id = Math.random().toString(36).substring(2) + Date.now().toString(36)\n            mutation.target.dataset.__webdriver_id = id\n          }\n          const json = JSON.stringify({\n            target: id,\n            name: mutation.attributeName,\n            value: curr,\n            oldValue: mutation.oldValue,\n          })\n          channel(json)\n          break\n        default:\n          break\n      }\n    }\n  })\n\n  observer.observe(document, {\n    attributes: true,\n    attributeOldValue: true,\n    characterData: true,\n    characterDataOldValue: true,\n    childList: true,\n    subtree: true,\n  })\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc2VsZW5pdW0td2ViZHJpdmVyL2xpYi9hdG9tcy9iaWRpLW11dGF0aW9uLWxpc3RlbmVyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ29vZ2xlLXNoZWV0cy1zZWxlbml1bS1hdXRvbWF0aW9uLy4vbm9kZV9tb2R1bGVzL3NlbGVuaXVtLXdlYmRyaXZlci9saWIvYXRvbXMvYmlkaS1tdXRhdGlvbi1saXN0ZW5lci5qcz9mYjNlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBTb2Z0d2FyZSBGcmVlZG9tIENvbnNlcnZhbmN5IChTRkMpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgU0ZDIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmZ1bmN0aW9uIG9ic2VydmVNdXRhdGlvbnMoY2hhbm5lbCkge1xuICBjb25zdCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKChtdXRhdGlvbnMpID0+IHtcbiAgICBmb3IgKGNvbnN0IG11dGF0aW9uIG9mIG11dGF0aW9ucykge1xuICAgICAgc3dpdGNoIChtdXRhdGlvbi50eXBlKSB7XG4gICAgICAgIGNhc2UgJ2F0dHJpYnV0ZXMnOlxuICAgICAgICAgIC8vIERvbid0IHJlcG9ydCBvdXIgb3duIGF0dHJpYnV0ZSBoYXMgY2hhbmdlZC5cbiAgICAgICAgICBpZiAobXV0YXRpb24uYXR0cmlidXRlTmFtZSA9PT0gJ2RhdGEtX193ZWJkcml2ZXJfaWQnKSB7XG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBjdXJyID0gbXV0YXRpb24udGFyZ2V0LmdldEF0dHJpYnV0ZShtdXRhdGlvbi5hdHRyaWJ1dGVOYW1lKVxuICAgICAgICAgIGxldCBpZCA9IG11dGF0aW9uLnRhcmdldC5kYXRhc2V0Ll9fd2ViZHJpdmVyX2lkXG4gICAgICAgICAgaWYgKCFpZCkge1xuICAgICAgICAgICAgaWQgPSBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMikgKyBEYXRlLm5vdygpLnRvU3RyaW5nKDM2KVxuICAgICAgICAgICAgbXV0YXRpb24udGFyZ2V0LmRhdGFzZXQuX193ZWJkcml2ZXJfaWQgPSBpZFxuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBqc29uID0gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgdGFyZ2V0OiBpZCxcbiAgICAgICAgICAgIG5hbWU6IG11dGF0aW9uLmF0dHJpYnV0ZU5hbWUsXG4gICAgICAgICAgICB2YWx1ZTogY3VycixcbiAgICAgICAgICAgIG9sZFZhbHVlOiBtdXRhdGlvbi5vbGRWYWx1ZSxcbiAgICAgICAgICB9KVxuICAgICAgICAgIGNoYW5uZWwoanNvbilcbiAgICAgICAgICBicmVha1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICB9KVxuXG4gIG9ic2VydmVyLm9ic2VydmUoZG9jdW1lbnQsIHtcbiAgICBhdHRyaWJ1dGVzOiB0cnVlLFxuICAgIGF0dHJpYnV0ZU9sZFZhbHVlOiB0cnVlLFxuICAgIGNoYXJhY3RlckRhdGE6IHRydWUsXG4gICAgY2hhcmFjdGVyRGF0YU9sZFZhbHVlOiB0cnVlLFxuICAgIGNoaWxkTGlzdDogdHJ1ZSxcbiAgICBzdWJ0cmVlOiB0cnVlLFxuICB9KVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/lib/atoms/bidi-mutation-listener.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/lib/atoms/find-elements.js":
/*!********************************************************************!*\
  !*** ./node_modules/selenium-webdriver/lib/atoms/find-elements.js ***!
  \********************************************************************/
/***/ ((module) => {

eval("// GENERATED CODE - DO NOT EDIT\nmodule.exports = function(){return (function(){var aa=this||self;function ba(a){return\"string\"==typeof a}function ca(a,b){a=a.split(\".\");var c=aa;a[0]in c||\"undefined\"==typeof c.execScript||c.execScript(\"var \"+a[0]);for(var d;a.length&&(d=a.shift());)a.length||void 0===b?c[d]&&c[d]!==Object.prototype[d]?c=c[d]:c=c[d]={}:c[d]=b}\nfunction da(a){var b=typeof a;if(\"object\"==b)if(a){if(a instanceof Array)return\"array\";if(a instanceof Object)return b;var c=Object.prototype.toString.call(a);if(\"[object Window]\"==c)return\"object\";if(\"[object Array]\"==c||\"number\"==typeof a.length&&\"undefined\"!=typeof a.splice&&\"undefined\"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable(\"splice\"))return\"array\";if(\"[object Function]\"==c||\"undefined\"!=typeof a.call&&\"undefined\"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable(\"call\"))return\"function\"}else return\"null\";\nelse if(\"function\"==b&&\"undefined\"==typeof a.call)return\"object\";return b}function ea(a){return\"function\"==da(a)}function ha(a){var b=typeof a;return\"object\"==b&&null!=a||\"function\"==b}function ia(a,b,c){return a.call.apply(a.bind,arguments)}\nfunction ja(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var e=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(e,d);return a.apply(b,e)}}return function(){return a.apply(b,arguments)}}function ka(a,b,c){Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf(\"native code\")?ka=ia:ka=ja;return ka.apply(null,arguments)}\nfunction la(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var d=c.slice();d.push.apply(d,arguments);return a.apply(this,d)}}function k(a,b){function c(){}c.prototype=b.prototype;a.prototype=new c;a.prototype.constructor=a};/*\n\n The MIT License\n\n Copyright (c) 2007 Cybozu Labs, Inc.\n Copyright (c) 2012 Google Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to\n deal in the Software without restriction, including without limitation the\n rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n sell copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n IN THE SOFTWARE.\n*/\nfunction ma(a,b,c){this.a=a;this.b=b||1;this.f=c||1};var na;var oa=Array.prototype.indexOf?function(a,b){return Array.prototype.indexOf.call(a,b,void 0)}:function(a,b){if(\"string\"===typeof a)return\"string\"!==typeof b||1!=b.length?-1:a.indexOf(b,0);for(var c=0;c<a.length;c++)if(c in a&&a[c]===b)return c;return-1},l=Array.prototype.forEach?function(a,b,c){Array.prototype.forEach.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=\"string\"===typeof a?a.split(\"\"):a,f=0;f<d;f++)f in e&&b.call(c,e[f],f,a)},pa=Array.prototype.filter?function(a,b){return Array.prototype.filter.call(a,\nb,void 0)}:function(a,b){for(var c=a.length,d=[],e=0,f=\"string\"===typeof a?a.split(\"\"):a,g=0;g<c;g++)if(g in f){var h=f[g];b.call(void 0,h,g,a)&&(d[e++]=h)}return d},qa=Array.prototype.map?function(a,b){return Array.prototype.map.call(a,b,void 0)}:function(a,b){for(var c=a.length,d=Array(c),e=\"string\"===typeof a?a.split(\"\"):a,f=0;f<c;f++)f in e&&(d[f]=b.call(void 0,e[f],f,a));return d},ra=Array.prototype.reduce?function(a,b,c){return Array.prototype.reduce.call(a,b,c)}:function(a,b,c){var d=c;l(a,\nfunction(e,f){d=b.call(void 0,d,e,f,a)});return d},sa=Array.prototype.some?function(a,b){return Array.prototype.some.call(a,b,void 0)}:function(a,b){for(var c=a.length,d=\"string\"===typeof a?a.split(\"\"):a,e=0;e<c;e++)if(e in d&&b.call(void 0,d[e],e,a))return!0;return!1},ta=Array.prototype.every?function(a,b,c){return Array.prototype.every.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=\"string\"===typeof a?a.split(\"\"):a,f=0;f<d;f++)if(f in e&&!b.call(c,e[f],f,a))return!1;return!0};\nfunction ua(a,b){a:{for(var c=a.length,d=\"string\"===typeof a?a.split(\"\"):a,e=0;e<c;e++)if(e in d&&b.call(void 0,d[e],e,a)){b=e;break a}b=-1}return 0>b?null:\"string\"===typeof a?a.charAt(b):a[b]}function va(a){return Array.prototype.concat.apply([],arguments)}function wa(a,b,c){return 2>=arguments.length?Array.prototype.slice.call(a,b):Array.prototype.slice.call(a,b,c)}function xa(a,b){a.sort(b||ya)}function ya(a,b){return a>b?1:a<b?-1:0};function za(a){var b=a.length-1;return 0<=b&&a.indexOf(\" \",b)==b}var Aa=String.prototype.trim?function(a){return a.trim()}:function(a){return/^[\\s\\xa0]*([\\s\\S]*?)[\\s\\xa0]*$/.exec(a)[1]};\nfunction Ba(a,b){var c=0;a=Aa(String(a)).split(\".\");b=Aa(String(b)).split(\".\");for(var d=Math.max(a.length,b.length),e=0;0==c&&e<d;e++){var f=a[e]||\"\",g=b[e]||\"\";do{f=/(\\d*)(\\D*)(.*)/.exec(f)||[\"\",\"\",\"\",\"\"];g=/(\\d*)(\\D*)(.*)/.exec(g)||[\"\",\"\",\"\",\"\"];if(0==f[0].length&&0==g[0].length)break;c=Ca(0==f[1].length?0:parseInt(f[1],10),0==g[1].length?0:parseInt(g[1],10))||Ca(0==f[2].length,0==g[2].length)||Ca(f[2],g[2]);f=f[3];g=g[3]}while(0==c)}return c}function Ca(a,b){return a<b?-1:a>b?1:0};var q;a:{var Da=aa.navigator;if(Da){var Ea=Da.userAgent;if(Ea){q=Ea;break a}}q=\"\"}function r(a){return-1!=q.indexOf(a)};function Fa(){return r(\"Firefox\")||r(\"FxiOS\")}function Ga(){return(r(\"Chrome\")||r(\"CriOS\"))&&!r(\"Edge\")};function Ha(a){return String(a).replace(/\\-([a-z])/g,function(b,c){return c.toUpperCase()})};function Ia(){return r(\"iPhone\")&&!r(\"iPod\")&&!r(\"iPad\")};function Ja(a,b){var c=Ka;return Object.prototype.hasOwnProperty.call(c,a)?c[a]:c[a]=b(a)};var La=r(\"Opera\"),t=r(\"Trident\")||r(\"MSIE\"),Ma=r(\"Edge\"),Na=r(\"Gecko\")&&!(-1!=q.toLowerCase().indexOf(\"webkit\")&&!r(\"Edge\"))&&!(r(\"Trident\")||r(\"MSIE\"))&&!r(\"Edge\"),Oa=-1!=q.toLowerCase().indexOf(\"webkit\")&&!r(\"Edge\");function Pa(){var a=aa.document;return a?a.documentMode:void 0}var Qa;\na:{var Ra=\"\",Sa=function(){var a=q;if(Na)return/rv:([^\\);]+)(\\)|;)/.exec(a);if(Ma)return/Edge\\/([\\d\\.]+)/.exec(a);if(t)return/\\b(?:MSIE|rv)[: ]([^\\);]+)(\\)|;)/.exec(a);if(Oa)return/WebKit\\/(\\S+)/.exec(a);if(La)return/(?:Version)[ \\/]?(\\S+)/.exec(a)}();Sa&&(Ra=Sa?Sa[1]:\"\");if(t){var Ta=Pa();if(null!=Ta&&Ta>parseFloat(Ra)){Qa=String(Ta);break a}}Qa=Ra}var Ka={};function Ua(a){return Ja(a,function(){return 0<=Ba(Qa,a)})}var w;w=aa.document&&t?Pa():void 0;var x=t&&!(9<=Number(w)),Va=t&&!(8<=Number(w));function Wa(a,b,c,d){this.a=a;this.nodeName=c;this.nodeValue=d;this.nodeType=2;this.parentNode=this.ownerElement=b}function Xa(a,b){var c=Va&&\"href\"==b.nodeName?a.getAttribute(b.nodeName,2):b.nodeValue;return new Wa(b,a,b.nodeName,c)};function Ya(a){this.b=a;this.a=0}function Za(a){a=a.match($a);for(var b=0;b<a.length;b++)ab.test(a[b])&&a.splice(b,1);return new Ya(a)}var $a=/\\$?(?:(?![0-9-\\.])(?:\\*|[\\w-\\.]+):)?(?![0-9-\\.])(?:\\*|[\\w-\\.]+)|\\/\\/|\\.\\.|::|\\d+(?:\\.\\d*)?|\\.\\d+|\"[^\"]*\"|'[^']*'|[!<>]=|\\s+|./g,ab=/^\\s/;function y(a,b){return a.b[a.a+(b||0)]}function z(a){return a.b[a.a++]}function bb(a){return a.b.length<=a.a};function cb(a,b){this.x=void 0!==a?a:0;this.y=void 0!==b?b:0}cb.prototype.ceil=function(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);return this};cb.prototype.floor=function(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);return this};cb.prototype.round=function(){this.x=Math.round(this.x);this.y=Math.round(this.y);return this};function db(a,b){this.width=a;this.height=b}db.prototype.aspectRatio=function(){return this.width/this.height};db.prototype.ceil=function(){this.width=Math.ceil(this.width);this.height=Math.ceil(this.height);return this};db.prototype.floor=function(){this.width=Math.floor(this.width);this.height=Math.floor(this.height);return this};db.prototype.round=function(){this.width=Math.round(this.width);this.height=Math.round(this.height);return this};function eb(a){return a?new fb(A(a)):na||(na=new fb)}function gb(a){for(;a&&1!=a.nodeType;)a=a.previousSibling;return a}function hb(a,b){if(!a||!b)return!1;if(a.contains&&1==b.nodeType)return a==b||a.contains(b);if(\"undefined\"!=typeof a.compareDocumentPosition)return a==b||!!(a.compareDocumentPosition(b)&16);for(;b&&a!=b;)b=b.parentNode;return b==a}\nfunction ib(a,b){if(a==b)return 0;if(a.compareDocumentPosition)return a.compareDocumentPosition(b)&2?1:-1;if(t&&!(9<=Number(w))){if(9==a.nodeType)return-1;if(9==b.nodeType)return 1}if(\"sourceIndex\"in a||a.parentNode&&\"sourceIndex\"in a.parentNode){var c=1==a.nodeType,d=1==b.nodeType;if(c&&d)return a.sourceIndex-b.sourceIndex;var e=a.parentNode,f=b.parentNode;return e==f?jb(a,b):!c&&hb(e,b)?-1*kb(a,b):!d&&hb(f,a)?kb(b,a):(c?a.sourceIndex:e.sourceIndex)-(d?b.sourceIndex:f.sourceIndex)}d=A(a);c=d.createRange();\nc.selectNode(a);c.collapse(!0);a=d.createRange();a.selectNode(b);a.collapse(!0);return c.compareBoundaryPoints(aa.Range.START_TO_END,a)}function kb(a,b){var c=a.parentNode;if(c==b)return-1;for(;b.parentNode!=c;)b=b.parentNode;return jb(b,a)}function jb(a,b){for(;b=b.previousSibling;)if(b==a)return-1;return 1}function A(a){return 9==a.nodeType?a:a.ownerDocument||a.document}function lb(a,b){a&&(a=a.parentNode);for(var c=0;a;){if(b(a))return a;a=a.parentNode;c++}return null}\nfunction fb(a){this.a=a||aa.document||document}fb.prototype.getElementsByTagName=function(a,b){return(b||this.a).getElementsByTagName(String(a))};\nfunction mb(a,b,c,d){a=d||a.a;var e=b&&\"*\"!=b?String(b).toUpperCase():\"\";if(a.querySelectorAll&&a.querySelector&&(e||c))c=a.querySelectorAll(e+(c?\".\"+c:\"\"));else if(c&&a.getElementsByClassName)if(b=a.getElementsByClassName(c),e){a={};for(var f=d=0,g;g=b[f];f++)e==g.nodeName&&(a[d++]=g);a.length=d;c=a}else c=b;else if(b=a.getElementsByTagName(e||\"*\"),c){a={};for(f=d=0;g=b[f];f++){e=g.className;var h;if(h=\"function\"==typeof e.split)h=0<=oa(e.split(/\\s+/),c);h&&(a[d++]=g)}a.length=d;c=a}else c=b;return c}\n;function B(a){var b=null,c=a.nodeType;1==c&&(b=a.textContent,b=void 0==b||null==b?a.innerText:b,b=void 0==b||null==b?\"\":b);if(\"string\"!=typeof b)if(x&&\"title\"==a.nodeName.toLowerCase()&&1==c)b=a.text;else if(9==c||1==c){a=9==c?a.documentElement:a.firstChild;c=0;var d=[];for(b=\"\";a;){do 1!=a.nodeType&&(b+=a.nodeValue),x&&\"title\"==a.nodeName.toLowerCase()&&(b+=a.text),d[c++]=a;while(a=a.firstChild);for(;c&&!(a=d[--c].nextSibling););}}else b=a.nodeValue;return b}\nfunction nb(a,b,c){if(null===b)return!0;try{if(!a.getAttribute)return!1}catch(d){return!1}Va&&\"class\"==b&&(b=\"className\");return null==c?!!a.getAttribute(b):a.getAttribute(b,2)==c}function ob(a,b,c,d,e){return(x?pb:qb).call(null,a,b,ba(c)?c:null,ba(d)?d:null,e||new C)}\nfunction pb(a,b,c,d,e){if(a instanceof rb||8==a.b||c&&null===a.b){var f=b.all;if(!f)return e;a=sb(a);if(\"*\"!=a&&(f=b.getElementsByTagName(a),!f))return e;if(c){for(var g=[],h=0;b=f[h++];)nb(b,c,d)&&g.push(b);f=g}for(h=0;b=f[h++];)\"*\"==a&&\"!\"==b.tagName||e.add(b);return e}tb(a,b,c,d,e);return e}\nfunction qb(a,b,c,d,e){b.getElementsByName&&d&&\"name\"==c&&!t?(b=b.getElementsByName(d),l(b,function(f){a.a(f)&&e.add(f)})):b.getElementsByClassName&&d&&\"class\"==c?(b=b.getElementsByClassName(d),l(b,function(f){f.className==d&&a.a(f)&&e.add(f)})):a instanceof D?tb(a,b,c,d,e):b.getElementsByTagName&&(b=b.getElementsByTagName(a.f()),l(b,function(f){nb(f,c,d)&&e.add(f)}));return e}\nfunction ub(a,b,c,d,e){var f;if((a instanceof rb||8==a.b||c&&null===a.b)&&(f=b.childNodes)){var g=sb(a);if(\"*\"!=g&&(f=pa(f,function(h){return h.tagName&&h.tagName.toLowerCase()==g}),!f))return e;c&&(f=pa(f,function(h){return nb(h,c,d)}));l(f,function(h){\"*\"==g&&(\"!\"==h.tagName||\"*\"==g&&1!=h.nodeType)||e.add(h)});return e}return vb(a,b,c,d,e)}function vb(a,b,c,d,e){for(b=b.firstChild;b;b=b.nextSibling)nb(b,c,d)&&a.a(b)&&e.add(b);return e}\nfunction tb(a,b,c,d,e){for(b=b.firstChild;b;b=b.nextSibling)nb(b,c,d)&&a.a(b)&&e.add(b),tb(a,b,c,d,e)}function sb(a){if(a instanceof D){if(8==a.b)return\"!\";if(null===a.b)return\"*\"}return a.f()};function C(){this.b=this.a=null;this.m=0}function wb(a){this.f=a;this.a=this.b=null}function xb(a,b){if(!a.a)return b;if(!b.a)return a;var c=a.a;b=b.a;for(var d=null,e,f=0;c&&b;){e=c.f;var g=b.f;e==g||e instanceof Wa&&g instanceof Wa&&e.a==g.a?(e=c,c=c.a,b=b.a):0<ib(c.f,b.f)?(e=b,b=b.a):(e=c,c=c.a);(e.b=d)?d.a=e:a.a=e;d=e;f++}for(e=c||b;e;)e.b=d,d=d.a=e,f++,e=e.a;a.b=d;a.m=f;return a}function yb(a,b){b=new wb(b);b.a=a.a;a.b?a.a.b=b:a.a=a.b=b;a.a=b;a.m++}\nC.prototype.add=function(a){a=new wb(a);a.b=this.b;this.a?this.b.a=a:this.a=this.b=a;this.b=a;this.m++};function zb(a){return(a=a.a)?a.f:null}function Bb(a){return(a=zb(a))?B(a):\"\"}function Cb(a,b){return new Db(a,!!b)}function Db(a,b){this.f=a;this.b=(this.A=b)?a.b:a.a;this.a=null}function E(a){var b=a.b;if(null==b)return null;var c=a.a=b;a.b=a.A?b.b:b.a;return c.f};function F(a){this.i=a;this.b=this.g=!1;this.f=null}function H(a){return\"\\n  \"+a.toString().split(\"\\n\").join(\"\\n  \")}function Eb(a,b){a.g=b}function Fb(a,b){a.b=b}function I(a,b){a=a.a(b);return a instanceof C?+Bb(a):+a}function J(a,b){a=a.a(b);return a instanceof C?Bb(a):\"\"+a}function Gb(a,b){a=a.a(b);return a instanceof C?!!a.m:!!a};function Hb(a,b,c){F.call(this,a.i);this.c=a;this.h=b;this.v=c;this.g=b.g||c.g;this.b=b.b||c.b;this.c==Ib&&(c.b||c.g||4==c.i||0==c.i||!b.f?b.b||b.g||4==b.i||0==b.i||!c.f||(this.f={name:c.f.name,B:b}):this.f={name:b.f.name,B:c})}k(Hb,F);\nfunction Jb(a,b,c,d,e){b=b.a(d);c=c.a(d);var f;if(b instanceof C&&c instanceof C){b=Cb(b);for(d=E(b);d;d=E(b))for(e=Cb(c),f=E(e);f;f=E(e))if(a(B(d),B(f)))return!0;return!1}if(b instanceof C||c instanceof C){b instanceof C?(e=b,d=c):(e=c,d=b);f=Cb(e);for(var g=typeof d,h=E(f);h;h=E(f)){switch(g){case \"number\":h=+B(h);break;case \"boolean\":h=!!B(h);break;case \"string\":h=B(h);break;default:throw Error(\"Illegal primitive type for comparison.\");}if(e==b&&a(h,d)||e==c&&a(d,h))return!0}return!1}return e?\n\"boolean\"==typeof b||\"boolean\"==typeof c?a(!!b,!!c):\"number\"==typeof b||\"number\"==typeof c?a(+b,+c):a(b,c):a(+b,+c)}Hb.prototype.a=function(a){return this.c.s(this.h,this.v,a)};Hb.prototype.toString=function(){var a=\"Binary Expression: \"+this.c;a+=H(this.h);return a+=H(this.v)};function Kb(a,b,c,d){this.$=a;this.M=b;this.i=c;this.s=d}Kb.prototype.toString=function(){return this.$};var Lb={};\nfunction K(a,b,c,d){if(Lb.hasOwnProperty(a))throw Error(\"Binary operator already created: \"+a);a=new Kb(a,b,c,d);return Lb[a.toString()]=a}K(\"div\",6,1,function(a,b,c){return I(a,c)/I(b,c)});K(\"mod\",6,1,function(a,b,c){return I(a,c)%I(b,c)});K(\"*\",6,1,function(a,b,c){return I(a,c)*I(b,c)});K(\"+\",5,1,function(a,b,c){return I(a,c)+I(b,c)});K(\"-\",5,1,function(a,b,c){return I(a,c)-I(b,c)});K(\"<\",4,2,function(a,b,c){return Jb(function(d,e){return d<e},a,b,c)});\nK(\">\",4,2,function(a,b,c){return Jb(function(d,e){return d>e},a,b,c)});K(\"<=\",4,2,function(a,b,c){return Jb(function(d,e){return d<=e},a,b,c)});K(\">=\",4,2,function(a,b,c){return Jb(function(d,e){return d>=e},a,b,c)});var Ib=K(\"=\",3,2,function(a,b,c){return Jb(function(d,e){return d==e},a,b,c,!0)});K(\"!=\",3,2,function(a,b,c){return Jb(function(d,e){return d!=e},a,b,c,!0)});K(\"and\",2,2,function(a,b,c){return Gb(a,c)&&Gb(b,c)});K(\"or\",1,2,function(a,b,c){return Gb(a,c)||Gb(b,c)});function Mb(a,b){if(b.a.length&&4!=a.i)throw Error(\"Primary expression must evaluate to nodeset if filter has predicate(s).\");F.call(this,a.i);this.c=a;this.h=b;this.g=a.g;this.b=a.b}k(Mb,F);Mb.prototype.a=function(a){a=this.c.a(a);return Nb(this.h,a)};Mb.prototype.toString=function(){var a=\"Filter:\"+H(this.c);return a+=H(this.h)};function Ob(a,b){if(b.length<a.L)throw Error(\"Function \"+a.l+\" expects at least\"+a.L+\" arguments, \"+b.length+\" given\");if(null!==a.H&&b.length>a.H)throw Error(\"Function \"+a.l+\" expects at most \"+a.H+\" arguments, \"+b.length+\" given\");a.Z&&l(b,function(c,d){if(4!=c.i)throw Error(\"Argument \"+d+\" to function \"+a.l+\" is not of type Nodeset: \"+c);});F.call(this,a.i);this.D=a;this.c=b;Eb(this,a.g||sa(b,function(c){return c.g}));Fb(this,a.Y&&!b.length||a.X&&!!b.length||sa(b,function(c){return c.b}))}\nk(Ob,F);Ob.prototype.a=function(a){return this.D.s.apply(null,va(a,this.c))};Ob.prototype.toString=function(){var a=\"Function: \"+this.D;if(this.c.length){var b=ra(this.c,function(c,d){return c+H(d)},\"Arguments:\");a+=H(b)}return a};function Pb(a,b,c,d,e,f,g,h){this.l=a;this.i=b;this.g=c;this.Y=d;this.X=!1;this.s=e;this.L=f;this.H=void 0!==g?g:f;this.Z=!!h}Pb.prototype.toString=function(){return this.l};var Qb={};\nfunction L(a,b,c,d,e,f,g,h){if(Qb.hasOwnProperty(a))throw Error(\"Function already created: \"+a+\".\");Qb[a]=new Pb(a,b,c,d,e,f,g,h)}L(\"boolean\",2,!1,!1,function(a,b){return Gb(b,a)},1);L(\"ceiling\",1,!1,!1,function(a,b){return Math.ceil(I(b,a))},1);L(\"concat\",3,!1,!1,function(a,b){return ra(wa(arguments,1),function(c,d){return c+J(d,a)},\"\")},2,null);L(\"contains\",2,!1,!1,function(a,b,c){b=J(b,a);a=J(c,a);return a=-1!=b.indexOf(a)},2);L(\"count\",1,!1,!1,function(a,b){return b.a(a).m},1,1,!0);\nL(\"false\",2,!1,!1,function(){return!1},0);L(\"floor\",1,!1,!1,function(a,b){return Math.floor(I(b,a))},1);L(\"id\",4,!1,!1,function(a,b){function c(h){if(x){var n=e.all[h];if(n){if(n.nodeType&&h==n.id)return n;if(n.length)return ua(n,function(u){return h==u.id})}return null}return e.getElementById(h)}var d=a.a,e=9==d.nodeType?d:d.ownerDocument;a=J(b,a).split(/\\s+/);var f=[];l(a,function(h){h=c(h);!h||0<=oa(f,h)||f.push(h)});f.sort(ib);var g=new C;l(f,function(h){g.add(h)});return g},1);\nL(\"lang\",2,!1,!1,function(){return!1},1);L(\"last\",1,!0,!1,function(a){if(1!=arguments.length)throw Error(\"Function last expects ()\");return a.f},0);L(\"local-name\",3,!1,!0,function(a,b){return(a=b?zb(b.a(a)):a.a)?a.localName||a.nodeName.toLowerCase():\"\"},0,1,!0);L(\"name\",3,!1,!0,function(a,b){return(a=b?zb(b.a(a)):a.a)?a.nodeName.toLowerCase():\"\"},0,1,!0);L(\"namespace-uri\",3,!0,!1,function(){return\"\"},0,1,!0);\nL(\"normalize-space\",3,!1,!0,function(a,b){return(b?J(b,a):B(a.a)).replace(/[\\s\\xa0]+/g,\" \").replace(/^\\s+|\\s+$/g,\"\")},0,1);L(\"not\",2,!1,!1,function(a,b){return!Gb(b,a)},1);L(\"number\",1,!1,!0,function(a,b){return b?I(b,a):+B(a.a)},0,1);L(\"position\",1,!0,!1,function(a){return a.b},0);L(\"round\",1,!1,!1,function(a,b){return Math.round(I(b,a))},1);L(\"starts-with\",2,!1,!1,function(a,b,c){b=J(b,a);a=J(c,a);return 0==b.lastIndexOf(a,0)},2);L(\"string\",3,!1,!0,function(a,b){return b?J(b,a):B(a.a)},0,1);\nL(\"string-length\",1,!1,!0,function(a,b){return(b?J(b,a):B(a.a)).length},0,1);L(\"substring\",3,!1,!1,function(a,b,c,d){c=I(c,a);if(isNaN(c)||Infinity==c||-Infinity==c)return\"\";d=d?I(d,a):Infinity;if(isNaN(d)||-Infinity===d)return\"\";c=Math.round(c)-1;var e=Math.max(c,0);a=J(b,a);return Infinity==d?a.substring(e):a.substring(e,c+Math.round(d))},2,3);L(\"substring-after\",3,!1,!1,function(a,b,c){b=J(b,a);a=J(c,a);c=b.indexOf(a);return-1==c?\"\":b.substring(c+a.length)},2);\nL(\"substring-before\",3,!1,!1,function(a,b,c){b=J(b,a);a=J(c,a);a=b.indexOf(a);return-1==a?\"\":b.substring(0,a)},2);L(\"sum\",1,!1,!1,function(a,b){a=Cb(b.a(a));b=0;for(var c=E(a);c;c=E(a))b+=+B(c);return b},1,1,!0);L(\"translate\",3,!1,!1,function(a,b,c,d){b=J(b,a);c=J(c,a);var e=J(d,a);a={};for(d=0;d<c.length;d++){var f=c.charAt(d);f in a||(a[f]=e.charAt(d))}c=\"\";for(d=0;d<b.length;d++)f=b.charAt(d),c+=f in a?a[f]:f;return c},3);L(\"true\",2,!1,!1,function(){return!0},0);function D(a,b){this.h=a;this.c=void 0!==b?b:null;this.b=null;switch(a){case \"comment\":this.b=8;break;case \"text\":this.b=3;break;case \"processing-instruction\":this.b=7;break;case \"node\":break;default:throw Error(\"Unexpected argument\");}}function Rb(a){return\"comment\"==a||\"text\"==a||\"processing-instruction\"==a||\"node\"==a}D.prototype.a=function(a){return null===this.b||this.b==a.nodeType};D.prototype.f=function(){return this.h};\nD.prototype.toString=function(){var a=\"Kind Test: \"+this.h;null===this.c||(a+=H(this.c));return a};function Sb(a){F.call(this,3);this.c=a.substring(1,a.length-1)}k(Sb,F);Sb.prototype.a=function(){return this.c};Sb.prototype.toString=function(){return\"Literal: \"+this.c};function rb(a,b){this.l=a.toLowerCase();a=\"*\"==this.l?\"*\":\"http://www.w3.org/1999/xhtml\";this.c=b?b.toLowerCase():a}rb.prototype.a=function(a){var b=a.nodeType;if(1!=b&&2!=b)return!1;b=void 0!==a.localName?a.localName:a.nodeName;return\"*\"!=this.l&&this.l!=b.toLowerCase()?!1:\"*\"==this.c?!0:this.c==(a.namespaceURI?a.namespaceURI.toLowerCase():\"http://www.w3.org/1999/xhtml\")};rb.prototype.f=function(){return this.l};\nrb.prototype.toString=function(){return\"Name Test: \"+(\"http://www.w3.org/1999/xhtml\"==this.c?\"\":this.c+\":\")+this.l};function Tb(a){F.call(this,1);this.c=a}k(Tb,F);Tb.prototype.a=function(){return this.c};Tb.prototype.toString=function(){return\"Number: \"+this.c};function Ub(a,b){F.call(this,a.i);this.h=a;this.c=b;this.g=a.g;this.b=a.b;1==this.c.length&&(a=this.c[0],a.G||a.c!=Vb||(a=a.v,\"*\"!=a.f()&&(this.f={name:a.f(),B:null})))}k(Ub,F);function Wb(){F.call(this,4)}k(Wb,F);Wb.prototype.a=function(a){var b=new C;a=a.a;9==a.nodeType?b.add(a):b.add(a.ownerDocument);return b};Wb.prototype.toString=function(){return\"Root Helper Expression\"};function Xb(){F.call(this,4)}k(Xb,F);Xb.prototype.a=function(a){var b=new C;b.add(a.a);return b};Xb.prototype.toString=function(){return\"Context Helper Expression\"};\nfunction Yb(a){return\"/\"==a||\"//\"==a}Ub.prototype.a=function(a){var b=this.h.a(a);if(!(b instanceof C))throw Error(\"Filter expression must evaluate to nodeset.\");a=this.c;for(var c=0,d=a.length;c<d&&b.m;c++){var e=a[c],f=Cb(b,e.c.A);if(e.g||e.c!=Zb)if(e.g||e.c!=$b){var g=E(f);for(b=e.a(new ma(g));null!=(g=E(f));)g=e.a(new ma(g)),b=xb(b,g)}else g=E(f),b=e.a(new ma(g));else{for(g=E(f);(b=E(f))&&(!g.contains||g.contains(b))&&b.compareDocumentPosition(g)&8;g=b);b=e.a(new ma(g))}}return b};\nUb.prototype.toString=function(){var a=\"Path Expression:\"+H(this.h);if(this.c.length){var b=ra(this.c,function(c,d){return c+H(d)},\"Steps:\");a+=H(b)}return a};function ac(a,b){this.a=a;this.A=!!b}\nfunction Nb(a,b,c){for(c=c||0;c<a.a.length;c++)for(var d=a.a[c],e=Cb(b),f=b.m,g,h=0;g=E(e);h++){var n=a.A?f-h:h+1;g=d.a(new ma(g,n,f));if(\"number\"==typeof g)n=n==g;else if(\"string\"==typeof g||\"boolean\"==typeof g)n=!!g;else if(g instanceof C)n=0<g.m;else throw Error(\"Predicate.evaluate returned an unexpected type.\");if(!n){n=e;g=n.f;var u=n.a;if(!u)throw Error(\"Next must be called at least once before remove.\");var p=u.b;u=u.a;p?p.a=u:g.a=u;u?u.b=p:g.b=p;g.m--;n.a=null}}return b}\nac.prototype.toString=function(){return ra(this.a,function(a,b){return a+H(b)},\"Predicates:\")};function bc(a,b,c,d){F.call(this,4);this.c=a;this.v=b;this.h=c||new ac([]);this.G=!!d;b=this.h;b=0<b.a.length?b.a[0].f:null;a.ca&&b&&(a=b.name,a=x?a.toLowerCase():a,this.f={name:a,B:b.B});a:{a=this.h;for(b=0;b<a.a.length;b++)if(c=a.a[b],c.g||1==c.i||0==c.i){a=!0;break a}a=!1}this.g=a}k(bc,F);\nbc.prototype.a=function(a){var b=a.a,c=this.f,d=null,e=null,f=0;c&&(d=c.name,e=c.B?J(c.B,a):null,f=1);if(this.G)if(this.g||this.c!=cc)if(b=Cb((new bc(dc,new D(\"node\"))).a(a)),c=E(b))for(a=this.s(c,d,e,f);null!=(c=E(b));)a=xb(a,this.s(c,d,e,f));else a=new C;else a=ob(this.v,b,d,e),a=Nb(this.h,a,f);else a=this.s(a.a,d,e,f);return a};bc.prototype.s=function(a,b,c,d){a=this.c.D(this.v,a,b,c);return a=Nb(this.h,a,d)};\nbc.prototype.toString=function(){var a=\"Step:\"+H(\"Operator: \"+(this.G?\"//\":\"/\"));this.c.l&&(a+=H(\"Axis: \"+this.c));a+=H(this.v);if(this.h.a.length){var b=ra(this.h.a,function(c,d){return c+H(d)},\"Predicates:\");a+=H(b)}return a};function ec(a,b,c,d){this.l=a;this.D=b;this.A=c;this.ca=d}ec.prototype.toString=function(){return this.l};var fc={};function M(a,b,c,d){if(fc.hasOwnProperty(a))throw Error(\"Axis already created: \"+a);b=new ec(a,b,c,!!d);return fc[a]=b}\nM(\"ancestor\",function(a,b){for(var c=new C;b=b.parentNode;)a.a(b)&&yb(c,b);return c},!0);M(\"ancestor-or-self\",function(a,b){var c=new C;do a.a(b)&&yb(c,b);while(b=b.parentNode);return c},!0);\nvar Vb=M(\"attribute\",function(a,b){var c=new C,d=a.f();if(\"style\"==d&&x&&b.style)return c.add(new Wa(b.style,b,\"style\",b.style.cssText)),c;var e=b.attributes;if(e)if(a instanceof D&&null===a.b||\"*\"==d)for(a=0;d=e[a];a++)x?d.nodeValue&&c.add(Xa(b,d)):c.add(d);else(d=e.getNamedItem(d))&&(x?d.nodeValue&&c.add(Xa(b,d)):c.add(d));return c},!1),cc=M(\"child\",function(a,b,c,d,e){return(x?ub:vb).call(null,a,b,ba(c)?c:null,ba(d)?d:null,e||new C)},!1,!0);M(\"descendant\",ob,!1,!0);\nvar dc=M(\"descendant-or-self\",function(a,b,c,d){var e=new C;nb(b,c,d)&&a.a(b)&&e.add(b);return ob(a,b,c,d,e)},!1,!0),Zb=M(\"following\",function(a,b,c,d){var e=new C;do for(var f=b;f=f.nextSibling;)nb(f,c,d)&&a.a(f)&&e.add(f),e=ob(a,f,c,d,e);while(b=b.parentNode);return e},!1,!0);M(\"following-sibling\",function(a,b){for(var c=new C;b=b.nextSibling;)a.a(b)&&c.add(b);return c},!1);M(\"namespace\",function(){return new C},!1);\nvar gc=M(\"parent\",function(a,b){var c=new C;if(9==b.nodeType)return c;if(2==b.nodeType)return c.add(b.ownerElement),c;b=b.parentNode;a.a(b)&&c.add(b);return c},!1),$b=M(\"preceding\",function(a,b,c,d){var e=new C,f=[];do f.unshift(b);while(b=b.parentNode);for(var g=1,h=f.length;g<h;g++){var n=[];for(b=f[g];b=b.previousSibling;)n.unshift(b);for(var u=0,p=n.length;u<p;u++)b=n[u],nb(b,c,d)&&a.a(b)&&e.add(b),e=ob(a,b,c,d,e)}return e},!0,!0);\nM(\"preceding-sibling\",function(a,b){for(var c=new C;b=b.previousSibling;)a.a(b)&&yb(c,b);return c},!0);var hc=M(\"self\",function(a,b){var c=new C;a.a(b)&&c.add(b);return c},!1);function ic(a){F.call(this,1);this.c=a;this.g=a.g;this.b=a.b}k(ic,F);ic.prototype.a=function(a){return-I(this.c,a)};ic.prototype.toString=function(){return\"Unary Expression: -\"+H(this.c)};function jc(a){F.call(this,4);this.c=a;Eb(this,sa(this.c,function(b){return b.g}));Fb(this,sa(this.c,function(b){return b.b}))}k(jc,F);jc.prototype.a=function(a){var b=new C;l(this.c,function(c){c=c.a(a);if(!(c instanceof C))throw Error(\"Path expression must evaluate to NodeSet.\");b=xb(b,c)});return b};jc.prototype.toString=function(){return ra(this.c,function(a,b){return a+H(b)},\"Union Expression:\")};function kc(a,b){this.a=a;this.b=b}function lc(a){for(var b,c=[];;){N(a,\"Missing right hand side of binary expression.\");b=mc(a);var d=z(a.a);if(!d)break;var e=(d=Lb[d]||null)&&d.M;if(!e){a.a.a--;break}for(;c.length&&e<=c[c.length-1].M;)b=new Hb(c.pop(),c.pop(),b);c.push(b,d)}for(;c.length;)b=new Hb(c.pop(),c.pop(),b);return b}function N(a,b){if(bb(a.a))throw Error(b);}function nc(a,b){a=z(a.a);if(a!=b)throw Error(\"Bad token, expected: \"+b+\" got: \"+a);}\nfunction oc(a){a=z(a.a);if(\")\"!=a)throw Error(\"Bad token: \"+a);}function rc(a){a=z(a.a);if(2>a.length)throw Error(\"Unclosed literal string\");return new Sb(a)}\nfunction sc(a){var b=[];if(Yb(y(a.a))){var c=z(a.a);var d=y(a.a);if(\"/\"==c&&(bb(a.a)||\".\"!=d&&\"..\"!=d&&\"@\"!=d&&\"*\"!=d&&!/(?![0-9])[\\w]/.test(d)))return new Wb;d=new Wb;N(a,\"Missing next location step.\");c=tc(a,c);b.push(c)}else{a:{c=y(a.a);d=c.charAt(0);switch(d){case \"$\":throw Error(\"Variable reference not allowed in HTML XPath\");case \"(\":z(a.a);c=lc(a);N(a,'unclosed \"(\"');nc(a,\")\");break;case '\"':case \"'\":c=rc(a);break;default:if(isNaN(+c))if(!Rb(c)&&/(?![0-9])[\\w]/.test(d)&&\"(\"==y(a.a,1)){c=z(a.a);\nc=Qb[c]||null;z(a.a);for(d=[];\")\"!=y(a.a);){N(a,\"Missing function argument list.\");d.push(lc(a));if(\",\"!=y(a.a))break;z(a.a)}N(a,\"Unclosed function argument list.\");oc(a);c=new Ob(c,d)}else{c=null;break a}else c=new Tb(+z(a.a))}\"[\"==y(a.a)&&(d=new ac(uc(a)),c=new Mb(c,d))}if(c)if(Yb(y(a.a)))d=c;else return c;else c=tc(a,\"/\"),d=new Xb,b.push(c)}for(;Yb(y(a.a));)c=z(a.a),N(a,\"Missing next location step.\"),c=tc(a,c),b.push(c);return new Ub(d,b)}\nfunction tc(a,b){if(\"/\"!=b&&\"//\"!=b)throw Error('Step op should be \"/\" or \"//\"');if(\".\"==y(a.a)){var c=new bc(hc,new D(\"node\"));z(a.a);return c}if(\"..\"==y(a.a))return c=new bc(gc,new D(\"node\")),z(a.a),c;if(\"@\"==y(a.a)){var d=Vb;z(a.a);N(a,\"Missing attribute name\")}else if(\"::\"==y(a.a,1)){if(!/(?![0-9])[\\w]/.test(y(a.a).charAt(0)))throw Error(\"Bad token: \"+z(a.a));var e=z(a.a);d=fc[e]||null;if(!d)throw Error(\"No axis with name: \"+e);z(a.a);N(a,\"Missing node name\")}else d=cc;e=y(a.a);if(/(?![0-9])[\\w\\*]/.test(e.charAt(0)))if(\"(\"==\ny(a.a,1)){if(!Rb(e))throw Error(\"Invalid node type: \"+e);e=z(a.a);if(!Rb(e))throw Error(\"Invalid type name: \"+e);nc(a,\"(\");N(a,\"Bad nodetype\");var f=y(a.a).charAt(0),g=null;if('\"'==f||\"'\"==f)g=rc(a);N(a,\"Bad nodetype\");oc(a);e=new D(e,g)}else if(e=z(a.a),f=e.indexOf(\":\"),-1==f)e=new rb(e);else{g=e.substring(0,f);if(\"*\"==g)var h=\"*\";else if(h=a.b(g),!h)throw Error(\"Namespace prefix not declared: \"+g);e=e.substr(f+1);e=new rb(e,h)}else throw Error(\"Bad token: \"+z(a.a));a=new ac(uc(a),d.A);return c||\nnew bc(d,e,a,\"//\"==b)}function uc(a){for(var b=[];\"[\"==y(a.a);){z(a.a);N(a,\"Missing predicate expression.\");var c=lc(a);b.push(c);N(a,\"Unclosed predicate expression.\");nc(a,\"]\")}return b}function mc(a){if(\"-\"==y(a.a))return z(a.a),new ic(mc(a));var b=sc(a);if(\"|\"!=y(a.a))a=b;else{for(b=[b];\"|\"==z(a.a);)N(a,\"Missing next union location path.\"),b.push(sc(a));a.a.a--;a=new jc(b)}return a};function vc(a){switch(a.nodeType){case 1:return la(wc,a);case 9:return vc(a.documentElement);case 11:case 10:case 6:case 12:return xc;default:return a.parentNode?vc(a.parentNode):xc}}function xc(){return null}function wc(a,b){if(a.prefix==b)return a.namespaceURI||\"http://www.w3.org/1999/xhtml\";var c=a.getAttributeNode(\"xmlns:\"+b);return c&&c.specified?c.value||null:a.parentNode&&9!=a.parentNode.nodeType?wc(a.parentNode,b):null};function yc(a,b){if(!a.length)throw Error(\"Empty XPath expression.\");a=Za(a);if(bb(a))throw Error(\"Invalid XPath expression.\");b?ea(b)||(b=ka(b.lookupNamespaceURI,b)):b=function(){return null};var c=lc(new kc(a,b));if(!bb(a))throw Error(\"Bad token: \"+z(a));this.evaluate=function(d,e){d=c.a(new ma(d));return new O(d,e)}}\nfunction O(a,b){if(0==b)if(a instanceof C)b=4;else if(\"string\"==typeof a)b=2;else if(\"number\"==typeof a)b=1;else if(\"boolean\"==typeof a)b=3;else throw Error(\"Unexpected evaluation result.\");if(2!=b&&1!=b&&3!=b&&!(a instanceof C))throw Error(\"value could not be converted to the specified type\");this.resultType=b;switch(b){case 2:this.stringValue=a instanceof C?Bb(a):\"\"+a;break;case 1:this.numberValue=a instanceof C?+Bb(a):+a;break;case 3:this.booleanValue=a instanceof C?0<a.m:!!a;break;case 4:case 5:case 6:case 7:var c=\nCb(a);var d=[];for(var e=E(c);e;e=E(c))d.push(e instanceof Wa?e.a:e);this.snapshotLength=a.m;this.invalidIteratorState=!1;break;case 8:case 9:a=zb(a);this.singleNodeValue=a instanceof Wa?a.a:a;break;default:throw Error(\"Unknown XPathResult type.\");}var f=0;this.iterateNext=function(){if(4!=b&&5!=b)throw Error(\"iterateNext called with wrong result type\");return f>=d.length?null:d[f++]};this.snapshotItem=function(g){if(6!=b&&7!=b)throw Error(\"snapshotItem called with wrong result type\");return g>=d.length||\n0>g?null:d[g]}}O.ANY_TYPE=0;O.NUMBER_TYPE=1;O.STRING_TYPE=2;O.BOOLEAN_TYPE=3;O.UNORDERED_NODE_ITERATOR_TYPE=4;O.ORDERED_NODE_ITERATOR_TYPE=5;O.UNORDERED_NODE_SNAPSHOT_TYPE=6;O.ORDERED_NODE_SNAPSHOT_TYPE=7;O.ANY_UNORDERED_NODE_TYPE=8;O.FIRST_ORDERED_NODE_TYPE=9;function zc(a){this.lookupNamespaceURI=vc(a)}\nfunction Ac(a,b){a=a||aa;var c=a.Document&&a.Document.prototype||a.document;if(!c.evaluate||b)a.XPathResult=O,c.evaluate=function(d,e,f,g){return(new yc(d,f)).evaluate(e,g)},c.createExpression=function(d,e){return new yc(d,e)},c.createNSResolver=function(d){return new zc(d)}}ca(\"wgxpath.install\",Ac);ca(\"wgxpath.install\",Ac);var Bc=window;function P(a,b){this.code=a;this.a=Q[a]||Cc;this.message=b||\"\";a=this.a.replace(/((?:^|\\s+)[a-z])/g,function(c){return c.toUpperCase().replace(/^[\\s\\xa0]+/g,\"\")});b=a.length-5;if(0>b||a.indexOf(\"Error\",b)!=b)a+=\"Error\";this.name=a;a=Error(this.message);a.name=this.name;this.stack=a.stack||\"\"}k(P,Error);var Cc=\"unknown error\",Q={15:\"element not selectable\",11:\"element not visible\"};Q[31]=Cc;Q[30]=Cc;Q[24]=\"invalid cookie domain\";Q[29]=\"invalid element coordinates\";Q[12]=\"invalid element state\";\nQ[32]=\"invalid selector\";Q[51]=\"invalid selector\";Q[52]=\"invalid selector\";Q[17]=\"javascript error\";Q[405]=\"unsupported operation\";Q[34]=\"move target out of bounds\";Q[27]=\"no such alert\";Q[7]=\"no such element\";Q[8]=\"no such frame\";Q[23]=\"no such window\";Q[28]=\"script timeout\";Q[33]=\"session not created\";Q[10]=\"stale element reference\";Q[21]=\"timeout\";Q[25]=\"unable to set cookie\";Q[26]=\"unexpected alert open\";Q[13]=Cc;Q[9]=\"unknown command\";var Dc={C:function(a){return!(!a.querySelectorAll||!a.querySelector)},o:function(a,b){if(!a)throw new P(32,\"No class name specified\");a=Aa(a);if(-1!==a.indexOf(\" \"))throw new P(32,\"Compound class names not permitted\");if(Dc.C(b))try{return b.querySelector(\".\"+a.replace(/\\./g,\"\\\\.\"))||null}catch(c){throw new P(32,\"An invalid or illegal class name was specified\");}a=mb(eb(b),\"*\",a,b);return a.length?a[0]:null},j:function(a,b){if(!a)throw new P(32,\"No class name specified\");a=Aa(a);if(-1!==a.indexOf(\" \"))throw new P(32,\n\"Compound class names not permitted\");if(Dc.C(b))try{return b.querySelectorAll(\".\"+a.replace(/\\./g,\"\\\\.\"))}catch(c){throw new P(32,\"An invalid or illegal class name was specified\");}return mb(eb(b),\"*\",a,b)}};var Ec=Fa(),Fc=Ia()||r(\"iPod\"),Gc=r(\"iPad\"),Hc=r(\"Android\")&&!(Ga()||Fa()||r(\"Opera\")||r(\"Silk\")),Ic=Ga(),Jc=r(\"Safari\")&&!(Ga()||r(\"Coast\")||r(\"Opera\")||r(\"Edge\")||r(\"Edg/\")||r(\"OPR\")||Fa()||r(\"Silk\")||r(\"Android\"))&&!(Ia()||r(\"iPad\")||r(\"iPod\"));function Kc(a){return(a=a.exec(q))?a[1]:\"\"}(function(){if(Ec)return Kc(/Firefox\\/([0-9.]+)/);if(t||Ma||La)return Qa;if(Ic)return Ia()||r(\"iPad\")||r(\"iPod\")?Kc(/CriOS\\/([0-9.]+)/):Kc(/Chrome\\/([0-9.]+)/);if(Jc&&!(Ia()||r(\"iPad\")||r(\"iPod\")))return Kc(/Version\\/([0-9.]+)/);if(Fc||Gc){var a=/Version\\/(\\S+).*Mobile\\/(\\S+)/.exec(q);if(a)return a[1]+\".\"+a[2]}else if(Hc)return(a=Kc(/Android\\s+([0-9.]+)/))?a:Kc(/Version\\/([0-9.]+)/);return\"\"})();var Lc=t&&!(8<=Number(w)),Mc=t&&!(9<=Number(w));var Nc={o:function(a,b){if(!ea(b.querySelector)&&t&&(t?0<=Ba(w,8):Ua(8))&&!ha(b.querySelector))throw Error(\"CSS selection is not supported\");if(!a)throw new P(32,\"No selector specified\");a=Aa(a);try{var c=b.querySelector(a)}catch(d){throw new P(32,\"An invalid or illegal selector was specified\");}return c&&1==c.nodeType?c:null},j:function(a,b){if(!ea(b.querySelectorAll)&&t&&(t?0<=Ba(w,8):Ua(8))&&!ha(b.querySelector))throw Error(\"CSS selection is not supported\");if(!a)throw new P(32,\"No selector specified\");\na=Aa(a);try{return b.querySelectorAll(a)}catch(c){throw new P(32,\"An invalid or illegal selector was specified\");}}};var Oc={aliceblue:\"#f0f8ff\",antiquewhite:\"#faebd7\",aqua:\"#00ffff\",aquamarine:\"#7fffd4\",azure:\"#f0ffff\",beige:\"#f5f5dc\",bisque:\"#ffe4c4\",black:\"#000000\",blanchedalmond:\"#ffebcd\",blue:\"#0000ff\",blueviolet:\"#8a2be2\",brown:\"#a52a2a\",burlywood:\"#deb887\",cadetblue:\"#5f9ea0\",chartreuse:\"#7fff00\",chocolate:\"#d2691e\",coral:\"#ff7f50\",cornflowerblue:\"#6495ed\",cornsilk:\"#fff8dc\",crimson:\"#dc143c\",cyan:\"#00ffff\",darkblue:\"#00008b\",darkcyan:\"#008b8b\",darkgoldenrod:\"#b8860b\",darkgray:\"#a9a9a9\",darkgreen:\"#006400\",\ndarkgrey:\"#a9a9a9\",darkkhaki:\"#bdb76b\",darkmagenta:\"#8b008b\",darkolivegreen:\"#556b2f\",darkorange:\"#ff8c00\",darkorchid:\"#9932cc\",darkred:\"#8b0000\",darksalmon:\"#e9967a\",darkseagreen:\"#8fbc8f\",darkslateblue:\"#483d8b\",darkslategray:\"#2f4f4f\",darkslategrey:\"#2f4f4f\",darkturquoise:\"#00ced1\",darkviolet:\"#9400d3\",deeppink:\"#ff1493\",deepskyblue:\"#00bfff\",dimgray:\"#696969\",dimgrey:\"#696969\",dodgerblue:\"#1e90ff\",firebrick:\"#b22222\",floralwhite:\"#fffaf0\",forestgreen:\"#228b22\",fuchsia:\"#ff00ff\",gainsboro:\"#dcdcdc\",\nghostwhite:\"#f8f8ff\",gold:\"#ffd700\",goldenrod:\"#daa520\",gray:\"#808080\",green:\"#008000\",greenyellow:\"#adff2f\",grey:\"#808080\",honeydew:\"#f0fff0\",hotpink:\"#ff69b4\",indianred:\"#cd5c5c\",indigo:\"#4b0082\",ivory:\"#fffff0\",khaki:\"#f0e68c\",lavender:\"#e6e6fa\",lavenderblush:\"#fff0f5\",lawngreen:\"#7cfc00\",lemonchiffon:\"#fffacd\",lightblue:\"#add8e6\",lightcoral:\"#f08080\",lightcyan:\"#e0ffff\",lightgoldenrodyellow:\"#fafad2\",lightgray:\"#d3d3d3\",lightgreen:\"#90ee90\",lightgrey:\"#d3d3d3\",lightpink:\"#ffb6c1\",lightsalmon:\"#ffa07a\",\nlightseagreen:\"#20b2aa\",lightskyblue:\"#87cefa\",lightslategray:\"#778899\",lightslategrey:\"#778899\",lightsteelblue:\"#b0c4de\",lightyellow:\"#ffffe0\",lime:\"#00ff00\",limegreen:\"#32cd32\",linen:\"#faf0e6\",magenta:\"#ff00ff\",maroon:\"#800000\",mediumaquamarine:\"#66cdaa\",mediumblue:\"#0000cd\",mediumorchid:\"#ba55d3\",mediumpurple:\"#9370db\",mediumseagreen:\"#3cb371\",mediumslateblue:\"#7b68ee\",mediumspringgreen:\"#00fa9a\",mediumturquoise:\"#48d1cc\",mediumvioletred:\"#c71585\",midnightblue:\"#191970\",mintcream:\"#f5fffa\",mistyrose:\"#ffe4e1\",\nmoccasin:\"#ffe4b5\",navajowhite:\"#ffdead\",navy:\"#000080\",oldlace:\"#fdf5e6\",olive:\"#808000\",olivedrab:\"#6b8e23\",orange:\"#ffa500\",orangered:\"#ff4500\",orchid:\"#da70d6\",palegoldenrod:\"#eee8aa\",palegreen:\"#98fb98\",paleturquoise:\"#afeeee\",palevioletred:\"#db7093\",papayawhip:\"#ffefd5\",peachpuff:\"#ffdab9\",peru:\"#cd853f\",pink:\"#ffc0cb\",plum:\"#dda0dd\",powderblue:\"#b0e0e6\",purple:\"#800080\",red:\"#ff0000\",rosybrown:\"#bc8f8f\",royalblue:\"#4169e1\",saddlebrown:\"#8b4513\",salmon:\"#fa8072\",sandybrown:\"#f4a460\",seagreen:\"#2e8b57\",\nseashell:\"#fff5ee\",sienna:\"#a0522d\",silver:\"#c0c0c0\",skyblue:\"#87ceeb\",slateblue:\"#6a5acd\",slategray:\"#708090\",slategrey:\"#708090\",snow:\"#fffafa\",springgreen:\"#00ff7f\",steelblue:\"#4682b4\",tan:\"#d2b48c\",teal:\"#008080\",thistle:\"#d8bfd8\",tomato:\"#ff6347\",turquoise:\"#40e0d0\",violet:\"#ee82ee\",wheat:\"#f5deb3\",white:\"#ffffff\",whitesmoke:\"#f5f5f5\",yellow:\"#ffff00\",yellowgreen:\"#9acd32\"};var Pc=\"backgroundColor borderTopColor borderRightColor borderBottomColor borderLeftColor color outlineColor\".split(\" \"),Qc=/#([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])/,Rc=/^#(?:[0-9a-f]{3}){1,2}$/i,Sc=/^(?:rgba)?\\((\\d{1,3}),\\s?(\\d{1,3}),\\s?(\\d{1,3}),\\s?(0|1|0\\.\\d*)\\)$/i,Tc=/^(?:rgb)?\\((0|[1-9]\\d{0,2}),\\s?(0|[1-9]\\d{0,2}),\\s?(0|[1-9]\\d{0,2})\\)$/i;function Uc(a,b){b=b.toLowerCase();return\"style\"==b?Vc(a.style.cssText):Lc&&\"value\"==b&&S(a,\"INPUT\")?a.value:Mc&&!0===a[b]?String(a.getAttribute(b)):(a=a.getAttributeNode(b))&&a.specified?a.value:null}var Wc=/[;]+(?=(?:(?:[^\"]*\"){2})*[^\"]*$)(?=(?:(?:[^']*'){2})*[^']*$)(?=(?:[^()]*\\([^()]*\\))*[^()]*$)/;\nfunction Vc(a){var b=[];l(a.split(Wc),function(c){var d=c.indexOf(\":\");0<d&&(c=[c.slice(0,d),c.slice(d+1)],2==c.length&&b.push(c[0].toLowerCase(),\":\",c[1],\";\"))});b=b.join(\"\");return b=\";\"==b.charAt(b.length-1)?b:b+\";\"}function S(a,b){b&&\"string\"!==typeof b&&(b=b.toString());return a instanceof HTMLFormElement?!!a&&1==a.nodeType&&(!b||\"FORM\"==b):!!a&&1==a.nodeType&&(!b||a.tagName.toUpperCase()==b)};function Xc(a,b,c,d){this.c=a;this.a=b;this.b=c;this.f=d}Xc.prototype.ceil=function(){this.c=Math.ceil(this.c);this.a=Math.ceil(this.a);this.b=Math.ceil(this.b);this.f=Math.ceil(this.f);return this};Xc.prototype.floor=function(){this.c=Math.floor(this.c);this.a=Math.floor(this.a);this.b=Math.floor(this.b);this.f=Math.floor(this.f);return this};Xc.prototype.round=function(){this.c=Math.round(this.c);this.a=Math.round(this.a);this.b=Math.round(this.b);this.f=Math.round(this.f);return this};function T(a,b,c,d){this.a=a;this.b=b;this.width=c;this.height=d}T.prototype.ceil=function(){this.a=Math.ceil(this.a);this.b=Math.ceil(this.b);this.width=Math.ceil(this.width);this.height=Math.ceil(this.height);return this};T.prototype.floor=function(){this.a=Math.floor(this.a);this.b=Math.floor(this.b);this.width=Math.floor(this.width);this.height=Math.floor(this.height);return this};\nT.prototype.round=function(){this.a=Math.round(this.a);this.b=Math.round(this.b);this.width=Math.round(this.width);this.height=Math.round(this.height);return this};var Yc=\"function\"===typeof ShadowRoot;function Zc(a){for(a=a.parentNode;a&&1!=a.nodeType&&9!=a.nodeType&&11!=a.nodeType;)a=a.parentNode;return S(a)?a:null}\nfunction U(a,b){b=Ha(b);if(\"float\"==b||\"cssFloat\"==b||\"styleFloat\"==b)b=Mc?\"styleFloat\":\"cssFloat\";a:{var c=b;var d=A(a);if(d.defaultView&&d.defaultView.getComputedStyle&&(d=d.defaultView.getComputedStyle(a,null))){c=d[c]||d.getPropertyValue(c)||\"\";break a}c=\"\"}a=c||$c(a,b);if(null===a)a=null;else if(0<=oa(Pc,b)){b:{var e=a.match(Sc);if(e&&(b=Number(e[1]),c=Number(e[2]),d=Number(e[3]),e=Number(e[4]),0<=b&&255>=b&&0<=c&&255>=c&&0<=d&&255>=d&&0<=e&&1>=e)){b=[b,c,d,e];break b}b=null}if(!b)b:{if(d=a.match(Tc))if(b=\nNumber(d[1]),c=Number(d[2]),d=Number(d[3]),0<=b&&255>=b&&0<=c&&255>=c&&0<=d&&255>=d){b=[b,c,d,1];break b}b=null}if(!b)b:{b=a.toLowerCase();c=Oc[b.toLowerCase()];if(!c&&(c=\"#\"==b.charAt(0)?b:\"#\"+b,4==c.length&&(c=c.replace(Qc,\"#$1$1$2$2$3$3\")),!Rc.test(c))){b=null;break b}b=[parseInt(c.substr(1,2),16),parseInt(c.substr(3,2),16),parseInt(c.substr(5,2),16),1]}a=b?\"rgba(\"+b.join(\", \")+\")\":a}return a}\nfunction $c(a,b){var c=a.currentStyle||a.style,d=c[b];void 0===d&&ea(c.getPropertyValue)&&(d=c.getPropertyValue(b));return\"inherit\"!=d?void 0!==d?d:null:(a=Zc(a))?$c(a,b):null}\nfunction ad(a,b,c){function d(g){var h=V(g);return 0<h.height&&0<h.width?!0:S(g,\"PATH\")&&(0<h.height||0<h.width)?(g=U(g,\"stroke-width\"),!!g&&0<parseInt(g,10)):\"hidden\"!=U(g,\"overflow\")&&sa(g.childNodes,function(n){return 3==n.nodeType||S(n)&&d(n)})}function e(g){return bd(g)==W&&ta(g.childNodes,function(h){return!S(h)||e(h)||!d(h)})}if(!S(a))throw Error(\"Argument to isShown must be of type Element\");if(S(a,\"BODY\"))return!0;if(S(a,\"OPTION\")||S(a,\"OPTGROUP\"))return a=lb(a,function(g){return S(g,\"SELECT\")}),\n!!a&&ad(a,!0,c);var f=cd(a);if(f)return!!f.image&&0<f.rect.width&&0<f.rect.height&&ad(f.image,b,c);if(S(a,\"INPUT\")&&\"hidden\"==a.type.toLowerCase()||S(a,\"NOSCRIPT\"))return!1;f=U(a,\"visibility\");return\"collapse\"!=f&&\"hidden\"!=f&&c(a)&&(b||0!=dd(a))&&d(a)?!e(a):!1}\nfunction ed(a){function b(c){if(S(c)&&\"none\"==U(c,\"display\"))return!1;var d;if((d=c.parentNode)&&d.shadowRoot&&void 0!==c.assignedSlot)d=c.assignedSlot?c.assignedSlot.parentNode:null;else if(c.getDestinationInsertionPoints){var e=c.getDestinationInsertionPoints();0<e.length&&(d=e[e.length-1])}if(Yc&&d instanceof ShadowRoot){if(d.host.shadowRoot&&d.host.shadowRoot!==d)return!1;d=d.host}return!d||9!=d.nodeType&&11!=d.nodeType?d&&S(d,\"DETAILS\")&&!d.open&&!S(c,\"SUMMARY\")?!1:!!d&&b(d):!0}return ad(a,!1,\nb)}var W=\"hidden\";\nfunction bd(a){function b(m){function v(Ab){if(Ab==g)return!0;var pc=U(Ab,\"display\");return 0==pc.lastIndexOf(\"inline\",0)||\"contents\"==pc||\"absolute\"==qc&&\"static\"==U(Ab,\"position\")?!1:!0}var qc=U(m,\"position\");if(\"fixed\"==qc)return u=!0,m==g?null:g;for(m=Zc(m);m&&!v(m);)m=Zc(m);return m}function c(m){var v=m;if(\"visible\"==n)if(m==g&&h)v=h;else if(m==h)return{x:\"visible\",y:\"visible\"};v={x:U(v,\"overflow-x\"),y:U(v,\"overflow-y\")};m==g&&(v.x=\"visible\"==v.x?\"auto\":v.x,v.y=\"visible\"==v.y?\"auto\":v.y);return v}\nfunction d(m){if(m==g){var v=(new fb(f)).a;m=v.scrollingElement?v.scrollingElement:Oa||\"CSS1Compat\"!=v.compatMode?v.body||v.documentElement:v.documentElement;v=v.parentWindow||v.defaultView;m=t&&Ua(\"10\")&&v.pageYOffset!=m.scrollTop?new cb(m.scrollLeft,m.scrollTop):new cb(v.pageXOffset||m.scrollLeft,v.pageYOffset||m.scrollTop)}else m=new cb(m.scrollLeft,m.scrollTop);return m}var e=fd(a),f=A(a),g=f.documentElement,h=f.body,n=U(g,\"overflow\"),u;for(a=b(a);a;a=b(a)){var p=c(a);if(\"visible\"!=p.x||\"visible\"!=\np.y){var G=V(a);if(0==G.width||0==G.height)return W;var R=e.a<G.a,fa=e.b<G.b;if(R&&\"hidden\"==p.x||fa&&\"hidden\"==p.y)return W;if(R&&\"visible\"!=p.x||fa&&\"visible\"!=p.y){R=d(a);fa=e.b<G.b-R.y;if(e.a<G.a-R.x&&\"visible\"!=p.x||fa&&\"visible\"!=p.x)return W;e=bd(a);return e==W?W:\"scroll\"}R=e.f>=G.a+G.width;G=e.c>=G.b+G.height;if(R&&\"hidden\"==p.x||G&&\"hidden\"==p.y)return W;if(R&&\"visible\"!=p.x||G&&\"visible\"!=p.y){if(u&&(p=d(a),e.f>=g.scrollWidth-p.x||e.a>=g.scrollHeight-p.y))return W;e=bd(a);return e==W?W:\n\"scroll\"}}}return\"none\"}\nfunction V(a){var b=cd(a);if(b)return b.rect;if(S(a,\"HTML\"))return a=A(a),a=((a?a.parentWindow||a.defaultView:window)||window).document,a=\"CSS1Compat\"==a.compatMode?a.documentElement:a.body,a=new db(a.clientWidth,a.clientHeight),new T(0,0,a.width,a.height);try{var c=a.getBoundingClientRect()}catch(d){return new T(0,0,0,0)}b=new T(c.left,c.top,c.right-c.left,c.bottom-c.top);t&&a.ownerDocument.body&&(a=A(a),b.a-=a.documentElement.clientLeft+a.body.clientLeft,b.b-=a.documentElement.clientTop+a.body.clientTop);\nreturn b}function cd(a){var b=S(a,\"MAP\");if(!b&&!S(a,\"AREA\"))return null;var c=b?a:S(a.parentNode,\"MAP\")?a.parentNode:null,d=null,e=null;c&&c.name&&(d=Nc.o('*[usemap=\"#'+c.name+'\"]',A(c)))&&(e=V(d),b||\"default\"==a.shape.toLowerCase()||(a=gd(a),b=Math.min(Math.max(a.a,0),e.width),c=Math.min(Math.max(a.b,0),e.height),e=new T(b+e.a,c+e.b,Math.min(a.width,e.width-b),Math.min(a.height,e.height-c))));return{image:d,rect:e||new T(0,0,0,0)}}\nfunction gd(a){var b=a.shape.toLowerCase();a=a.coords.split(\",\");if(\"rect\"==b&&4==a.length){b=a[0];var c=a[1];return new T(b,c,a[2]-b,a[3]-c)}if(\"circle\"==b&&3==a.length)return b=a[2],new T(a[0]-b,a[1]-b,2*b,2*b);if(\"poly\"==b&&2<a.length){b=a[0];c=a[1];for(var d=b,e=c,f=2;f+1<a.length;f+=2)b=Math.min(b,a[f]),d=Math.max(d,a[f]),c=Math.min(c,a[f+1]),e=Math.max(e,a[f+1]);return new T(b,c,d-b,e-c)}return new T(0,0,0,0)}function fd(a){a=V(a);return new Xc(a.b,a.a+a.width,a.b+a.height,a.a)}\nfunction hd(a){return a.replace(/^[^\\S\\xa0]+|[^\\S\\xa0]+$/g,\"\")}function id(a){var b=[];Yc?jd(a,b):kd(a,b);a=qa(b,hd);return hd(a.join(\"\\n\")).replace(/\\xa0/g,\" \")}\nfunction ld(a,b,c){if(S(a,\"BR\"))b.push(\"\");else{var d=S(a,\"TD\"),e=U(a,\"display\"),f=!d&&!(0<=oa(md,e)),g=void 0!==a.previousElementSibling?a.previousElementSibling:gb(a.previousSibling);g=g?U(g,\"display\"):\"\";var h=U(a,\"float\")||U(a,\"cssFloat\")||U(a,\"styleFloat\");!f||\"run-in\"==g&&\"none\"==h||/^[\\s\\xa0]*$/.test(b[b.length-1]||\"\")||b.push(\"\");var n=ed(a),u=null,p=null;n&&(u=U(a,\"white-space\"),p=U(a,\"text-transform\"));l(a.childNodes,function(G){c(G,b,n,u,p)});a=b[b.length-1]||\"\";!d&&\"table-cell\"!=e||!a||\nza(a)||(b[b.length-1]+=\" \");f&&\"run-in\"!=e&&!/^[\\s\\xa0]*$/.test(a)&&b.push(\"\")}}function kd(a,b){ld(a,b,function(c,d,e,f,g){3==c.nodeType&&e?nd(c,d,f,g):S(c)&&kd(c,d)})}var md=\"inline inline-block inline-table none table-cell table-column table-column-group\".split(\" \");\nfunction nd(a,b,c,d){a=a.nodeValue.replace(/[\\u200b\\u200e\\u200f]/g,\"\");a=a.replace(/(\\r\\n|\\r|\\n)/g,\"\\n\");if(\"normal\"==c||\"nowrap\"==c)a=a.replace(/\\n/g,\" \");a=\"pre\"==c||\"pre-wrap\"==c?a.replace(/[ \\f\\t\\v\\u2028\\u2029]/g,\"\\u00a0\"):a.replace(/[ \\f\\t\\v\\u2028\\u2029]+/g,\" \");\"capitalize\"==d?a=a.replace(t?/(^|\\s|\\b)(\\S)/g:/(^|\\s|\\b)(\\S)/gu,function(e,f,g){return f+g.toUpperCase()}):\"uppercase\"==d?a=a.toUpperCase():\"lowercase\"==d&&(a=a.toLowerCase());c=b.pop()||\"\";za(c)&&0==a.lastIndexOf(\" \",0)&&(a=a.substr(1));\nb.push(c+a)}function dd(a){if(Mc){if(\"relative\"==U(a,\"position\"))return 1;a=U(a,\"filter\");return(a=a.match(/^alpha\\(opacity=(\\d*)\\)/)||a.match(/^progid:DXImageTransform.Microsoft.Alpha\\(Opacity=(\\d*)\\)/))?Number(a[1])/100:1}return od(a)}function od(a){var b=1,c=U(a,\"opacity\");c&&(b=Number(c));(a=Zc(a))&&(b*=od(a));return b}\nfunction pd(a,b,c,d,e){if(3==a.nodeType&&c)nd(a,b,d,e);else if(S(a))if(S(a,\"CONTENT\")||S(a,\"SLOT\")){for(var f=a;f.parentNode;)f=f.parentNode;f instanceof ShadowRoot?(f=S(a,\"CONTENT\")?a.getDistributedNodes():a.assignedNodes(),l(0<f.length?f:a.childNodes,function(g){pd(g,b,c,d,e)})):jd(a,b)}else if(S(a,\"SHADOW\")){for(f=a;f.parentNode;)f=f.parentNode;if(f instanceof ShadowRoot&&(a=f))for(a=a.olderShadowRoot;a;)l(a.childNodes,function(g){pd(g,b,c,d,e)}),a=a.olderShadowRoot}else jd(a,b)}\nfunction jd(a,b){a.shadowRoot&&l(a.shadowRoot.childNodes,function(c){pd(c,b,!0,null,null)});ld(a,b,function(c,d,e,f,g){var h=null;1==c.nodeType?h=c:3==c.nodeType&&(h=c);null!=h&&(null!=h.assignedSlot||h.getDestinationInsertionPoints&&0<h.getDestinationInsertionPoints().length)||pd(c,d,e,f,g)})};var qd={C:function(a,b){return!(!a.querySelectorAll||!a.querySelector)&&!/^\\d.*/.test(b)},o:function(a,b){var c=eb(b),d=\"string\"===typeof a?c.a.getElementById(a):a;return d?Uc(d,\"id\")==a&&b!=d&&hb(b,d)?d:ua(mb(c,\"*\"),function(e){return Uc(e,\"id\")==a&&b!=e&&hb(b,e)}):null},j:function(a,b){if(!a)return[];if(qd.C(b,a))try{return b.querySelectorAll(\"#\"+qd.T(a))}catch(c){return[]}b=mb(eb(b),\"*\",null,b);return pa(b,function(c){return Uc(c,\"id\")==a})},T:function(a){return a.replace(/([\\s'\"\\\\#.:;,!?+<>=~*^$|%&@`{}\\-\\/\\[\\]\\(\\)])/g,\n\"\\\\$1\")}};var X={},rd={};X.N=function(a,b,c){try{var d=Nc.j(\"a\",b)}catch(e){d=mb(eb(b),\"A\",null,b)}return ua(d,function(e){e=id(e);e=e.replace(/^[\\s]+|[\\s]+$/g,\"\");return c&&-1!=e.indexOf(a)||e==a})};X.K=function(a,b,c){try{var d=Nc.j(\"a\",b)}catch(e){d=mb(eb(b),\"A\",null,b)}return pa(d,function(e){e=id(e);e=e.replace(/^[\\s]+|[\\s]+$/g,\"\");return c&&-1!=e.indexOf(a)||e==a})};X.o=function(a,b){return X.N(a,b,!1)};X.j=function(a,b){return X.K(a,b,!1)};rd.o=function(a,b){return X.N(a,b,!0)};\nrd.j=function(a,b){return X.K(a,b,!0)};var Y={F:function(a,b){return function(c){var d=Y.u(a);d=V(d);c=V(c);return b.call(null,d,c)}},R:function(a){return Y.F(a,function(b,c){return c.b+c.height<b.b})},S:function(a){return Y.F(a,function(b,c){return b.b+b.height<c.b})},V:function(a){return Y.F(a,function(b,c){return c.a+c.width<b.a})},aa:function(a){return Y.F(a,function(b,c){return b.a+b.width<c.a})},W:function(a,b){var c;b?c=b:\"number\"==typeof a.distance&&(c=a.distance);c||(c=50);return function(d){var e=Y.u(a);if(e===d)return!1;e=V(e);\nd=V(d);e=new T(e.a-c,e.b-c,e.width+2*c,e.height+2*c);return e.a<=d.a+d.width&&d.a<=e.a+e.width&&e.b<=d.b+d.height&&d.b<=e.b+e.height}},u:function(a){if(ha(a)&&1==a.nodeType)return a;if(ea(a))return Y.u(a.call(null));if(ha(a)){var b;a:{if(b=sd(a)){var c=td[b];if(c&&ea(c.o)){b=c.o(a[b],Bc.document);break a}}throw new P(61,\"Unsupported locator strategy: \"+b);}if(!b)throw new P(7,\"No element has been found by \"+JSON.stringify(a));return b}throw new P(61,\"Selector is of wrong type: \"+JSON.stringify(a));\n}};Y.P={left:Y.V,right:Y.aa,above:Y.R,below:Y.S,near:Y.W};Y.O={left:Y.u,right:Y.u,above:Y.u,below:Y.u,near:Y.u};Y.U=function(a,b){var c=[];l(a,function(e){e&&ta(b,function(f){var g=f.kind,h=Y.P[g];if(!h)throw new P(61,\"Cannot find filter suitable for \"+g);return h.apply(null,f.args)(e)},null)&&c.push(e)},null);a=b[b.length-1];var d=Y.O[a?a.kind:\"unknown\"];return d?(a=d.apply(null,a.args))?Y.ba(a,c):c:c};\nY.ba=function(a,b){function c(f){f=V(f);return Math.sqrt(Math.pow(d-(f.a+Math.max(1,f.width)/2),2)+Math.pow(e-(f.b+Math.max(1,f.height)/2),2))}a=V(a);var d=a.a+Math.max(1,a.width)/2,e=a.b+Math.max(1,a.height)/2;xa(b,function(f,g){return c(f)-c(g)});return b};Y.o=function(a,b){a=Y.j(a,b);return 0==a.length?null:a[0]};\nY.j=function(a,b){if(!a.hasOwnProperty(\"root\")||!a.hasOwnProperty(\"filters\"))throw new P(61,\"Locator not suitable for relative locators: \"+JSON.stringify(a));var c=a.filters,d=da(c);if(\"array\"!=d&&(\"object\"!=d||\"number\"!=typeof c.length))throw new P(61,\"Targets should be an array: \"+JSON.stringify(a));var e;S(a.root)?e=[a.root]:e=ud(a.root,b);return 0==e.length?[]:Y.U(e,a.filters)};var vd={o:function(a,b){if(\"\"===a)throw new P(32,'Unable to locate an element with the tagName \"\"');return b.getElementsByTagName(a)[0]||null},j:function(a,b){if(\"\"===a)throw new P(32,'Unable to locate an element with the tagName \"\"');return b.getElementsByTagName(a)}};var Z={};Z.I=function(){var a={da:\"http://www.w3.org/2000/svg\"};return function(b){return a[b]||null}}();\nZ.s=function(a,b,c){var d=A(a);if(!d.documentElement)return null;(t||Hc)&&Ac(d?d.parentWindow||d.defaultView:window);try{var e=d.createNSResolver?d.createNSResolver(d.documentElement):Z.I;if(t&&!Ua(7))return d.evaluate.call(d,b,a,e,c,null);if(!t||9<=Number(w)){for(var f={},g=d.getElementsByTagName(\"*\"),h=0;h<g.length;++h){var n=g[h],u=n.namespaceURI;if(u&&!f[u]){var p=n.lookupPrefix(u);if(!p){var G=u.match(\".*/(\\\\w+)/?$\");p=G?G[1]:\"xhtml\"}f[u]=p}}var R={},fa;for(fa in f)R[f[fa]]=fa;e=function(m){return R[m]||\nnull}}try{return d.evaluate(b,a,e,c,null)}catch(m){if(\"TypeError\"===m.name)return e=d.createNSResolver?d.createNSResolver(d.documentElement):Z.I,d.evaluate(b,a,e,c,null);throw m;}}catch(m){if(!Na||\"NS_ERROR_ILLEGAL_VALUE\"!=m.name)throw new P(32,\"Unable to locate an element with the xpath expression \"+b+\" because of the following error:\\n\"+m);}};Z.J=function(a,b){if(!a||1!=a.nodeType)throw new P(32,'The result of the xpath expression \"'+b+'\" is: '+a+\". It should be an element.\");};\nZ.o=function(a,b){var c=function(){var d=Z.s(b,a,9);return d?d.singleNodeValue||null:b.selectSingleNode?(d=A(b),d.setProperty&&d.setProperty(\"SelectionLanguage\",\"XPath\"),b.selectSingleNode(a)):null}();null===c||Z.J(c,a);return c};\nZ.j=function(a,b){var c=function(){var d=Z.s(b,a,7);if(d){for(var e=d.snapshotLength,f=[],g=0;g<e;++g)f.push(d.snapshotItem(g));return f}return b.selectNodes?(d=A(b),d.setProperty&&d.setProperty(\"SelectionLanguage\",\"XPath\"),b.selectNodes(a)):[]}();l(c,function(d){Z.J(d,a)});return c};var td={className:Dc,\"class name\":Dc,css:Nc,\"css selector\":Nc,relative:Y,id:qd,linkText:X,\"link text\":X,name:{o:function(a,b){b=mb(eb(b),\"*\",null,b);return ua(b,function(c){return Uc(c,\"name\")==a})},j:function(a,b){b=mb(eb(b),\"*\",null,b);return pa(b,function(c){return Uc(c,\"name\")==a})}},partialLinkText:rd,\"partial link text\":rd,tagName:vd,\"tag name\":vd,xpath:Z};function sd(a){for(var b in a)if(a.hasOwnProperty(b))return b;return null}\nfunction ud(a,b){var c=sd(a);if(c){var d=td[c];if(d&&ea(d.j))return d.j(a[c],b||Bc.document)}throw new P(61,\"Unsupported locator strategy: \"+c);};ca(\"_\",ud);; return this._.apply(null,arguments);}).apply({navigator:typeof window!='undefined'?window.navigator:null,document:typeof window!='undefined'?window.document:null}, arguments);};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/lib/atoms/find-elements.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/lib/atoms/get-attribute.js":
/*!********************************************************************!*\
  !*** ./node_modules/selenium-webdriver/lib/atoms/get-attribute.js ***!
  \********************************************************************/
/***/ ((module) => {

eval("// GENERATED CODE - DO NOT EDIT\nmodule.exports = function(){return (function(){var d=this||self;function f(a,b){function c(){}c.prototype=b.prototype;a.prototype=new c;a.prototype.constructor=a};var h=Array.prototype.indexOf?function(a,b){return Array.prototype.indexOf.call(a,b,void 0)}:function(a,b){if(\"string\"===typeof a)return\"string\"!==typeof b||1!=b.length?-1:a.indexOf(b,0);for(var c=0;c<a.length;c++)if(c in a&&a[c]===b)return c;return-1},k=Array.prototype.forEach?function(a,b){Array.prototype.forEach.call(a,b,void 0)}:function(a,b){for(var c=a.length,e=\"string\"===typeof a?a.split(\"\"):a,g=0;g<c;g++)g in e&&b.call(void 0,e[g],g,a)};function l(a,b){this.code=a;this.a=m[a]||n;this.message=b||\"\";a=this.a.replace(/((?:^|\\s+)[a-z])/g,function(c){return c.toUpperCase().replace(/^[\\s\\xa0]+/g,\"\")});b=a.length-5;if(0>b||a.indexOf(\"Error\",b)!=b)a+=\"Error\";this.name=a;a=Error(this.message);a.name=this.name;this.stack=a.stack||\"\"}f(l,Error);var n=\"unknown error\",m={15:\"element not selectable\",11:\"element not visible\"};m[31]=n;m[30]=n;m[24]=\"invalid cookie domain\";m[29]=\"invalid element coordinates\";m[12]=\"invalid element state\";m[32]=\"invalid selector\";\nm[51]=\"invalid selector\";m[52]=\"invalid selector\";m[17]=\"javascript error\";m[405]=\"unsupported operation\";m[34]=\"move target out of bounds\";m[27]=\"no such alert\";m[7]=\"no such element\";m[8]=\"no such frame\";m[23]=\"no such window\";m[28]=\"script timeout\";m[33]=\"session not created\";m[10]=\"stale element reference\";m[21]=\"timeout\";m[25]=\"unable to set cookie\";m[26]=\"unexpected alert open\";m[13]=n;m[9]=\"unknown command\";var p;a:{var q=d.navigator;if(q){var r=q.userAgent;if(r){p=r;break a}}p=\"\"}function t(a){return-1!=p.indexOf(a)};function u(){return t(\"Firefox\")||t(\"FxiOS\")}function v(){return(t(\"Chrome\")||t(\"CriOS\"))&&!t(\"Edge\")};function w(){return t(\"iPhone\")&&!t(\"iPod\")&&!t(\"iPad\")};var y=t(\"Opera\"),z=t(\"Trident\")||t(\"MSIE\"),A=t(\"Edge\"),B=t(\"Gecko\")&&!(-1!=p.toLowerCase().indexOf(\"webkit\")&&!t(\"Edge\"))&&!(t(\"Trident\")||t(\"MSIE\"))&&!t(\"Edge\"),C=-1!=p.toLowerCase().indexOf(\"webkit\")&&!t(\"Edge\");function D(){var a=d.document;return a?a.documentMode:void 0}var E;\na:{var F=\"\",G=function(){var a=p;if(B)return/rv:([^\\);]+)(\\)|;)/.exec(a);if(A)return/Edge\\/([\\d\\.]+)/.exec(a);if(z)return/\\b(?:MSIE|rv)[: ]([^\\);]+)(\\)|;)/.exec(a);if(C)return/WebKit\\/(\\S+)/.exec(a);if(y)return/(?:Version)[ \\/]?(\\S+)/.exec(a)}();G&&(F=G?G[1]:\"\");if(z){var H=D();if(null!=H&&H>parseFloat(F)){E=String(H);break a}}E=F}var I;I=d.document&&z?D():void 0;var J=u(),K=w()||t(\"iPod\"),L=t(\"iPad\"),M=t(\"Android\")&&!(v()||u()||t(\"Opera\")||t(\"Silk\")),N=v(),aa=t(\"Safari\")&&!(v()||t(\"Coast\")||t(\"Opera\")||t(\"Edge\")||t(\"Edg/\")||t(\"OPR\")||u()||t(\"Silk\")||t(\"Android\"))&&!(w()||t(\"iPad\")||t(\"iPod\"));function O(a){return(a=a.exec(p))?a[1]:\"\"}(function(){if(J)return O(/Firefox\\/([0-9.]+)/);if(z||A||y)return E;if(N)return w()||t(\"iPad\")||t(\"iPod\")?O(/CriOS\\/([0-9.]+)/):O(/Chrome\\/([0-9.]+)/);if(aa&&!(w()||t(\"iPad\")||t(\"iPod\")))return O(/Version\\/([0-9.]+)/);if(K||L){var a=/Version\\/(\\S+).*Mobile\\/(\\S+)/.exec(p);if(a)return a[1]+\".\"+a[2]}else if(M)return(a=O(/Android\\s+([0-9.]+)/))?a:O(/Version\\/([0-9.]+)/);return\"\"})();var P=z&&!(8<=Number(I)),ba=z&&!(9<=Number(I));var ca={SCRIPT:1,STYLE:1,HEAD:1,IFRAME:1,OBJECT:1},Q={IMG:\" \",BR:\"\\n\"};function R(a,b,c){if(!(a.nodeName in ca))if(3==a.nodeType)c?b.push(String(a.nodeValue).replace(/(\\r\\n|\\r|\\n)/g,\"\")):b.push(a.nodeValue);else if(a.nodeName in Q)b.push(Q[a.nodeName]);else for(a=a.firstChild;a;)R(a,b,c),a=a.nextSibling};function S(a,b){b=b.toLowerCase();return\"style\"==b?da(a.style.cssText):P&&\"value\"==b&&T(a,\"INPUT\")?a.value:ba&&!0===a[b]?String(a.getAttribute(b)):(a=a.getAttributeNode(b))&&a.specified?a.value:null}var ea=/[;]+(?=(?:(?:[^\"]*\"){2})*[^\"]*$)(?=(?:(?:[^']*'){2})*[^']*$)(?=(?:[^()]*\\([^()]*\\))*[^()]*$)/;\nfunction da(a){var b=[];k(a.split(ea),function(c){var e=c.indexOf(\":\");0<e&&(c=[c.slice(0,e),c.slice(e+1)],2==c.length&&b.push(c[0].toLowerCase(),\":\",c[1],\";\"))});b=b.join(\"\");return b=\";\"==b.charAt(b.length-1)?b:b+\";\"}function U(a,b){P&&\"value\"==b&&T(a,\"OPTION\")&&null===S(a,\"value\")?(b=[],R(a,b,!1),a=b.join(\"\")):a=a[b];return a}\nfunction T(a,b){b&&\"string\"!==typeof b&&(b=b.toString());return a instanceof HTMLFormElement?!!a&&1==a.nodeType&&(!b||\"FORM\"==b):!!a&&1==a.nodeType&&(!b||a.tagName.toUpperCase()==b)}function V(a){return T(a,\"OPTION\")?!0:T(a,\"INPUT\")?(a=a.type.toLowerCase(),\"checkbox\"==a||\"radio\"==a):!1};var fa={\"class\":\"className\",readonly:\"readOnly\"},ha=\"allowfullscreen allowpaymentrequest allowusermedia async autofocus autoplay checked compact complete controls declare default defaultchecked defaultselected defer disabled ended formnovalidate hidden indeterminate iscontenteditable ismap itemscope loop multiple muted nohref nomodule noresize noshade novalidate nowrap open paused playsinline pubdate readonly required reversed scoped seamless seeking selected truespeed typemustmatch willvalidate\".split(\" \");function W(a,b){var c=null,e=b.toLowerCase();if(\"style\"==e)return(c=a.style)&&\"string\"!=typeof c&&(c=c.cssText),c;if((\"selected\"==e||\"checked\"==e)&&V(a)){if(!V(a))throw new l(15,\"Element is not selectable\");b=\"selected\";c=a.type&&a.type.toLowerCase();if(\"checkbox\"==c||\"radio\"==c)b=\"checked\";return U(a,b)?\"true\":null}var g=T(a,\"A\");if(T(a,\"IMG\")&&\"src\"==e||g&&\"href\"==e)return(c=S(a,e))&&(c=U(a,e)),c;if(\"spellcheck\"==e){c=S(a,e);if(null!==c){if(\"false\"==c.toLowerCase())return\"false\";if(\"true\"==c.toLowerCase())return\"true\"}return U(a,\ne)+\"\"}g=fa[b]||b;if(0<=h(ha,e))return(c=null!==S(a,b)||U(a,g))?\"true\":null;try{var x=U(a,g)}catch(ia){}(e=null==x)||(e=typeof x,e=\"object\"==e&&null!=x||\"function\"==e);e?c=S(a,b):c=x;return null!=c?c.toString():null}var X=[\"_\"],Y=d;X[0]in Y||\"undefined\"==typeof Y.execScript||Y.execScript(\"var \"+X[0]);for(var Z;X.length&&(Z=X.shift());)X.length||void 0===W?Y[Z]&&Y[Z]!==Object.prototype[Z]?Y=Y[Z]:Y=Y[Z]={}:Y[Z]=W;; return this._.apply(null,arguments);}).apply({navigator:typeof window!='undefined'?window.navigator:null,document:typeof window!='undefined'?window.document:null}, arguments);};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/lib/atoms/get-attribute.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/lib/atoms/is-displayed.js":
/*!*******************************************************************!*\
  !*** ./node_modules/selenium-webdriver/lib/atoms/is-displayed.js ***!
  \*******************************************************************/
/***/ ((module) => {

eval("// GENERATED CODE - DO NOT EDIT\nmodule.exports = function(){return (function(){var g=this||self;\nfunction aa(a){var b=typeof a;if(\"object\"==b)if(a){if(a instanceof Array)return\"array\";if(a instanceof Object)return b;var c=Object.prototype.toString.call(a);if(\"[object Window]\"==c)return\"object\";if(\"[object Array]\"==c||\"number\"==typeof a.length&&\"undefined\"!=typeof a.splice&&\"undefined\"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable(\"splice\"))return\"array\";if(\"[object Function]\"==c||\"undefined\"!=typeof a.call&&\"undefined\"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable(\"call\"))return\"function\"}else return\"null\";else if(\"function\"==\nb&&\"undefined\"==typeof a.call)return\"object\";return b}function ca(a,b){function c(){}c.prototype=b.prototype;a.prototype=new c;a.prototype.constructor=a};var da=Array.prototype.indexOf?function(a,b){return Array.prototype.indexOf.call(a,b,void 0)}:function(a,b){if(\"string\"===typeof a)return\"string\"!==typeof b||1!=b.length?-1:a.indexOf(b,0);for(var c=0;c<a.length;c++)if(c in a&&a[c]===b)return c;return-1},ea=Array.prototype.some?function(a,b){return Array.prototype.some.call(a,b,void 0)}:function(a,b){for(var c=a.length,e=\"string\"===typeof a?a.split(\"\"):a,d=0;d<c;d++)if(d in e&&b.call(void 0,e[d],d,a))return!0;return!1},fa=Array.prototype.every?function(a,\nb){return Array.prototype.every.call(a,b,void 0)}:function(a,b){for(var c=a.length,e=\"string\"===typeof a?a.split(\"\"):a,d=0;d<c;d++)if(d in e&&!b.call(void 0,e[d],d,a))return!1;return!0};var ha={aliceblue:\"#f0f8ff\",antiquewhite:\"#faebd7\",aqua:\"#00ffff\",aquamarine:\"#7fffd4\",azure:\"#f0ffff\",beige:\"#f5f5dc\",bisque:\"#ffe4c4\",black:\"#000000\",blanchedalmond:\"#ffebcd\",blue:\"#0000ff\",blueviolet:\"#8a2be2\",brown:\"#a52a2a\",burlywood:\"#deb887\",cadetblue:\"#5f9ea0\",chartreuse:\"#7fff00\",chocolate:\"#d2691e\",coral:\"#ff7f50\",cornflowerblue:\"#6495ed\",cornsilk:\"#fff8dc\",crimson:\"#dc143c\",cyan:\"#00ffff\",darkblue:\"#00008b\",darkcyan:\"#008b8b\",darkgoldenrod:\"#b8860b\",darkgray:\"#a9a9a9\",darkgreen:\"#006400\",\ndarkgrey:\"#a9a9a9\",darkkhaki:\"#bdb76b\",darkmagenta:\"#8b008b\",darkolivegreen:\"#556b2f\",darkorange:\"#ff8c00\",darkorchid:\"#9932cc\",darkred:\"#8b0000\",darksalmon:\"#e9967a\",darkseagreen:\"#8fbc8f\",darkslateblue:\"#483d8b\",darkslategray:\"#2f4f4f\",darkslategrey:\"#2f4f4f\",darkturquoise:\"#00ced1\",darkviolet:\"#9400d3\",deeppink:\"#ff1493\",deepskyblue:\"#00bfff\",dimgray:\"#696969\",dimgrey:\"#696969\",dodgerblue:\"#1e90ff\",firebrick:\"#b22222\",floralwhite:\"#fffaf0\",forestgreen:\"#228b22\",fuchsia:\"#ff00ff\",gainsboro:\"#dcdcdc\",\nghostwhite:\"#f8f8ff\",gold:\"#ffd700\",goldenrod:\"#daa520\",gray:\"#808080\",green:\"#008000\",greenyellow:\"#adff2f\",grey:\"#808080\",honeydew:\"#f0fff0\",hotpink:\"#ff69b4\",indianred:\"#cd5c5c\",indigo:\"#4b0082\",ivory:\"#fffff0\",khaki:\"#f0e68c\",lavender:\"#e6e6fa\",lavenderblush:\"#fff0f5\",lawngreen:\"#7cfc00\",lemonchiffon:\"#fffacd\",lightblue:\"#add8e6\",lightcoral:\"#f08080\",lightcyan:\"#e0ffff\",lightgoldenrodyellow:\"#fafad2\",lightgray:\"#d3d3d3\",lightgreen:\"#90ee90\",lightgrey:\"#d3d3d3\",lightpink:\"#ffb6c1\",lightsalmon:\"#ffa07a\",\nlightseagreen:\"#20b2aa\",lightskyblue:\"#87cefa\",lightslategray:\"#778899\",lightslategrey:\"#778899\",lightsteelblue:\"#b0c4de\",lightyellow:\"#ffffe0\",lime:\"#00ff00\",limegreen:\"#32cd32\",linen:\"#faf0e6\",magenta:\"#ff00ff\",maroon:\"#800000\",mediumaquamarine:\"#66cdaa\",mediumblue:\"#0000cd\",mediumorchid:\"#ba55d3\",mediumpurple:\"#9370db\",mediumseagreen:\"#3cb371\",mediumslateblue:\"#7b68ee\",mediumspringgreen:\"#00fa9a\",mediumturquoise:\"#48d1cc\",mediumvioletred:\"#c71585\",midnightblue:\"#191970\",mintcream:\"#f5fffa\",mistyrose:\"#ffe4e1\",\nmoccasin:\"#ffe4b5\",navajowhite:\"#ffdead\",navy:\"#000080\",oldlace:\"#fdf5e6\",olive:\"#808000\",olivedrab:\"#6b8e23\",orange:\"#ffa500\",orangered:\"#ff4500\",orchid:\"#da70d6\",palegoldenrod:\"#eee8aa\",palegreen:\"#98fb98\",paleturquoise:\"#afeeee\",palevioletred:\"#db7093\",papayawhip:\"#ffefd5\",peachpuff:\"#ffdab9\",peru:\"#cd853f\",pink:\"#ffc0cb\",plum:\"#dda0dd\",powderblue:\"#b0e0e6\",purple:\"#800080\",red:\"#ff0000\",rosybrown:\"#bc8f8f\",royalblue:\"#4169e1\",saddlebrown:\"#8b4513\",salmon:\"#fa8072\",sandybrown:\"#f4a460\",seagreen:\"#2e8b57\",\nseashell:\"#fff5ee\",sienna:\"#a0522d\",silver:\"#c0c0c0\",skyblue:\"#87ceeb\",slateblue:\"#6a5acd\",slategray:\"#708090\",slategrey:\"#708090\",snow:\"#fffafa\",springgreen:\"#00ff7f\",steelblue:\"#4682b4\",tan:\"#d2b48c\",teal:\"#008080\",thistle:\"#d8bfd8\",tomato:\"#ff6347\",turquoise:\"#40e0d0\",violet:\"#ee82ee\",wheat:\"#f5deb3\",white:\"#ffffff\",whitesmoke:\"#f5f5f5\",yellow:\"#ffff00\",yellowgreen:\"#9acd32\"};var ia=\"backgroundColor borderTopColor borderRightColor borderBottomColor borderLeftColor color outlineColor\".split(\" \"),ja=/#([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])/,ka=/^#(?:[0-9a-f]{3}){1,2}$/i,la=/^(?:rgba)?\\((\\d{1,3}),\\s?(\\d{1,3}),\\s?(\\d{1,3}),\\s?(0|1|0\\.\\d*)\\)$/i,ma=/^(?:rgb)?\\((0|[1-9]\\d{0,2}),\\s?(0|[1-9]\\d{0,2}),\\s?(0|[1-9]\\d{0,2})\\)$/i;function m(a,b){this.code=a;this.a=p[a]||r;this.message=b||\"\";a=this.a.replace(/((?:^|\\s+)[a-z])/g,function(c){return c.toUpperCase().replace(/^[\\s\\xa0]+/g,\"\")});b=a.length-5;if(0>b||a.indexOf(\"Error\",b)!=b)a+=\"Error\";this.name=a;a=Error(this.message);a.name=this.name;this.stack=a.stack||\"\"}ca(m,Error);var r=\"unknown error\",p={15:\"element not selectable\",11:\"element not visible\"};p[31]=r;p[30]=r;p[24]=\"invalid cookie domain\";p[29]=\"invalid element coordinates\";p[12]=\"invalid element state\";\np[32]=\"invalid selector\";p[51]=\"invalid selector\";p[52]=\"invalid selector\";p[17]=\"javascript error\";p[405]=\"unsupported operation\";p[34]=\"move target out of bounds\";p[27]=\"no such alert\";p[7]=\"no such element\";p[8]=\"no such frame\";p[23]=\"no such window\";p[28]=\"script timeout\";p[33]=\"session not created\";p[10]=\"stale element reference\";p[21]=\"timeout\";p[25]=\"unable to set cookie\";p[26]=\"unexpected alert open\";p[13]=r;p[9]=\"unknown command\";var u=String.prototype.trim?function(a){return a.trim()}:function(a){return/^[\\s\\xa0]*([\\s\\S]*?)[\\s\\xa0]*$/.exec(a)[1]};\nfunction na(a,b){var c=0;a=u(String(a)).split(\".\");b=u(String(b)).split(\".\");for(var e=Math.max(a.length,b.length),d=0;0==c&&d<e;d++){var f=a[d]||\"\",h=b[d]||\"\";do{f=/(\\d*)(\\D*)(.*)/.exec(f)||[\"\",\"\",\"\",\"\"];h=/(\\d*)(\\D*)(.*)/.exec(h)||[\"\",\"\",\"\",\"\"];if(0==f[0].length&&0==h[0].length)break;c=v(0==f[1].length?0:parseInt(f[1],10),0==h[1].length?0:parseInt(h[1],10))||v(0==f[2].length,0==h[2].length)||v(f[2],h[2]);f=f[3];h=h[3]}while(0==c)}return c}function v(a,b){return a<b?-1:a>b?1:0};var w;a:{var oa=g.navigator;if(oa){var sa=oa.userAgent;if(sa){w=sa;break a}}w=\"\"}function x(a){return-1!=w.indexOf(a)};function y(){return x(\"Firefox\")||x(\"FxiOS\")}function A(){return(x(\"Chrome\")||x(\"CriOS\"))&&!x(\"Edge\")};function ta(a){return String(a).replace(/\\-([a-z])/g,function(b,c){return c.toUpperCase()})};function B(){return x(\"iPhone\")&&!x(\"iPod\")&&!x(\"iPad\")};function ua(a,b){var c=va;return Object.prototype.hasOwnProperty.call(c,a)?c[a]:c[a]=b(a)};var wa=x(\"Opera\"),C=x(\"Trident\")||x(\"MSIE\"),xa=x(\"Edge\"),ya=x(\"Gecko\")&&!(-1!=w.toLowerCase().indexOf(\"webkit\")&&!x(\"Edge\"))&&!(x(\"Trident\")||x(\"MSIE\"))&&!x(\"Edge\"),za=-1!=w.toLowerCase().indexOf(\"webkit\")&&!x(\"Edge\");function Aa(){var a=g.document;return a?a.documentMode:void 0}var E;\na:{var F=\"\",G=function(){var a=w;if(ya)return/rv:([^\\);]+)(\\)|;)/.exec(a);if(xa)return/Edge\\/([\\d\\.]+)/.exec(a);if(C)return/\\b(?:MSIE|rv)[: ]([^\\);]+)(\\)|;)/.exec(a);if(za)return/WebKit\\/(\\S+)/.exec(a);if(wa)return/(?:Version)[ \\/]?(\\S+)/.exec(a)}();G&&(F=G?G[1]:\"\");if(C){var H=Aa();if(null!=H&&H>parseFloat(F)){E=String(H);break a}}E=F}var va={};function Ba(a){return ua(a,function(){return 0<=na(E,a)})}var I;I=g.document&&C?Aa():void 0;var Ca=y(),Da=B()||x(\"iPod\"),Ea=x(\"iPad\"),Fa=x(\"Android\")&&!(A()||y()||x(\"Opera\")||x(\"Silk\")),Ga=A(),Ha=x(\"Safari\")&&!(A()||x(\"Coast\")||x(\"Opera\")||x(\"Edge\")||x(\"Edg/\")||x(\"OPR\")||y()||x(\"Silk\")||x(\"Android\"))&&!(B()||x(\"iPad\")||x(\"iPod\"));function J(a){return(a=a.exec(w))?a[1]:\"\"}(function(){if(Ca)return J(/Firefox\\/([0-9.]+)/);if(C||xa||wa)return E;if(Ga)return B()||x(\"iPad\")||x(\"iPod\")?J(/CriOS\\/([0-9.]+)/):J(/Chrome\\/([0-9.]+)/);if(Ha&&!(B()||x(\"iPad\")||x(\"iPod\")))return J(/Version\\/([0-9.]+)/);if(Da||Ea){var a=/Version\\/(\\S+).*Mobile\\/(\\S+)/.exec(w);if(a)return a[1]+\".\"+a[2]}else if(Fa)return(a=J(/Android\\s+([0-9.]+)/))?a:J(/Version\\/([0-9.]+)/);return\"\"})();var K;if(K=C)K=!(9<=Number(I));var Ia=K;function L(a,b){this.x=void 0!==a?a:0;this.y=void 0!==b?b:0}L.prototype.ceil=function(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);return this};L.prototype.floor=function(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);return this};L.prototype.round=function(){this.x=Math.round(this.x);this.y=Math.round(this.y);return this};function M(a,b){this.width=a;this.height=b}M.prototype.aspectRatio=function(){return this.width/this.height};M.prototype.ceil=function(){this.width=Math.ceil(this.width);this.height=Math.ceil(this.height);return this};M.prototype.floor=function(){this.width=Math.floor(this.width);this.height=Math.floor(this.height);return this};M.prototype.round=function(){this.width=Math.round(this.width);this.height=Math.round(this.height);return this};function N(a){return 9==a.nodeType?a:a.ownerDocument||a.document}function Ja(a,b){a&&(a=a.parentNode);for(var c=0;a;){if(b(a))return a;a=a.parentNode;c++}return null}function Ka(a){this.a=a||g.document||document};function P(a,b){b&&\"string\"!==typeof b&&(b=b.toString());return a instanceof HTMLFormElement?!!a&&1==a.nodeType&&(!b||\"FORM\"==b):!!a&&1==a.nodeType&&(!b||a.tagName.toUpperCase()==b)};function Q(a,b,c,e){this.f=a;this.a=b;this.b=c;this.c=e}Q.prototype.ceil=function(){this.f=Math.ceil(this.f);this.a=Math.ceil(this.a);this.b=Math.ceil(this.b);this.c=Math.ceil(this.c);return this};Q.prototype.floor=function(){this.f=Math.floor(this.f);this.a=Math.floor(this.a);this.b=Math.floor(this.b);this.c=Math.floor(this.c);return this};Q.prototype.round=function(){this.f=Math.round(this.f);this.a=Math.round(this.a);this.b=Math.round(this.b);this.c=Math.round(this.c);return this};function R(a,b,c,e){this.a=a;this.b=b;this.width=c;this.height=e}R.prototype.ceil=function(){this.a=Math.ceil(this.a);this.b=Math.ceil(this.b);this.width=Math.ceil(this.width);this.height=Math.ceil(this.height);return this};R.prototype.floor=function(){this.a=Math.floor(this.a);this.b=Math.floor(this.b);this.width=Math.floor(this.width);this.height=Math.floor(this.height);return this};\nR.prototype.round=function(){this.a=Math.round(this.a);this.b=Math.round(this.b);this.width=Math.round(this.width);this.height=Math.round(this.height);return this};var La=\"function\"===typeof ShadowRoot;function S(a){for(a=a.parentNode;a&&1!=a.nodeType&&9!=a.nodeType&&11!=a.nodeType;)a=a.parentNode;return P(a)?a:null}\nfunction T(a,b){b=ta(b);if(\"float\"==b||\"cssFloat\"==b||\"styleFloat\"==b)b=Ia?\"styleFloat\":\"cssFloat\";a:{var c=b;var e=N(a);if(e.defaultView&&e.defaultView.getComputedStyle&&(e=e.defaultView.getComputedStyle(a,null))){c=e[c]||e.getPropertyValue(c)||\"\";break a}c=\"\"}a=c||Ma(a,b);if(null===a)a=null;else if(0<=da(ia,b)){b:{var d=a.match(la);if(d&&(b=Number(d[1]),c=Number(d[2]),e=Number(d[3]),d=Number(d[4]),0<=b&&255>=b&&0<=c&&255>=c&&0<=e&&255>=e&&0<=d&&1>=d)){b=[b,c,e,d];break b}b=null}if(!b)b:{if(e=a.match(ma))if(b=\nNumber(e[1]),c=Number(e[2]),e=Number(e[3]),0<=b&&255>=b&&0<=c&&255>=c&&0<=e&&255>=e){b=[b,c,e,1];break b}b=null}if(!b)b:{b=a.toLowerCase();c=ha[b.toLowerCase()];if(!c&&(c=\"#\"==b.charAt(0)?b:\"#\"+b,4==c.length&&(c=c.replace(ja,\"#$1$1$2$2$3$3\")),!ka.test(c))){b=null;break b}b=[parseInt(c.substr(1,2),16),parseInt(c.substr(3,2),16),parseInt(c.substr(5,2),16),1]}a=b?\"rgba(\"+b.join(\", \")+\")\":a}return a}\nfunction Ma(a,b){var c=a.currentStyle||a.style,e=c[b];void 0===e&&\"function\"==aa(c.getPropertyValue)&&(e=c.getPropertyValue(b));return\"inherit\"!=e?void 0!==e?e:null:(a=S(a))?Ma(a,b):null}\nfunction U(a,b,c){function e(h){var n=V(h);return 0<n.height&&0<n.width?!0:P(h,\"PATH\")&&(0<n.height||0<n.width)?(h=T(h,\"stroke-width\"),!!h&&0<parseInt(h,10)):\"hidden\"!=T(h,\"overflow\")&&ea(h.childNodes,function(D){return 3==D.nodeType||P(D)&&e(D)})}function d(h){return Na(h)==W&&fa(h.childNodes,function(n){return!P(n)||d(n)||!e(n)})}if(!P(a))throw Error(\"Argument to isShown must be of type Element\");if(P(a,\"BODY\"))return!0;if(P(a,\"OPTION\")||P(a,\"OPTGROUP\"))return a=Ja(a,function(h){return P(h,\"SELECT\")}),\n!!a&&U(a,!0,c);var f=Oa(a);if(f)return!!f.image&&0<f.rect.width&&0<f.rect.height&&U(f.image,b,c);if(P(a,\"INPUT\")&&\"hidden\"==a.type.toLowerCase()||P(a,\"NOSCRIPT\"))return!1;f=T(a,\"visibility\");return\"collapse\"!=f&&\"hidden\"!=f&&c(a)&&(b||0!=Pa(a))&&e(a)?!d(a):!1}var W=\"hidden\";\nfunction Na(a){function b(k){function l(ba){if(ba==h)return!0;var pa=T(ba,\"display\");return 0==pa.lastIndexOf(\"inline\",0)||\"contents\"==pa||\"absolute\"==qa&&\"static\"==T(ba,\"position\")?!1:!0}var qa=T(k,\"position\");if(\"fixed\"==qa)return ra=!0,k==h?null:h;for(k=S(k);k&&!l(k);)k=S(k);return k}function c(k){var l=k;if(\"visible\"==D)if(k==h&&n)l=n;else if(k==n)return{x:\"visible\",y:\"visible\"};l={x:T(l,\"overflow-x\"),y:T(l,\"overflow-y\")};k==h&&(l.x=\"visible\"==l.x?\"auto\":l.x,l.y=\"visible\"==l.y?\"auto\":l.y);return l}\nfunction e(k){if(k==h){var l=(new Ka(f)).a;k=l.scrollingElement?l.scrollingElement:za||\"CSS1Compat\"!=l.compatMode?l.body||l.documentElement:l.documentElement;l=l.parentWindow||l.defaultView;k=C&&Ba(\"10\")&&l.pageYOffset!=k.scrollTop?new L(k.scrollLeft,k.scrollTop):new L(l.pageXOffset||k.scrollLeft,l.pageYOffset||k.scrollTop)}else k=new L(k.scrollLeft,k.scrollTop);return k}var d=Qa(a),f=N(a),h=f.documentElement,n=f.body,D=T(h,\"overflow\"),ra;for(a=b(a);a;a=b(a)){var q=c(a);if(\"visible\"!=q.x||\"visible\"!=\nq.y){var t=V(a);if(0==t.width||0==t.height)return W;var z=d.a<t.a,O=d.b<t.b;if(z&&\"hidden\"==q.x||O&&\"hidden\"==q.y)return W;if(z&&\"visible\"!=q.x||O&&\"visible\"!=q.y){z=e(a);O=d.b<t.b-z.y;if(d.a<t.a-z.x&&\"visible\"!=q.x||O&&\"visible\"!=q.x)return W;d=Na(a);return d==W?W:\"scroll\"}z=d.c>=t.a+t.width;t=d.f>=t.b+t.height;if(z&&\"hidden\"==q.x||t&&\"hidden\"==q.y)return W;if(z&&\"visible\"!=q.x||t&&\"visible\"!=q.y){if(ra&&(q=e(a),d.c>=h.scrollWidth-q.x||d.a>=h.scrollHeight-q.y))return W;d=Na(a);return d==W?W:\"scroll\"}}}return\"none\"}\nfunction V(a){var b=Oa(a);if(b)return b.rect;if(P(a,\"HTML\"))return a=N(a),a=((a?a.parentWindow||a.defaultView:window)||window).document,a=\"CSS1Compat\"==a.compatMode?a.documentElement:a.body,a=new M(a.clientWidth,a.clientHeight),new R(0,0,a.width,a.height);try{var c=a.getBoundingClientRect()}catch(e){return new R(0,0,0,0)}b=new R(c.left,c.top,c.right-c.left,c.bottom-c.top);C&&a.ownerDocument.body&&(a=N(a),b.a-=a.documentElement.clientLeft+a.body.clientLeft,b.b-=a.documentElement.clientTop+a.body.clientTop);\nreturn b}\nfunction Oa(a){var b=P(a,\"MAP\");if(!b&&!P(a,\"AREA\"))return null;var c=b?a:P(a.parentNode,\"MAP\")?a.parentNode:null,e=null,d=null;if(c&&c.name){e='*[usemap=\"#'+c.name+'\"]';c=N(c);var f;if(f=\"function\"!=aa(c.querySelector)&&C&&(C?0<=na(I,8):Ba(8))){f=c.querySelector;var h=typeof f;f=!(\"object\"==h&&null!=f||\"function\"==h)}if(f)throw Error(\"CSS selection is not supported\");if(!e)throw new m(32,\"No selector specified\");e=u(e);try{var n=c.querySelector(e)}catch(D){throw new m(32,\"An invalid or illegal selector was specified\");}if(e=\nn&&1==n.nodeType?n:null)d=V(e),b||\"default\"==a.shape.toLowerCase()||(a=Ra(a),b=Math.min(Math.max(a.a,0),d.width),n=Math.min(Math.max(a.b,0),d.height),d=new R(b+d.a,n+d.b,Math.min(a.width,d.width-b),Math.min(a.height,d.height-n)))}return{image:e,rect:d||new R(0,0,0,0)}}\nfunction Ra(a){var b=a.shape.toLowerCase();a=a.coords.split(\",\");if(\"rect\"==b&&4==a.length){b=a[0];var c=a[1];return new R(b,c,a[2]-b,a[3]-c)}if(\"circle\"==b&&3==a.length)return b=a[2],new R(a[0]-b,a[1]-b,2*b,2*b);if(\"poly\"==b&&2<a.length){b=a[0];c=a[1];for(var e=b,d=c,f=2;f+1<a.length;f+=2)b=Math.min(b,a[f]),e=Math.max(e,a[f]),c=Math.min(c,a[f+1]),d=Math.max(d,a[f+1]);return new R(b,c,e-b,d-c)}return new R(0,0,0,0)}function Qa(a){a=V(a);return new Q(a.b,a.a+a.width,a.b+a.height,a.a)}\nfunction Pa(a){if(Ia){if(\"relative\"==T(a,\"position\"))return 1;a=T(a,\"filter\");return(a=a.match(/^alpha\\(opacity=(\\d*)\\)/)||a.match(/^progid:DXImageTransform.Microsoft.Alpha\\(Opacity=(\\d*)\\)/))?Number(a[1])/100:1}return Sa(a)}function Sa(a){var b=1,c=T(a,\"opacity\");c&&(b=Number(c));(a=S(a))&&(b*=Sa(a));return b};function Ta(a,b){function c(e){if(P(e)&&\"none\"==T(e,\"display\"))return!1;var d;if((d=e.parentNode)&&d.shadowRoot&&void 0!==e.assignedSlot)d=e.assignedSlot?e.assignedSlot.parentNode:null;else if(e.getDestinationInsertionPoints){var f=e.getDestinationInsertionPoints();0<f.length&&(d=f[f.length-1])}if(La&&d instanceof ShadowRoot){if(d.host.shadowRoot&&d.host.shadowRoot!==d)return!1;d=d.host}return!d||9!=d.nodeType&&11!=d.nodeType?d&&P(d,\"DETAILS\")&&!d.open&&!P(e,\"SUMMARY\")?!1:!!d&&c(d):!0}return U(a,\n!!b,c)}var X=[\"_\"],Y=g;X[0]in Y||\"undefined\"==typeof Y.execScript||Y.execScript(\"var \"+X[0]);for(var Z;X.length&&(Z=X.shift());)X.length||void 0===Ta?Y[Z]&&Y[Z]!==Object.prototype[Z]?Y=Y[Z]:Y=Y[Z]={}:Y[Z]=Ta;; return this._.apply(null,arguments);}).apply({navigator:typeof window!='undefined'?window.navigator:null,document:typeof window!='undefined'?window.document:null}, arguments);};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/lib/atoms/is-displayed.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/lib/atoms/mutation-listener.js":
/*!************************************************************************!*\
  !*** ./node_modules/selenium-webdriver/lib/atoms/mutation-listener.js ***!
  \************************************************************************/
/***/ (() => {

eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n(function () {\n  const observer = new MutationObserver((mutations) => {\n    for (const mutation of mutations) {\n      switch (mutation.type) {\n        case 'attributes':\n          // Don't report our own attribute has changed.\n          if (mutation.attributeName === \"data-__webdriver_id\") {\n            break;\n          }\n          const curr = mutation.target.getAttribute(mutation.attributeName);\n          var id = mutation.target.dataset.__webdriver_id\n          if (!id) {\n            id = Math.random().toString(36).substring(2) + Date.now().toString(36);\n            mutation.target.dataset.__webdriver_id = id;\n          }\n          const json = JSON.stringify({\n            'target': id,\n            'name': mutation.attributeName,\n            'value': curr,\n            'oldValue': mutation.oldValue\n          });\n          __webdriver_attribute(json);\n          break;\n        default:\n          break;\n      }\n    }\n  });\n\n  observer.observe(document, {\n    'attributes': true,\n    'attributeOldValue': true,\n    'characterData': true,\n    'characterDataOldValue': true,\n    'childList': true,\n    'subtree': true\n  });\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc2VsZW5pdW0td2ViZHJpdmVyL2xpYi9hdG9tcy9tdXRhdGlvbi1saXN0ZW5lci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ29vZ2xlLXNoZWV0cy1zZWxlbml1bS1hdXRvbWF0aW9uLy4vbm9kZV9tb2R1bGVzL3NlbGVuaXVtLXdlYmRyaXZlci9saWIvYXRvbXMvbXV0YXRpb24tbGlzdGVuZXIuanM/NjBmYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgU29mdHdhcmUgRnJlZWRvbSBDb25zZXJ2YW5jeSAoU0ZDKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIFNGQyBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4oZnVuY3Rpb24gKCkge1xuICBjb25zdCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKChtdXRhdGlvbnMpID0+IHtcbiAgICBmb3IgKGNvbnN0IG11dGF0aW9uIG9mIG11dGF0aW9ucykge1xuICAgICAgc3dpdGNoIChtdXRhdGlvbi50eXBlKSB7XG4gICAgICAgIGNhc2UgJ2F0dHJpYnV0ZXMnOlxuICAgICAgICAgIC8vIERvbid0IHJlcG9ydCBvdXIgb3duIGF0dHJpYnV0ZSBoYXMgY2hhbmdlZC5cbiAgICAgICAgICBpZiAobXV0YXRpb24uYXR0cmlidXRlTmFtZSA9PT0gXCJkYXRhLV9fd2ViZHJpdmVyX2lkXCIpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBjdXJyID0gbXV0YXRpb24udGFyZ2V0LmdldEF0dHJpYnV0ZShtdXRhdGlvbi5hdHRyaWJ1dGVOYW1lKTtcbiAgICAgICAgICB2YXIgaWQgPSBtdXRhdGlvbi50YXJnZXQuZGF0YXNldC5fX3dlYmRyaXZlcl9pZFxuICAgICAgICAgIGlmICghaWQpIHtcbiAgICAgICAgICAgIGlkID0gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDIpICsgRGF0ZS5ub3coKS50b1N0cmluZygzNik7XG4gICAgICAgICAgICBtdXRhdGlvbi50YXJnZXQuZGF0YXNldC5fX3dlYmRyaXZlcl9pZCA9IGlkO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBqc29uID0gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgJ3RhcmdldCc6IGlkLFxuICAgICAgICAgICAgJ25hbWUnOiBtdXRhdGlvbi5hdHRyaWJ1dGVOYW1lLFxuICAgICAgICAgICAgJ3ZhbHVlJzogY3VycixcbiAgICAgICAgICAgICdvbGRWYWx1ZSc6IG11dGF0aW9uLm9sZFZhbHVlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgX193ZWJkcml2ZXJfYXR0cmlidXRlKGpzb24pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgb2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudCwge1xuICAgICdhdHRyaWJ1dGVzJzogdHJ1ZSxcbiAgICAnYXR0cmlidXRlT2xkVmFsdWUnOiB0cnVlLFxuICAgICdjaGFyYWN0ZXJEYXRhJzogdHJ1ZSxcbiAgICAnY2hhcmFjdGVyRGF0YU9sZFZhbHVlJzogdHJ1ZSxcbiAgICAnY2hpbGRMaXN0JzogdHJ1ZSxcbiAgICAnc3VidHJlZSc6IHRydWVcbiAgfSk7XG59KSgpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/lib/atoms/mutation-listener.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/lib/by.js":
/*!***************************************************!*\
  !*** ./node_modules/selenium-webdriver/lib/by.js ***!
  \***************************************************/
/***/ ((module) => {

"use strict";
eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\n\n/**\n * @fileoverview Factory methods for the supported locator strategies.\n */\n\n/**\n * Short-hand expressions for the primary element locator strategies.\n * For example the following two statements are equivalent:\n *\n *     var e1 = driver.findElement(By.id('foo'));\n *     var e2 = driver.findElement({id: 'foo'});\n *\n * Care should be taken when using JavaScript minifiers (such as the\n * Closure compiler), as locator hashes will always be parsed using\n * the un-obfuscated properties listed.\n *\n * @typedef {(\n *     {className: string}|\n *     {css: string}|\n *     {id: string}|\n *     {js: string}|\n *     {linkText: string}|\n *     {name: string}|\n *     {partialLinkText: string}|\n *     {tagName: string}|\n *     {xpath: string})} ByHash\n */\n\n/**\n * Error thrown if an invalid character is encountered while escaping a CSS\n * identifier.\n * @see https://drafts.csswg.org/cssom/#serialize-an-identifier\n */\nclass InvalidCharacterError extends Error {\n  constructor() {\n    super()\n    this.name = this.constructor.name\n  }\n}\n\n/**\n * Escapes a CSS string.\n * @param {string} css the string to escape.\n * @return {string} the escaped string.\n * @throws {TypeError} if the input value is not a string.\n * @throws {InvalidCharacterError} if the string contains an invalid character.\n * @see https://drafts.csswg.org/cssom/#serialize-an-identifier\n */\nfunction escapeCss(css) {\n  if (typeof css !== 'string') {\n    throw new TypeError('input must be a string')\n  }\n  let ret = ''\n  const n = css.length\n  for (let i = 0; i < n; i++) {\n    const c = css.charCodeAt(i)\n    if (c == 0x0) {\n      throw new InvalidCharacterError()\n    }\n\n    if (\n      (c >= 0x0001 && c <= 0x001f) ||\n      c == 0x007f ||\n      (i == 0 && c >= 0x0030 && c <= 0x0039) ||\n      (i == 1 && c >= 0x0030 && c <= 0x0039 && css.charCodeAt(0) == 0x002d)\n    ) {\n      ret += '\\\\' + c.toString(16) + ' '\n      continue\n    }\n\n    if (i == 0 && c == 0x002d && n == 1) {\n      ret += '\\\\' + css.charAt(i)\n      continue\n    }\n\n    if (\n      c >= 0x0080 ||\n      c == 0x002d || // -\n      c == 0x005f || // _\n      (c >= 0x0030 && c <= 0x0039) || // [0-9]\n      (c >= 0x0041 && c <= 0x005a) || // [A-Z]\n      (c >= 0x0061 && c <= 0x007a)\n    ) {\n      // [a-z]\n      ret += css.charAt(i)\n      continue\n    }\n\n    ret += '\\\\' + css.charAt(i)\n  }\n  return ret\n}\n\n/**\n * Describes a mechanism for locating an element on the page.\n * @final\n */\nclass By {\n  /**\n   * @param {string} using the name of the location strategy to use.\n   * @param {string} value the value to search for.\n   */\n  constructor(using, value) {\n    /** @type {string} */\n    this.using = using\n\n    /** @type {string} */\n    this.value = value\n  }\n\n  /**\n   * Locates elements that have a specific class name.\n   *\n   * @param {string} name The class name to search for.\n   * @return {!By} The new locator.\n   * @see http://www.w3.org/TR/2011/WD-html5-20110525/elements.html#classes\n   * @see http://www.w3.org/TR/CSS2/selector.html#class-html\n   */\n  static className(name) {\n    let names = name\n      .split(/\\s+/g)\n      .filter((s) => s.length > 0)\n      .map((s) => escapeCss(s))\n    return By.css('.' + names.join('.'))\n  }\n\n  /**\n   * Locates elements using a CSS selector.\n   *\n   * @param {string} selector The CSS selector to use.\n   * @return {!By} The new locator.\n   * @see http://www.w3.org/TR/CSS2/selector.html\n   */\n  static css(selector) {\n    return new By('css selector', selector)\n  }\n\n  /**\n   * Locates elements by the ID attribute. This locator uses the CSS selector\n   * `*[id=\"$ID\"]`, _not_ `document.getElementById`.\n   *\n   * @param {string} id The ID to search for.\n   * @return {!By} The new locator.\n   */\n  static id(id) {\n    return By.css('*[id=\"' + escapeCss(id) + '\"]')\n  }\n\n  /**\n   * Locates link elements whose\n   * {@linkplain webdriver.WebElement#getText visible text} matches the given\n   * string.\n   *\n   * @param {string} text The link text to search for.\n   * @return {!By} The new locator.\n   */\n  static linkText(text) {\n    return new By('link text', text)\n  }\n\n  /**\n   * Locates elements by evaluating a `script` that defines the body of\n   * a {@linkplain webdriver.WebDriver#executeScript JavaScript function}.\n   * The return value of this function must be an element or an array-like\n   * list of elements. When this locator returns a list of elements, but only\n   * one is expected, the first element in this list will be used as the\n   * single element value.\n   *\n   * @param {!(string|Function)} script The script to execute.\n   * @param {...*} var_args The arguments to pass to the script.\n   * @return {function(!./webdriver.WebDriver): !Promise}\n   *     A new JavaScript-based locator function.\n   */\n  static js(script, ...var_args) {\n    return function (driver) {\n      return driver.executeScript.call(driver, script, ...var_args)\n    }\n  }\n\n  /**\n   * Locates elements whose `name` attribute has the given value.\n   *\n   * @param {string} name The name attribute to search for.\n   * @return {!By} The new locator.\n   */\n  static name(name) {\n    return By.css('*[name=\"' + escapeCss(name) + '\"]')\n  }\n\n  /**\n   * Locates link elements whose\n   * {@linkplain webdriver.WebElement#getText visible text} contains the given\n   * substring.\n   *\n   * @param {string} text The substring to check for in a link's visible text.\n   * @return {!By} The new locator.\n   */\n  static partialLinkText(text) {\n    return new By('partial link text', text)\n  }\n\n  /**\n   * Locates elements with a given tag name.\n   *\n   * @param {string} name The tag name to search for.\n   * @return {!By} The new locator.\n   */\n  static tagName(name) {\n    return new By('tag name', name)\n  }\n\n  /**\n   * Locates elements matching a XPath selector. Care should be taken when\n   * using an XPath selector with a {@link webdriver.WebElement} as WebDriver\n   * will respect the context in the specified in the selector. For example,\n   * given the selector `//div`, WebDriver will search from the document root\n   * regardless of whether the locator was used with a WebElement.\n   *\n   * @param {string} xpath The XPath selector to use.\n   * @return {!By} The new locator.\n   * @see http://www.w3.org/TR/xpath/\n   */\n  static xpath(xpath) {\n    return new By('xpath', xpath)\n  }\n\n  /** @override */\n  toString() {\n    // The static By.name() overrides this.constructor.name.  Shame...\n    return `By(${this.using}, ${this.value})`\n  }\n\n  toObject() {\n    const tmp = {}\n    tmp[this.using] = this.value\n    return tmp\n  }\n}\n\n/**\n * Start Searching for relative objects using the value returned from\n * `By.tagName()`.\n *\n * Note: this method will likely be removed in the future please use\n * `locateWith`.\n * @param {By} The value returned from calling By.tagName()\n * @returns\n */\nfunction withTagName(tagName) {\n  return new RelativeBy({ 'css selector': tagName })\n}\n\n/**\n * Start searching for relative objects using search criteria with By.\n * @param {string} A By map that shows how to find the initial element\n * @returns {RelativeBy}\n */\nfunction locateWith(by) {\n  return new RelativeBy(getLocator(by))\n}\n\nfunction getLocator(locatorOrElement) {\n  let toFind\n  if (locatorOrElement instanceof By) {\n    toFind = locatorOrElement.toObject()\n  } else {\n    toFind = locatorOrElement\n  }\n  return toFind\n}\n\n/**\n * Describes a mechanism for locating an element relative to others\n * on the page.\n * @final\n */\nclass RelativeBy {\n  /**\n   * @param {By} findDetails\n   * @param {Array<Object>} filters\n   */\n  constructor(findDetails, filters = null) {\n    this.root = findDetails\n    this.filters = filters || []\n  }\n\n  /**\n   * Look for elements above the root element passed in\n   * @param {string|WebElement} locatorOrElement\n   * @return {!RelativeBy} Return this object\n   */\n  above(locatorOrElement) {\n    this.filters.push({\n      kind: 'above',\n      args: [getLocator(locatorOrElement)],\n    })\n    return this\n  }\n\n  /**\n   * Look for elements below the root element passed in\n   * @param {string|WebElement} locatorOrElement\n   * @return {!RelativeBy} Return this object\n   */\n  below(locatorOrElement) {\n    this.filters.push({\n      kind: 'below',\n      args: [getLocator(locatorOrElement)],\n    })\n    return this\n  }\n\n  /**\n   * Look for elements left the root element passed in\n   * @param {string|WebElement} locatorOrElement\n   * @return {!RelativeBy} Return this object\n   */\n  toLeftOf(locatorOrElement) {\n    this.filters.push({\n      kind: 'left',\n      args: [getLocator(locatorOrElement)],\n    })\n    return this\n  }\n\n  /**\n   * Look for elements right the root element passed in\n   * @param {string|WebElement} locatorOrElement\n   * @return {!RelativeBy} Return this object\n   */\n  toRightOf(locatorOrElement) {\n    this.filters.push({\n      kind: 'right',\n      args: [getLocator(locatorOrElement)],\n    })\n    return this\n  }\n\n  /**\n   * Look for elements near the root element passed in\n   * @param {string|WebElement} locatorOrElement\n   * @return {!RelativeBy} Return this object\n   */\n  near(locatorOrElement) {\n    this.filters.push({\n      kind: 'near',\n      args: [getLocator(locatorOrElement)],\n    })\n    return this\n  }\n\n  /**\n   * Returns a marshalled version of the {@link RelativeBy}\n   * @return {!Object} Object representation of a {@link WebElement}\n   *     that will be used in {@link #findElements}.\n   */\n  marshall() {\n    return {\n      relative: {\n        root: this.root,\n        filters: this.filters,\n      },\n    }\n  }\n\n  /** @override */\n  toString() {\n    // The static By.name() overrides this.constructor.name.  Shame...\n    return `RelativeBy(${JSON.stringify(this.marshall())})`\n  }\n}\n\n/**\n * Checks if a value is a valid locator.\n * @param {!(By|Function|ByHash)} locator The value to check.\n * @return {!(By|Function)} The valid locator.\n * @throws {TypeError} If the given value does not define a valid locator\n *     strategy.\n */\nfunction check(locator) {\n  if (locator instanceof By || locator instanceof RelativeBy || typeof locator === 'function') {\n    return locator\n  }\n\n  if (\n    locator &&\n    typeof locator === 'object' &&\n    typeof locator.using === 'string' &&\n    typeof locator.value === 'string'\n  ) {\n    return new By(locator.using, locator.value)\n  }\n\n  for (let key in locator) {\n    if (Object.prototype.hasOwnProperty.call(locator, key) && Object.prototype.hasOwnProperty.call(By, key)) {\n      return By[key](locator[key])\n    }\n  }\n  throw new TypeError('Invalid locator')\n}\n\n// PUBLIC API\n\nmodule.exports = {\n  By,\n  RelativeBy,\n  withTagName,\n  locateWith,\n  escapeCss,\n  checkedLocator: check,\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/lib/by.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/lib/capabilities.js":
/*!*************************************************************!*\
  !*** ./node_modules/selenium-webdriver/lib/capabilities.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\n\n/**\n * @fileoverview Defines types related to describing the capabilities of a\n * WebDriver session.\n */\n\nconst Symbols = __webpack_require__(/*! ./symbols */ \"(rsc)/./node_modules/selenium-webdriver/lib/symbols.js\")\n\n/**\n * Recognized browser names.\n * @enum {string}\n */\nconst Browser = {\n  CHROME: 'chrome',\n  EDGE: 'MicrosoftEdge',\n  FIREFOX: 'firefox',\n  INTERNET_EXPLORER: 'internet explorer',\n  SAFARI: 'safari',\n}\n\n/**\n * Strategies for waiting for [document readiness] after a navigation\n * event.\n *\n * [document readiness]: https://html.spec.whatwg.org/#current-document-readiness\n *\n * @enum {string}\n */\nconst PageLoadStrategy = {\n  /**\n   * Indicates WebDriver should not wait on the document readiness state after a\n   * navigation event.\n   */\n  NONE: 'none',\n\n  /**\n   * Indicates WebDriver should wait for the document readiness state to\n   * become \"interactive\" after navigation.\n   */\n  EAGER: 'eager',\n\n  /**\n   * Indicates WebDriver should wait for the document readiness state to\n   * be \"complete\" after navigation. This is the default page loading strategy.\n   */\n  NORMAL: 'normal',\n}\n\n/**\n * Common platform names. These platforms are not explicitly defined by the\n * WebDriver spec, however, their use is encouraged for interoperability.\n *\n * @enum {string}\n * @see <https://w3c.github.io/webdriver/webdriver-spec.html>\n */\nconst Platform = {\n  LINUX: 'linux',\n  MAC: 'mac',\n  WINDOWS: 'windows',\n}\n\n/**\n * Record object defining the timeouts that apply to certain WebDriver actions.\n *\n * @record\n */\nfunction Timeouts() {}\n\n/**\n * Defines when, in milliseconds, to interrupt a script that is being\n * {@linkplain ./webdriver.IWebDriver#executeScript evaluated}.\n * @type {number}\n */\nTimeouts.prototype.script\n\n/**\n * The timeout, in milliseconds, to apply to navigation events along with the\n * {@link PageLoadStrategy}.\n * @type {number}\n */\nTimeouts.prototype.pageLoad\n\n/**\n * The maximum amount of time, in milliseconds, to spend attempting to\n * {@linkplain ./webdriver.IWebDriver#findElement locate} an element on the\n * current page.\n * @type {number}\n */\nTimeouts.prototype.implicit\n\n/**\n * The possible default actions a WebDriver session can take to respond to\n * unhandled user prompts (`window.alert()`, `window.confirm()`, and\n * `window.prompt()`).\n *\n * @enum {string}\n */\nconst UserPromptHandler = {\n  /** All prompts should be silently accepted. */\n  ACCEPT: 'accept',\n  /** All prompts should be silently dismissed. */\n  DISMISS: 'dismiss',\n  /**\n   * All prompts should be automatically accepted, but an error should be\n   * returned to the next (or currently executing) WebDriver command.\n   */\n  ACCEPT_AND_NOTIFY: 'accept and notify',\n  /**\n   * All prompts should be automatically dismissed, but an error should be\n   * returned to the next (or currently executing) WebDriver command.\n   */\n  DISMISS_AND_NOTIFY: 'dismiss and notify',\n  /** All prompts should be left unhandled. */\n  IGNORE: 'ignore',\n}\n\n/**\n * The standard WebDriver capability keys.\n *\n * @enum {string}\n * @see <https://w3c.github.io/webdriver/webdriver-spec.html#capabilities>\n */\nconst Capability = {\n  /**\n   * Indicates whether a WebDriver session implicitly trusts otherwise untrusted\n   * and self-signed TLS certificates during navigation.\n   */\n  ACCEPT_INSECURE_TLS_CERTS: 'acceptInsecureCerts',\n\n  /**\n   * The browser name. Common browser names are defined in the\n   * {@link ./capabilities.Browser Browser} enum.\n   */\n  BROWSER_NAME: 'browserName',\n\n  /** Identifies the browser version. */\n  BROWSER_VERSION: 'browserVersion',\n\n  /**\n   * Key for the logging driver logging preferences.\n   * The browser name. Common browser names are defined in the\n   * {@link ./capabilities.Browser Browser} enum.\n   */\n  LOGGING_PREFS: 'goog:loggingPrefs',\n\n  /**\n   * Defines the session's\n   * {@linkplain ./capabilities.PageLoadStrategy page loading strategy}.\n   */\n  PAGE_LOAD_STRATEGY: 'pageLoadStrategy',\n\n  /**\n   * Identifies the operating system of the endpoint node. Common values\n   * recognized by the most WebDriver server implementations are predefined in\n   * the {@link ./capabilities.Platform Platform} enum.\n   */\n  PLATFORM_NAME: 'platformName',\n\n  /**\n   * Describes the proxy configuration to use for a new WebDriver session.\n   */\n  PROXY: 'proxy',\n\n  /**\n   * Indicates whether the remote end supports all of the window resizing and\n   * positioning commands:\n   *\n   * -  {@linkplain ./webdriver.Window#getRect Window.getRect()}\n   * -  {@linkplain ./webdriver.Window#setRect Window.setRect()}\n   * -  {@linkplain ./webdriver.Window#maximize Window.maximize()}\n   * -  {@linkplain ./webdriver.Window#minimize Window.minimize()}\n   * -  {@linkplain ./webdriver.Window#fullscreen Window.fullscreen()}\n   */\n  SET_WINDOW_RECT: 'setWindowRect',\n\n  /**\n   * Describes the {@linkplain ./capabilities.Timeouts timeouts} imposed on\n   * certain session operations.\n   */\n  TIMEOUTS: 'timeouts',\n\n  /**\n   * Defines how a WebDriver session should\n   * {@linkplain ./capabilities.UserPromptHandler respond} to unhandled user\n   * prompts.\n   */\n  UNHANDLED_PROMPT_BEHAVIOR: 'unhandledPromptBehavior',\n\n  /**\n   * Defines the current session’s strict file interactability.\n   * Used to upload a file when strict file interactability is on\n   */\n  STRICT_FILE_INTERACTABILITY: 'strictFileInteractability',\n\n  ENABLE_DOWNLOADS: 'se:downloadsEnabled',\n}\n\n/**\n * Converts a generic hash object to a map.\n * @param {!Object<string, ?>} hash The hash object.\n * @return {!Map<string, ?>} The converted map.\n */\nfunction toMap(hash) {\n  let m = new Map()\n  for (let key in hash) {\n    if (Object.prototype.hasOwnProperty.call(hash, key)) {\n      m.set(key, hash[key])\n    }\n  }\n  return m\n}\n\n/**\n * Describes a set of capabilities for a WebDriver session.\n */\nclass Capabilities {\n  /**\n   * @param {(Capabilities|Map<string, ?>|Object)=} other Another set of\n   *     capabilities to initialize this instance from.\n   */\n  constructor(other = undefined) {\n    if (other instanceof Capabilities) {\n      other = other.map_\n    } else if (other && !(other instanceof Map)) {\n      other = toMap(other)\n    }\n    /** @private @const {!Map<string, ?>} */\n    this.map_ = new Map(other)\n  }\n\n  /** @return {number} The number of capabilities set. */\n  get size() {\n    return this.map_.size\n  }\n\n  /**\n   * @return {!Capabilities} A basic set of capabilities for Chrome.\n   */\n  static chrome() {\n    return new Capabilities().setBrowserName(Browser.CHROME)\n  }\n\n  /**\n   * @return {!Capabilities} A basic set of capabilities for Microsoft Edge.\n   */\n  static edge() {\n    return new Capabilities().setBrowserName(Browser.EDGE)\n  }\n\n  /**\n   * @return {!Capabilities} A basic set of capabilities for Firefox.\n   */\n  static firefox() {\n    return new Capabilities().setBrowserName(Browser.FIREFOX).set('moz:debuggerAddress', true)\n  }\n\n  /**\n   * @return {!Capabilities} A basic set of capabilities for Internet Explorer.\n   */\n  static ie() {\n    return new Capabilities().setBrowserName(Browser.INTERNET_EXPLORER)\n  }\n\n  /**\n   * @return {!Capabilities} A basic set of capabilities for Safari.\n   */\n  static safari() {\n    return new Capabilities().setBrowserName(Browser.SAFARI)\n  }\n\n  /**\n   * @return {!Object<string, ?>} The JSON representation of this instance.\n   *     Note, the returned object may contain nested promised values.\n   * @suppress {checkTypes} Suppress [] access on a struct (state inherited from\n   *     Map).\n   */\n  [Symbols.serialize]() {\n    return serialize(this)\n  }\n\n  /**\n   * @param {string} key the parameter key to get.\n   * @return {T} the stored parameter value.\n   * @template T\n   */\n  get(key) {\n    return this.map_.get(key)\n  }\n\n  /**\n   * @param {string} key the key to test.\n   * @return {boolean} whether this capability set has the specified key.\n   */\n  has(key) {\n    return this.map_.has(key)\n  }\n\n  /**\n   * @return {!Iterator<string>} an iterator of the keys set.\n   */\n  keys() {\n    return this.map_.keys()\n  }\n\n  /**\n   * Merges another set of capabilities into this instance.\n   * @param {!(Capabilities|Map<String, ?>|Object<string, ?>)} other The other\n   *     set of capabilities to merge.\n   * @return {!Capabilities} A self reference.\n   */\n  merge(other) {\n    if (other) {\n      let otherMap\n      if (other instanceof Capabilities) {\n        otherMap = other.map_\n      } else if (other instanceof Map) {\n        otherMap = other\n      } else {\n        otherMap = toMap(other)\n      }\n      otherMap.forEach((value, key) => {\n        this.set(key, value)\n      })\n      return this\n    } else {\n      throw new TypeError('no capabilities provided for merge')\n    }\n  }\n\n  /**\n   * Deletes an entry from this set of capabilities.\n   *\n   * @param {string} key the capability key to delete.\n   */\n  delete(key) {\n    this.map_.delete(key)\n  }\n\n  /**\n   * @param {string} key The capability key.\n   * @param {*} value The capability value.\n   * @return {!Capabilities} A self reference.\n   * @throws {TypeError} If the `key` is not a string.\n   */\n  set(key, value) {\n    if (typeof key !== 'string') {\n      throw new TypeError('Capability keys must be strings: ' + typeof key)\n    }\n    this.map_.set(key, value)\n    return this\n  }\n\n  /**\n   * Sets whether a WebDriver session should implicitly accept self-signed, or\n   * other untrusted TLS certificates on navigation.\n   *\n   * @param {boolean} accept whether to accept insecure certs.\n   * @return {!Capabilities} a self reference.\n   */\n  setAcceptInsecureCerts(accept) {\n    return this.set(Capability.ACCEPT_INSECURE_TLS_CERTS, accept)\n  }\n\n  /**\n   * @return {boolean} whether the session is configured to accept insecure\n   *     TLS certificates.\n   */\n  getAcceptInsecureCerts() {\n    return this.get(Capability.ACCEPT_INSECURE_TLS_CERTS)\n  }\n\n  /**\n   * Sets the name of the target browser.\n   *\n   * @param {(Browser|string)} name the browser name.\n   * @return {!Capabilities} a self reference.\n   */\n  setBrowserName(name) {\n    return this.set(Capability.BROWSER_NAME, name)\n  }\n\n  /**\n   * @return {(string|undefined)} the configured browser name, or undefined if\n   *     not set.\n   */\n  getBrowserName() {\n    return this.get(Capability.BROWSER_NAME)\n  }\n\n  /**\n   * Sets the desired version of the target browser.\n   *\n   * @param {string} version the desired version.\n   * @return {!Capabilities} a self reference.\n   */\n  setBrowserVersion(version) {\n    return this.set(Capability.BROWSER_VERSION, version)\n  }\n\n  /**\n   * @return {(string|undefined)} the configured browser version, or undefined\n   *     if not set.\n   */\n  getBrowserVersion() {\n    return this.get(Capability.BROWSER_VERSION)\n  }\n\n  /**\n   * Sets the desired page loading strategy for a new WebDriver session.\n   *\n   * @param {PageLoadStrategy} strategy the desired strategy.\n   * @return {!Capabilities} a self reference.\n   */\n  setPageLoadStrategy(strategy) {\n    return this.set(Capability.PAGE_LOAD_STRATEGY, strategy)\n  }\n\n  /**\n   * Returns the configured page load strategy.\n   *\n   * @return {(string|undefined)} the page load strategy.\n   */\n  getPageLoadStrategy() {\n    return this.get(Capability.PAGE_LOAD_STRATEGY)\n  }\n\n  /**\n   * Sets the target platform.\n   *\n   * @param {(Platform|string)} platform the target platform.\n   * @return {!Capabilities} a self reference.\n   */\n  setPlatform(platform) {\n    return this.set(Capability.PLATFORM_NAME, platform)\n  }\n\n  /**\n   * @return {(string|undefined)} the configured platform or undefined if not\n   *     set.\n   */\n  getPlatform() {\n    return this.get(Capability.PLATFORM_NAME)\n  }\n\n  /**\n   * Sets the logging preferences. Preferences may be specified as a\n   * {@link ./logging.Preferences} instance, or as a map of log-type to\n   * log-level.\n   * @param {!(./logging.Preferences|Object<string>)} prefs The logging\n   *     preferences.\n   * @return {!Capabilities} A self reference.\n   */\n  setLoggingPrefs(prefs) {\n    return this.set(Capability.LOGGING_PREFS, prefs)\n  }\n\n  /**\n   * Sets the proxy configuration for this instance.\n   * @param {proxy.Config} proxy The desired proxy configuration.\n   * @return {!Capabilities} A self reference.\n   */\n  setProxy(proxy) {\n    return this.set(Capability.PROXY, proxy)\n  }\n\n  /**\n   * @return {(proxy.Config|undefined)} the configured proxy settings, or\n   *     undefined if not set.\n   */\n  getProxy() {\n    return this.get(Capability.PROXY)\n  }\n\n  /**\n   * Sets the default action to take with an unexpected alert before returning\n   * an error. If unspecified, WebDriver will default to\n   * {@link UserPromptHandler.DISMISS_AND_NOTIFY}.\n   *\n   * @param {?UserPromptHandler} behavior The way WebDriver should respond to\n   *     unhandled user prompts.\n   * @return {!Capabilities} A self reference.\n   */\n  setAlertBehavior(behavior) {\n    return this.set(Capability.UNHANDLED_PROMPT_BEHAVIOR, behavior)\n  }\n\n  /**\n   * @return {(UserPromptHandler|undefined)} the behavior pattern for responding\n   *     to unhandled user prompts, or undefined if not set.\n   */\n  getAlertBehavior() {\n    return this.get(Capability.UNHANDLED_PROMPT_BEHAVIOR)\n  }\n\n  /**\n   * Sets the boolean flag configuration for this instance.\n   */\n  setStrictFileInteractability(strictFileInteractability) {\n    return this.set(Capability.STRICT_FILE_INTERACTABILITY, strictFileInteractability)\n  }\n\n  enableDownloads() {\n    return this.set(Capability.ENABLE_DOWNLOADS, true)\n  }\n}\n\n/**\n * Serializes a capabilities object. This is defined as a standalone function\n * so it may be type checked (where Capabilities[Symbols.serialize] has type\n * checking disabled since it is defined with [] access on a struct).\n *\n * @param {!Capabilities} caps The capabilities to serialize.\n * @return {!Object<string, ?>} The JSON representation of this instance.\n *     Note, the returned object may contain nested promised values.\n */\nfunction serialize(caps) {\n  let ret = {}\n  for (let key of caps.keys()) {\n    let cap = caps.get(key)\n    if (cap !== undefined && cap !== null) {\n      ret[key] = cap\n    }\n  }\n  return ret\n}\n\n// PUBLIC API\n\nmodule.exports = {\n  Browser,\n  Capabilities,\n  Capability,\n  PageLoadStrategy,\n  Platform,\n  Timeouts,\n  UserPromptHandler,\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/lib/capabilities.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/lib/command.js":
/*!********************************************************!*\
  !*** ./node_modules/selenium-webdriver/lib/command.js ***!
  \********************************************************/
/***/ ((module) => {

"use strict";
eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Contains several classes for handling commands.\n */\n\n\n\n/**\n * Describes a command to execute.\n * @final\n */\nclass Command {\n  /** @param {string} name The name of this command. */\n  constructor(name) {\n    /** @private {string} */\n    this.name_ = name\n\n    /** @private {!Object<*>} */\n    this.parameters_ = {}\n  }\n\n  /** @return {string} This command's name. */\n  getName() {\n    return this.name_\n  }\n\n  /**\n   * Sets a parameter to send with this command.\n   * @param {string} name The parameter name.\n   * @param {*} value The parameter value.\n   * @return {!Command} A self reference.\n   */\n  setParameter(name, value) {\n    this.parameters_[name] = value\n    return this\n  }\n\n  /**\n   * Sets the parameters for this command.\n   * @param {!Object<*>} parameters The command parameters.\n   * @return {!Command} A self reference.\n   */\n  setParameters(parameters) {\n    this.parameters_ = parameters\n    return this\n  }\n\n  /**\n   * Returns a named command parameter.\n   * @param {string} key The parameter key to look up.\n   * @return {*} The parameter value, or undefined if it has not been set.\n   */\n  getParameter(key) {\n    return this.parameters_[key]\n  }\n\n  /**\n   * @return {!Object<*>} The parameters to send with this command.\n   */\n  getParameters() {\n    return this.parameters_\n  }\n}\n\n/**\n * Enumeration of predefined names command names that all command processors\n * will support.\n * @enum {string}\n */\nconst Name = {\n  GET_SERVER_STATUS: 'getStatus',\n\n  NEW_SESSION: 'newSession',\n  GET_SESSIONS: 'getSessions',\n\n  CLOSE: 'close',\n  QUIT: 'quit',\n\n  GET_CURRENT_URL: 'getCurrentUrl',\n  GET: 'get',\n  GO_BACK: 'goBack',\n  GO_FORWARD: 'goForward',\n  REFRESH: 'refresh',\n\n  ADD_COOKIE: 'addCookie',\n  GET_COOKIE: 'getCookie',\n  GET_ALL_COOKIES: 'getCookies',\n  DELETE_COOKIE: 'deleteCookie',\n  DELETE_ALL_COOKIES: 'deleteAllCookies',\n\n  GET_ACTIVE_ELEMENT: 'getActiveElement',\n  FIND_ELEMENT: 'findElement',\n  FIND_ELEMENTS: 'findElements',\n  FIND_ELEMENTS_RELATIVE: 'findElementsRelative',\n  FIND_CHILD_ELEMENT: 'findChildElement',\n  FIND_CHILD_ELEMENTS: 'findChildElements',\n\n  CLEAR_ELEMENT: 'clearElement',\n  CLICK_ELEMENT: 'clickElement',\n  SEND_KEYS_TO_ELEMENT: 'sendKeysToElement',\n\n  GET_CURRENT_WINDOW_HANDLE: 'getCurrentWindowHandle',\n  GET_WINDOW_HANDLES: 'getWindowHandles',\n  GET_WINDOW_RECT: 'getWindowRect',\n  SET_WINDOW_RECT: 'setWindowRect',\n  MAXIMIZE_WINDOW: 'maximizeWindow',\n  MINIMIZE_WINDOW: 'minimizeWindow',\n  FULLSCREEN_WINDOW: 'fullscreenWindow',\n\n  SWITCH_TO_WINDOW: 'switchToWindow',\n  SWITCH_TO_NEW_WINDOW: 'newWindow',\n  SWITCH_TO_FRAME: 'switchToFrame',\n  SWITCH_TO_FRAME_PARENT: 'switchToFrameParent',\n  GET_PAGE_SOURCE: 'getPageSource',\n  GET_TITLE: 'getTitle',\n\n  EXECUTE_SCRIPT: 'executeScript',\n  EXECUTE_ASYNC_SCRIPT: 'executeAsyncScript',\n\n  GET_ELEMENT_TEXT: 'getElementText',\n  GET_COMPUTED_ROLE: 'getAriaRole',\n  GET_COMPUTED_LABEL: 'getAccessibleName',\n  GET_ELEMENT_TAG_NAME: 'getElementTagName',\n  IS_ELEMENT_SELECTED: 'isElementSelected',\n  IS_ELEMENT_ENABLED: 'isElementEnabled',\n  IS_ELEMENT_DISPLAYED: 'isElementDisplayed',\n  GET_ELEMENT_RECT: 'getElementRect',\n  GET_ELEMENT_ATTRIBUTE: 'getElementAttribute',\n  GET_DOM_ATTRIBUTE: 'getDomAttribute',\n  GET_ELEMENT_VALUE_OF_CSS_PROPERTY: 'getElementValueOfCssProperty',\n  GET_ELEMENT_PROPERTY: 'getElementProperty',\n\n  SCREENSHOT: 'screenshot',\n  TAKE_ELEMENT_SCREENSHOT: 'takeElementScreenshot',\n\n  PRINT_PAGE: 'printPage',\n\n  GET_TIMEOUT: 'getTimeout',\n  SET_TIMEOUT: 'setTimeout',\n\n  ACCEPT_ALERT: 'acceptAlert',\n  DISMISS_ALERT: 'dismissAlert',\n  GET_ALERT_TEXT: 'getAlertText',\n  SET_ALERT_TEXT: 'setAlertValue',\n\n  // Shadow DOM Commands\n  GET_SHADOW_ROOT: 'getShadowRoot',\n  FIND_ELEMENT_FROM_SHADOWROOT: 'findElementFromShadowRoot',\n  FIND_ELEMENTS_FROM_SHADOWROOT: 'findElementsFromShadowRoot',\n\n  // Virtual Authenticator Commands\n  ADD_VIRTUAL_AUTHENTICATOR: 'addVirtualAuthenticator',\n  REMOVE_VIRTUAL_AUTHENTICATOR: 'removeVirtualAuthenticator',\n  ADD_CREDENTIAL: 'addCredential',\n  GET_CREDENTIALS: 'getCredentials',\n  REMOVE_CREDENTIAL: 'removeCredential',\n  REMOVE_ALL_CREDENTIALS: 'removeAllCredentials',\n  SET_USER_VERIFIED: 'setUserVerified',\n\n  GET_AVAILABLE_LOG_TYPES: 'getAvailableLogTypes',\n  GET_LOG: 'getLog',\n\n  // Non-standard commands used by the standalone Selenium server.\n  UPLOAD_FILE: 'uploadFile',\n\n  ACTIONS: 'actions',\n  CLEAR_ACTIONS: 'clearActions',\n\n  GET_DOWNLOADABLE_FILES: 'getDownloadableFiles',\n  DOWNLOAD_FILE: 'downloadFile',\n  DELETE_DOWNLOADABLE_FILES: 'deleteDownloadableFiles',\n}\n\n/**\n * Handles the execution of WebDriver {@link Command commands}.\n * @record\n */\nclass Executor {\n  /**\n   * Executes the given {@code command}. If there is an error executing the\n   * command, the provided callback will be invoked with the offending error.\n   * Otherwise, the callback will be invoked with a null Error and non-null\n   * response object.\n   *\n   * @param {!Command} command The command to execute.\n   * @return {!Promise<?>} A promise that will be fulfilled with the command\n   *     result.\n   */\n  execute(command) {} // eslint-disable-line\n}\n\n// PUBLIC API\n\nmodule.exports = {\n  Command,\n  Name,\n  Executor,\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/lib/command.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/lib/error.js":
/*!******************************************************!*\
  !*** ./node_modules/selenium-webdriver/lib/error.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\n\nconst { isObject } = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/selenium-webdriver/lib/util.js\")\n\n/**\n * The base WebDriver error type. This error type is only used directly when a\n * more appropriate category is not defined for the offending error.\n */\nclass WebDriverError extends Error {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error)\n\n    /** @override */\n    this.name = this.constructor.name\n\n    /**\n     * A stacktrace reported by the remote webdriver endpoint that initially\n     * reported this error. This property will be an empty string if the remote\n     * end did not provide a stacktrace.\n     * @type {string}\n     */\n    this.remoteStacktrace = ''\n  }\n}\n\n/**\n * Indicates the shadow root is no longer attached to the DOM\n */\nclass DetachedShadowRootError extends WebDriverError {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error)\n  }\n}\n\n/**\n * Indicates a {@linkplain ./webdriver.WebElement#click click command} could not\n * completed because the click target is obscured by other elements on the\n * page.\n */\nclass ElementClickInterceptedError extends WebDriverError {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error)\n  }\n}\n\n/**\n * An attempt was made to select an element that cannot be selected.\n */\nclass ElementNotSelectableError extends WebDriverError {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error)\n  }\n}\n\n/**\n * Indicates a command could not be completed because the target element is\n * not pointer or keyboard interactable. This will often occur if an element\n * is present in the DOM, but not rendered (i.e. its CSS style has\n * \"display: none\").\n */\nclass ElementNotInteractableError extends WebDriverError {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error)\n  }\n}\n\n/**\n * Indicates a navigation event caused the browser to generate a certificate\n * warning. This is usually caused by an expired or invalid TLS certificate.\n */\nclass InsecureCertificateError extends WebDriverError {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error)\n  }\n}\n\n/**\n * The arguments passed to a command are either invalid or malformed.\n */\nclass InvalidArgumentError extends WebDriverError {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error)\n  }\n}\n\n/**\n * An illegal attempt was made to set a cookie under a different domain than\n * the current page.\n */\nclass InvalidCookieDomainError extends WebDriverError {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error)\n  }\n}\n\n/**\n * The coordinates provided to an interactions operation are invalid.\n */\nclass InvalidCoordinatesError extends WebDriverError {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error)\n  }\n}\n\n/**\n * An element command could not be completed because the element is in an\n * invalid state, e.g. attempting to click an element that is no longer attached\n * to the document.\n */\nclass InvalidElementStateError extends WebDriverError {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error)\n  }\n}\n\n/**\n * Argument was an invalid selector.\n */\nclass InvalidSelectorError extends WebDriverError {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error)\n  }\n}\n\n/**\n * Occurs when a command is directed to a session that does not exist.\n */\nclass NoSuchSessionError extends WebDriverError {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error)\n  }\n}\n\n/**\n * An error occurred while executing JavaScript supplied by the user.\n */\nclass JavascriptError extends WebDriverError {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error)\n  }\n}\n\n/**\n * The target for mouse interaction is not in the browser’s viewport and cannot\n * be brought into that viewport.\n */\nclass MoveTargetOutOfBoundsError extends WebDriverError {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error)\n  }\n}\n\n/**\n * An attempt was made to operate on a modal dialog when one was not open.\n */\nclass NoSuchAlertError extends WebDriverError {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error)\n  }\n}\n\n/**\n * Indicates a named cookie could not be found in the cookie jar for the\n * currently selected document.\n */\nclass NoSuchCookieError extends WebDriverError {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error)\n  }\n}\n\n/**\n * An element could not be located on the page using the given search\n * parameters.\n */\nclass NoSuchElementError extends WebDriverError {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error)\n  }\n}\n\n/**\n * A ShadowRoot could not be located on the element\n */\nclass NoSuchShadowRootError extends WebDriverError {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error)\n  }\n}\n\n/**\n * A request to switch to a frame could not be satisfied because the frame\n * could not be found.\n */\nclass NoSuchFrameError extends WebDriverError {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error)\n  }\n}\n\n/**\n * A request to switch to a window could not be satisfied because the window\n * could not be found.\n */\nclass NoSuchWindowError extends WebDriverError {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error)\n  }\n}\n\n/**\n * A script did not complete before its timeout expired.\n */\nclass ScriptTimeoutError extends WebDriverError {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error)\n  }\n}\n\n/**\n * A new session could not be created.\n */\nclass SessionNotCreatedError extends WebDriverError {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error)\n  }\n}\n\n/**\n * An element command failed because the referenced element is no longer\n * attached to the DOM.\n */\nclass StaleElementReferenceError extends WebDriverError {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error)\n  }\n}\n\n/**\n * An operation did not complete before its timeout expired.\n */\nclass TimeoutError extends WebDriverError {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error)\n  }\n}\n\n/**\n * A request to set a cookie’s value could not be satisfied.\n */\nclass UnableToSetCookieError extends WebDriverError {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error)\n  }\n}\n\n/**\n * A screen capture operation was not possible.\n */\nclass UnableToCaptureScreenError extends WebDriverError {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error)\n  }\n}\n\n/**\n * A modal dialog was open, blocking this operation.\n */\nclass UnexpectedAlertOpenError extends WebDriverError {\n  /**\n   * @param {string=} opt_error the error message, if any.\n   * @param {string=} opt_text the text of the open dialog, if available.\n   */\n  constructor(opt_error, opt_text) {\n    super(opt_error)\n\n    /** @private {(string|undefined)} */\n    this.text_ = opt_text\n  }\n\n  /**\n   * @return {(string|undefined)} The text displayed with the unhandled alert,\n   *     if available.\n   */\n  getAlertText() {\n    return this.text_\n  }\n}\n\n/**\n * A command could not be executed because the remote end is not aware of it.\n */\nclass UnknownCommandError extends WebDriverError {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error)\n  }\n}\n\n/**\n * The requested command matched a known URL but did not match an method for\n * that URL.\n */\nclass UnknownMethodError extends WebDriverError {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error)\n  }\n}\n\n/**\n * Reports an unsupported operation.\n */\nclass UnsupportedOperationError extends WebDriverError {\n  /** @param {string=} opt_error the error message, if any. */\n  constructor(opt_error) {\n    super(opt_error)\n  }\n}\n\n// TODO(jleyba): Define UnknownError as an alias of WebDriverError?\n\n/**\n * Enum of legacy error codes.\n * TODO: remove this when all code paths have been switched to the new error\n * types.\n * @deprecated\n * @enum {number}\n */\nconst ErrorCode = {\n  SUCCESS: 0,\n  NO_SUCH_SESSION: 6,\n  NO_SUCH_ELEMENT: 7,\n  NO_SUCH_FRAME: 8,\n  UNKNOWN_COMMAND: 9,\n  UNSUPPORTED_OPERATION: 9,\n  STALE_ELEMENT_REFERENCE: 10,\n  ELEMENT_NOT_VISIBLE: 11,\n  INVALID_ELEMENT_STATE: 12,\n  UNKNOWN_ERROR: 13,\n  ELEMENT_NOT_SELECTABLE: 15,\n  JAVASCRIPT_ERROR: 17,\n  XPATH_LOOKUP_ERROR: 19,\n  TIMEOUT: 21,\n  NO_SUCH_WINDOW: 23,\n  INVALID_COOKIE_DOMAIN: 24,\n  UNABLE_TO_SET_COOKIE: 25,\n  UNEXPECTED_ALERT_OPEN: 26,\n  NO_SUCH_ALERT: 27,\n  SCRIPT_TIMEOUT: 28,\n  INVALID_ELEMENT_COORDINATES: 29,\n  IME_NOT_AVAILABLE: 30,\n  IME_ENGINE_ACTIVATION_FAILED: 31,\n  INVALID_SELECTOR_ERROR: 32,\n  SESSION_NOT_CREATED: 33,\n  MOVE_TARGET_OUT_OF_BOUNDS: 34,\n  SQL_DATABASE_ERROR: 35,\n  INVALID_XPATH_SELECTOR: 51,\n  INVALID_XPATH_SELECTOR_RETURN_TYPE: 52,\n  ELEMENT_NOT_INTERACTABLE: 60,\n  INVALID_ARGUMENT: 61,\n  NO_SUCH_COOKIE: 62,\n  UNABLE_TO_CAPTURE_SCREEN: 63,\n  ELEMENT_CLICK_INTERCEPTED: 64,\n  METHOD_NOT_ALLOWED: 405,\n}\n\nconst LEGACY_ERROR_CODE_TO_TYPE = new Map([\n  [ErrorCode.NO_SUCH_SESSION, NoSuchSessionError],\n  [ErrorCode.NO_SUCH_ELEMENT, NoSuchElementError],\n  [ErrorCode.NO_SUCH_FRAME, NoSuchFrameError],\n  [ErrorCode.UNSUPPORTED_OPERATION, UnsupportedOperationError],\n  [ErrorCode.STALE_ELEMENT_REFERENCE, StaleElementReferenceError],\n  [ErrorCode.INVALID_ELEMENT_STATE, InvalidElementStateError],\n  [ErrorCode.UNKNOWN_ERROR, WebDriverError],\n  [ErrorCode.ELEMENT_NOT_SELECTABLE, ElementNotSelectableError],\n  [ErrorCode.JAVASCRIPT_ERROR, JavascriptError],\n  [ErrorCode.XPATH_LOOKUP_ERROR, InvalidSelectorError],\n  [ErrorCode.TIMEOUT, TimeoutError],\n  [ErrorCode.NO_SUCH_WINDOW, NoSuchWindowError],\n  [ErrorCode.INVALID_COOKIE_DOMAIN, InvalidCookieDomainError],\n  [ErrorCode.UNABLE_TO_SET_COOKIE, UnableToSetCookieError],\n  [ErrorCode.UNEXPECTED_ALERT_OPEN, UnexpectedAlertOpenError],\n  [ErrorCode.NO_SUCH_ALERT, NoSuchAlertError],\n  [ErrorCode.SCRIPT_TIMEOUT, ScriptTimeoutError],\n  [ErrorCode.INVALID_ELEMENT_COORDINATES, InvalidCoordinatesError],\n  [ErrorCode.INVALID_SELECTOR_ERROR, InvalidSelectorError],\n  [ErrorCode.SESSION_NOT_CREATED, SessionNotCreatedError],\n  [ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS, MoveTargetOutOfBoundsError],\n  [ErrorCode.INVALID_XPATH_SELECTOR, InvalidSelectorError],\n  [ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPE, InvalidSelectorError],\n  [ErrorCode.ELEMENT_NOT_INTERACTABLE, ElementNotInteractableError],\n  [ErrorCode.INVALID_ARGUMENT, InvalidArgumentError],\n  [ErrorCode.NO_SUCH_COOKIE, NoSuchCookieError],\n  [ErrorCode.UNABLE_TO_CAPTURE_SCREEN, UnableToCaptureScreenError],\n  [ErrorCode.ELEMENT_CLICK_INTERCEPTED, ElementClickInterceptedError],\n  [ErrorCode.METHOD_NOT_ALLOWED, UnsupportedOperationError],\n])\n\nconst ERROR_CODE_TO_TYPE = new Map([\n  ['unknown error', WebDriverError],\n  ['detached shadow root', DetachedShadowRootError],\n  ['element click intercepted', ElementClickInterceptedError],\n  ['element not interactable', ElementNotInteractableError],\n  ['element not selectable', ElementNotSelectableError],\n  ['insecure certificate', InsecureCertificateError],\n  ['invalid argument', InvalidArgumentError],\n  ['invalid cookie domain', InvalidCookieDomainError],\n  ['invalid coordinates', InvalidCoordinatesError],\n  ['invalid element state', InvalidElementStateError],\n  ['invalid selector', InvalidSelectorError],\n  ['invalid session id', NoSuchSessionError],\n  ['javascript error', JavascriptError],\n  ['move target out of bounds', MoveTargetOutOfBoundsError],\n  ['no such alert', NoSuchAlertError],\n  ['no such cookie', NoSuchCookieError],\n  ['no such element', NoSuchElementError],\n  ['no such frame', NoSuchFrameError],\n  ['no such shadow root', NoSuchShadowRootError],\n  ['no such window', NoSuchWindowError],\n  ['script timeout', ScriptTimeoutError],\n  ['session not created', SessionNotCreatedError],\n  ['stale element reference', StaleElementReferenceError],\n  ['timeout', TimeoutError],\n  ['unable to set cookie', UnableToSetCookieError],\n  ['unable to capture screen', UnableToCaptureScreenError],\n  ['unexpected alert open', UnexpectedAlertOpenError],\n  ['unknown command', UnknownCommandError],\n  ['unknown method', UnknownMethodError],\n  ['unsupported operation', UnsupportedOperationError],\n])\n\nconst TYPE_TO_ERROR_CODE = new Map()\nERROR_CODE_TO_TYPE.forEach((value, key) => {\n  TYPE_TO_ERROR_CODE.set(value, key)\n})\n\n/**\n * @param {*} err The error to encode.\n * @return {{error: string, message: string}} the encoded error.\n */\nfunction encodeError(err) {\n  let type = WebDriverError\n  if (err instanceof WebDriverError && TYPE_TO_ERROR_CODE.has(err.constructor)) {\n    type = err.constructor\n  }\n\n  let message = err instanceof Error ? err.message : err + ''\n\n  let code = /** @type {string} */ (TYPE_TO_ERROR_CODE.get(type))\n  return { error: code, message: message }\n}\n\n/**\n * Tests if the given value is a valid error response object according to the\n * W3C WebDriver spec.\n *\n * @param {?} data The value to test.\n * @return {boolean} Whether the given value data object is a valid error\n *     response.\n * @see https://w3c.github.io/webdriver/webdriver-spec.html#protocol\n */\nfunction isErrorResponse(data) {\n  return isObject(data) && typeof data.error === 'string'\n}\n\n/**\n * Throws an error coded from the W3C protocol. A generic error will be thrown\n * if the provided `data` is not a valid encoded error.\n *\n * @param {{error: string, message: string}} data The error data to decode.\n * @throws {WebDriverError} the decoded error.\n * @see https://w3c.github.io/webdriver/webdriver-spec.html#protocol\n */\nfunction throwDecodedError(data) {\n  if (isErrorResponse(data)) {\n    let ctor = ERROR_CODE_TO_TYPE.get(data.error) || WebDriverError\n    let err = new ctor(data.message)\n    // TODO(jleyba): remove whichever case is excluded from the final W3C spec.\n    if (typeof data.stacktrace === 'string') {\n      err.remoteStacktrace = data.stacktrace\n    } else if (typeof data.stackTrace === 'string') {\n      err.remoteStacktrace = data.stackTrace\n    }\n    throw err\n  }\n  throw new WebDriverError('Unknown error: ' + JSON.stringify(data))\n}\n\n/**\n * Checks a legacy response from the Selenium 2.0 wire protocol for an error.\n * @param {*} responseObj the response object to check.\n * @return {*} responseObj the original response if it does not define an error.\n * @throws {WebDriverError} if the response object defines an error.\n */\nfunction checkLegacyResponse(responseObj) {\n  // Handle the legacy Selenium error response format.\n  if (isObject(responseObj) && typeof responseObj.status === 'number' && responseObj.status !== 0) {\n    const { status, value } = responseObj\n\n    let ctor = LEGACY_ERROR_CODE_TO_TYPE.get(status) || WebDriverError\n\n    if (!value || typeof value !== 'object') {\n      throw new ctor(value + '')\n    } else {\n      let message = value['message'] + ''\n      if (ctor !== UnexpectedAlertOpenError) {\n        throw new ctor(message)\n      }\n\n      let text = ''\n      if (value['alert'] && typeof value['alert']['text'] === 'string') {\n        text = value['alert']['text']\n      }\n      throw new UnexpectedAlertOpenError(message, text)\n    }\n  }\n  return responseObj\n}\n\n// PUBLIC API\n\nmodule.exports = {\n  ErrorCode,\n\n  WebDriverError,\n  DetachedShadowRootError,\n  ElementClickInterceptedError,\n  ElementNotInteractableError,\n  ElementNotSelectableError,\n  InsecureCertificateError,\n  InvalidArgumentError,\n  InvalidCookieDomainError,\n  InvalidCoordinatesError,\n  InvalidElementStateError,\n  InvalidSelectorError,\n  JavascriptError,\n  MoveTargetOutOfBoundsError,\n  NoSuchAlertError,\n  NoSuchCookieError,\n  NoSuchElementError,\n  NoSuchFrameError,\n  NoSuchShadowRootError,\n  NoSuchSessionError,\n  NoSuchWindowError,\n  ScriptTimeoutError,\n  SessionNotCreatedError,\n  StaleElementReferenceError,\n  TimeoutError,\n  UnableToSetCookieError,\n  UnableToCaptureScreenError,\n  UnexpectedAlertOpenError,\n  UnknownCommandError,\n  UnknownMethodError,\n  UnsupportedOperationError,\n  checkLegacyResponse,\n  encodeError,\n  isErrorResponse,\n  throwDecodedError,\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/lib/error.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/lib/http.js":
/*!*****************************************************!*\
  !*** ./node_modules/selenium-webdriver/lib/http.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Defines an environment agnostic {@linkplain cmd.Executor\n * command executor} that communicates with a remote end using JSON over HTTP.\n *\n * Clients should implement the {@link Client} interface, which is used by\n * the {@link Executor} to send commands to the remote end.\n */\n\n\n\nconst path = __webpack_require__(/*! node:path */ \"node:path\")\nconst cmd = __webpack_require__(/*! ./command */ \"(rsc)/./node_modules/selenium-webdriver/lib/command.js\")\nconst error = __webpack_require__(/*! ./error */ \"(rsc)/./node_modules/selenium-webdriver/lib/error.js\")\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/selenium-webdriver/lib/logging.js\")\nconst promise = __webpack_require__(/*! ./promise */ \"(rsc)/./node_modules/selenium-webdriver/lib/promise.js\")\nconst { Session } = __webpack_require__(/*! ./session */ \"(rsc)/./node_modules/selenium-webdriver/lib/session.js\")\nconst webElement = __webpack_require__(/*! ./webelement */ \"(rsc)/./node_modules/selenium-webdriver/lib/webelement.js\")\nconst { isObject } = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/selenium-webdriver/lib/util.js\")\n\nconst log_ = logging.getLogger(`${logging.Type.DRIVER}.http`)\n\nconst getAttribute = requireAtom('get-attribute.js', '//javascript/node/selenium-webdriver/lib/atoms:get-attribute.js')\nconst isDisplayed = requireAtom('is-displayed.js', '//javascript/node/selenium-webdriver/lib/atoms:is-displayed.js')\nconst findElements = requireAtom('find-elements.js', '//javascript/node/selenium-webdriver/lib/atoms:find-elements.js')\n\n/**\n * @param {string} module\n * @param {string} bazelTarget\n * @return {!Function}\n */\nfunction requireAtom(module, bazelTarget) {\n  try {\n    return __webpack_require__(\"(rsc)/./node_modules/selenium-webdriver/lib/atoms sync recursive ^\\\\.\\\\/.*$\")(\"./\" + module)\n  } catch (ex) {\n    try {\n      const file = bazelTarget.slice(2).replace(':', '/')\n      log_.log(`../../../bazel-bin/${file}`)\n      return __webpack_require__(\"(rsc)/./node_modules/selenium-webdriver/lib sync recursive\")(path.resolve(`../../../bazel-bin/${file}`))\n    } catch (ex2) {\n      log_.severe(ex2)\n      throw Error(\n        `Failed to import atoms module ${module}. If running in dev mode, you` +\n          ` need to run \\`bazel build ${bazelTarget}\\` from the project` +\n          `root: ${ex}`,\n      )\n    }\n  }\n}\n\n/**\n * Converts a headers map to a HTTP header block string.\n * @param {!Map<string, string>} headers The map to convert.\n * @return {string} The headers as a string.\n */\nfunction headersToString(headers) {\n  const ret = []\n  headers.forEach(function (value, name) {\n    ret.push(`${name.toLowerCase()}: ${value}`)\n  })\n  return ret.join('\\n')\n}\n\n/**\n * Represents a HTTP request message. This class is a \"partial\" request and only\n * defines the path on the server to send a request to. It is each client's\n * responsibility to build the full URL for the final request.\n * @final\n */\nclass Request {\n  /**\n   * @param {string} method The HTTP method to use for the request.\n   * @param {string} path The path on the server to send the request to.\n   * @param {Object=} opt_data This request's non-serialized JSON payload data.\n   */\n  constructor(method, path, opt_data) {\n    this.method = /** string */ method\n    this.path = /** string */ path\n    this.data = /** Object */ opt_data\n    this.headers = /** !Map<string, string> */ new Map([['Accept', 'application/json; charset=utf-8']])\n  }\n\n  /** @override */\n  toString() {\n    let ret = `${this.method} ${this.path} HTTP/1.1\\n`\n    ret += headersToString(this.headers) + '\\n\\n'\n    if (this.data) {\n      ret += JSON.stringify(this.data)\n    }\n    return ret\n  }\n}\n\n/**\n * Represents a HTTP response message.\n * @final\n */\nclass Response {\n  /**\n   * @param {number} status The response code.\n   * @param {!Object<string>} headers The response headers. All header names\n   *     will be converted to lowercase strings for consistent lookups.\n   * @param {string} body The response body.\n   */\n  constructor(status, headers, body) {\n    this.status = /** number */ status\n    this.body = /** string */ body\n    this.headers = /** !Map<string, string>*/ new Map()\n    for (let header in headers) {\n      this.headers.set(header.toLowerCase(), headers[header])\n    }\n  }\n\n  /** @override */\n  toString() {\n    let ret = `HTTP/1.1 ${this.status}\\n${headersToString(this.headers)}\\n\\n`\n    if (this.body) {\n      ret += this.body\n    }\n    return ret\n  }\n}\n\n/** @enum {!Function} */\nconst Atom = {\n  GET_ATTRIBUTE: getAttribute,\n  IS_DISPLAYED: isDisplayed,\n  FIND_ELEMENTS: findElements,\n}\n\nfunction post(path) {\n  return resource('POST', path)\n}\n\nfunction del(path) {\n  return resource('DELETE', path)\n}\n\nfunction get(path) {\n  return resource('GET', path)\n}\n\nfunction resource(method, path) {\n  return { method: method, path: path }\n}\n\n/** @typedef {{method: string, path: string}} */\nvar CommandSpec\n\n/** @typedef {function(!cmd.Command): !cmd.Command} */\nvar CommandTransformer\n\nclass InternalTypeError extends TypeError {}\n\n/**\n * @param {!cmd.Command} command The initial command.\n * @param {Atom} atom The name of the atom to execute.\n * @param params\n * @return {!Command} The transformed command to execute.\n */\nfunction toExecuteAtomCommand(command, atom, name, ...params) {\n  if (typeof atom !== 'function') {\n    throw new InternalTypeError('atom is not a function: ' + typeof atom)\n  }\n\n  return new cmd.Command(cmd.Name.EXECUTE_SCRIPT)\n    .setParameter('sessionId', command.getParameter('sessionId'))\n    .setParameter('script', `/* ${name} */return (${atom}).apply(null, arguments)`)\n    .setParameter(\n      'args',\n      params.map((param) => command.getParameter(param)),\n    )\n}\n\n/** @const {!Map<string, (CommandSpec|CommandTransformer)>} */\nconst W3C_COMMAND_MAP = new Map([\n  // Session management.\n  [cmd.Name.NEW_SESSION, post('/session')],\n  [cmd.Name.QUIT, del('/session/:sessionId')],\n\n  // Server status.\n  [cmd.Name.GET_SERVER_STATUS, get('/status')],\n\n  // timeouts\n  [cmd.Name.GET_TIMEOUT, get('/session/:sessionId/timeouts')],\n  [cmd.Name.SET_TIMEOUT, post('/session/:sessionId/timeouts')],\n\n  // Navigation.\n  [cmd.Name.GET_CURRENT_URL, get('/session/:sessionId/url')],\n  [cmd.Name.GET, post('/session/:sessionId/url')],\n  [cmd.Name.GO_BACK, post('/session/:sessionId/back')],\n  [cmd.Name.GO_FORWARD, post('/session/:sessionId/forward')],\n  [cmd.Name.REFRESH, post('/session/:sessionId/refresh')],\n\n  // Page inspection.\n  [cmd.Name.GET_PAGE_SOURCE, get('/session/:sessionId/source')],\n  [cmd.Name.GET_TITLE, get('/session/:sessionId/title')],\n\n  // Script execution.\n  [cmd.Name.EXECUTE_SCRIPT, post('/session/:sessionId/execute/sync')],\n  [cmd.Name.EXECUTE_ASYNC_SCRIPT, post('/session/:sessionId/execute/async')],\n\n  // Frame selection.\n  [cmd.Name.SWITCH_TO_FRAME, post('/session/:sessionId/frame')],\n  [cmd.Name.SWITCH_TO_FRAME_PARENT, post('/session/:sessionId/frame/parent')],\n\n  // Window management.\n  [cmd.Name.GET_CURRENT_WINDOW_HANDLE, get('/session/:sessionId/window')],\n  [cmd.Name.CLOSE, del('/session/:sessionId/window')],\n  [cmd.Name.SWITCH_TO_WINDOW, post('/session/:sessionId/window')],\n  [cmd.Name.SWITCH_TO_NEW_WINDOW, post('/session/:sessionId/window/new')],\n  [cmd.Name.GET_WINDOW_HANDLES, get('/session/:sessionId/window/handles')],\n  [cmd.Name.GET_WINDOW_RECT, get('/session/:sessionId/window/rect')],\n  [cmd.Name.SET_WINDOW_RECT, post('/session/:sessionId/window/rect')],\n  [cmd.Name.MAXIMIZE_WINDOW, post('/session/:sessionId/window/maximize')],\n  [cmd.Name.MINIMIZE_WINDOW, post('/session/:sessionId/window/minimize')],\n  [cmd.Name.FULLSCREEN_WINDOW, post('/session/:sessionId/window/fullscreen')],\n\n  // Actions.\n  [cmd.Name.ACTIONS, post('/session/:sessionId/actions')],\n  [cmd.Name.CLEAR_ACTIONS, del('/session/:sessionId/actions')],\n  [cmd.Name.PRINT_PAGE, post('/session/:sessionId/print')],\n\n  // Locating elements.\n  [cmd.Name.GET_ACTIVE_ELEMENT, get('/session/:sessionId/element/active')],\n  [cmd.Name.FIND_ELEMENT, post('/session/:sessionId/element')],\n  [cmd.Name.FIND_ELEMENTS, post('/session/:sessionId/elements')],\n  [\n    cmd.Name.FIND_ELEMENTS_RELATIVE,\n    (cmd) => {\n      return toExecuteAtomCommand(cmd, Atom.FIND_ELEMENTS, 'findElements', 'args')\n    },\n  ],\n  [cmd.Name.FIND_CHILD_ELEMENT, post('/session/:sessionId/element/:id/element')],\n  [cmd.Name.FIND_CHILD_ELEMENTS, post('/session/:sessionId/element/:id/elements')],\n  // Element interaction.\n  [cmd.Name.GET_ELEMENT_TAG_NAME, get('/session/:sessionId/element/:id/name')],\n  [cmd.Name.GET_DOM_ATTRIBUTE, get('/session/:sessionId/element/:id/attribute/:name')],\n  [\n    cmd.Name.GET_ELEMENT_ATTRIBUTE,\n    (cmd) => {\n      return toExecuteAtomCommand(cmd, Atom.GET_ATTRIBUTE, 'getAttribute', 'id', 'name')\n    },\n  ],\n  [cmd.Name.GET_ELEMENT_PROPERTY, get('/session/:sessionId/element/:id/property/:name')],\n  [cmd.Name.GET_ELEMENT_VALUE_OF_CSS_PROPERTY, get('/session/:sessionId/element/:id/css/:propertyName')],\n  [cmd.Name.GET_ELEMENT_RECT, get('/session/:sessionId/element/:id/rect')],\n  [cmd.Name.CLEAR_ELEMENT, post('/session/:sessionId/element/:id/clear')],\n  [cmd.Name.CLICK_ELEMENT, post('/session/:sessionId/element/:id/click')],\n  [cmd.Name.SEND_KEYS_TO_ELEMENT, post('/session/:sessionId/element/:id/value')],\n  [cmd.Name.GET_ELEMENT_TEXT, get('/session/:sessionId/element/:id/text')],\n  [cmd.Name.GET_COMPUTED_ROLE, get('/session/:sessionId/element/:id/computedrole')],\n  [cmd.Name.GET_COMPUTED_LABEL, get('/session/:sessionId/element/:id/computedlabel')],\n  [cmd.Name.IS_ELEMENT_ENABLED, get('/session/:sessionId/element/:id/enabled')],\n  [cmd.Name.IS_ELEMENT_SELECTED, get('/session/:sessionId/element/:id/selected')],\n\n  [\n    cmd.Name.IS_ELEMENT_DISPLAYED,\n    (cmd) => {\n      return toExecuteAtomCommand(cmd, Atom.IS_DISPLAYED, 'isDisplayed', 'id')\n    },\n  ],\n\n  // Cookie management.\n  [cmd.Name.GET_ALL_COOKIES, get('/session/:sessionId/cookie')],\n  [cmd.Name.ADD_COOKIE, post('/session/:sessionId/cookie')],\n  [cmd.Name.DELETE_ALL_COOKIES, del('/session/:sessionId/cookie')],\n  [cmd.Name.GET_COOKIE, get('/session/:sessionId/cookie/:name')],\n  [cmd.Name.DELETE_COOKIE, del('/session/:sessionId/cookie/:name')],\n\n  // Alert management.\n  [cmd.Name.ACCEPT_ALERT, post('/session/:sessionId/alert/accept')],\n  [cmd.Name.DISMISS_ALERT, post('/session/:sessionId/alert/dismiss')],\n  [cmd.Name.GET_ALERT_TEXT, get('/session/:sessionId/alert/text')],\n  [cmd.Name.SET_ALERT_TEXT, post('/session/:sessionId/alert/text')],\n\n  // Screenshots.\n  [cmd.Name.SCREENSHOT, get('/session/:sessionId/screenshot')],\n  [cmd.Name.TAKE_ELEMENT_SCREENSHOT, get('/session/:sessionId/element/:id/screenshot')],\n\n  // Shadow Root\n  [cmd.Name.GET_SHADOW_ROOT, get('/session/:sessionId/element/:id/shadow')],\n  [cmd.Name.FIND_ELEMENT_FROM_SHADOWROOT, post('/session/:sessionId/shadow/:id/element')],\n  [cmd.Name.FIND_ELEMENTS_FROM_SHADOWROOT, post('/session/:sessionId/shadow/:id/elements')],\n  // Log extensions.\n  [cmd.Name.GET_LOG, post('/session/:sessionId/se/log')],\n  [cmd.Name.GET_AVAILABLE_LOG_TYPES, get('/session/:sessionId/se/log/types')],\n\n  // Server Extensions\n  [cmd.Name.UPLOAD_FILE, post('/session/:sessionId/se/file')],\n\n  // Virtual Authenticator\n  [cmd.Name.ADD_VIRTUAL_AUTHENTICATOR, post('/session/:sessionId/webauthn/authenticator')],\n  [cmd.Name.REMOVE_VIRTUAL_AUTHENTICATOR, del('/session/:sessionId/webauthn/authenticator/:authenticatorId')],\n  [cmd.Name.ADD_CREDENTIAL, post('/session/:sessionId/webauthn/authenticator/:authenticatorId/credential')],\n  [cmd.Name.GET_CREDENTIALS, get('/session/:sessionId/webauthn/authenticator/:authenticatorId/credentials')],\n  [\n    cmd.Name.REMOVE_CREDENTIAL,\n    del('/session/:sessionId/webauthn/authenticator/:authenticatorId/credentials/:credentialId'),\n  ],\n  [cmd.Name.REMOVE_ALL_CREDENTIALS, del('/session/:sessionId/webauthn/authenticator/:authenticatorId/credentials')],\n  [cmd.Name.SET_USER_VERIFIED, post('/session/:sessionId/webauthn/authenticator/:authenticatorId/uv')],\n\n  [cmd.Name.GET_DOWNLOADABLE_FILES, get('/session/:sessionId/se/files')],\n  [cmd.Name.DOWNLOAD_FILE, post(`/session/:sessionId/se/files`)],\n  [cmd.Name.DELETE_DOWNLOADABLE_FILES, del(`/session/:sessionId/se/files`)],\n])\n\n/**\n * Handles sending HTTP messages to a remote end.\n *\n * @interface\n */\nclass Client {\n  /**\n   * Sends a request to the server. The client will automatically follow any\n   * redirects returned by the server, fulfilling the returned promise with the\n   * final response.\n   *\n   * @param {!Request} httpRequest The request to send.\n   * @return {!Promise<Response>} A promise that will be fulfilled with the\n   *     server's response.\n   */\n  send(httpRequest) {}\n}\n\n/**\n * @param {Map<string, CommandSpec>} customCommands\n *     A map of custom command definitions.\n * @param {!cmd.Command} command The command to resolve.\n * @return {!Request} A promise that will resolve with the\n *     command to execute.\n */\nfunction buildRequest(customCommands, command) {\n  log_.finest(() => `Translating command: ${command.getName()}`)\n  let spec = customCommands && customCommands.get(command.getName())\n  if (spec) {\n    return toHttpRequest(spec)\n  }\n\n  spec = W3C_COMMAND_MAP.get(command.getName())\n  if (typeof spec === 'function') {\n    log_.finest(() => `Transforming command for W3C: ${command.getName()}`)\n    let newCommand = spec(command)\n    return buildRequest(customCommands, newCommand)\n  } else if (spec) {\n    return toHttpRequest(spec)\n  }\n  throw new error.UnknownCommandError('Unrecognized command: ' + command.getName())\n\n  /**\n   * @param {CommandSpec} resource\n   * @return {!Request}\n   */\n  function toHttpRequest(resource) {\n    log_.finest(() => `Building HTTP request: ${JSON.stringify(resource)}`)\n    let parameters = command.getParameters()\n    let path = buildPath(resource.path, parameters)\n    return new Request(resource.method, path, parameters)\n  }\n}\n\nconst CLIENTS = /** !WeakMap<!Executor, !(Client|IThenable<!Client>)> */ new WeakMap()\n\n/**\n * A command executor that communicates with the server using JSON over HTTP.\n *\n * By default, each instance of this class will use the legacy wire protocol\n * from [Selenium project][json]. The executor will automatically switch to the\n * [W3C wire protocol][w3c] if the remote end returns a compliant response to\n * a new session command.\n *\n * [json]: https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol\n * [w3c]: https://w3c.github.io/webdriver/webdriver-spec.html\n *\n * @implements {cmd.Executor}\n */\nclass Executor {\n  /**\n   * @param {!(Client|IThenable<!Client>)} client The client to use for sending\n   *     requests to the server, or a promise-like object that will resolve\n   *     to the client.\n   */\n  constructor(client) {\n    CLIENTS.set(this, client)\n\n    /** @private {Map<string, CommandSpec>} */\n    this.customCommands_ = null\n\n    /** @private {!logging.Logger} */\n    this.log_ = logging.getLogger(`${logging.Type.DRIVER}.http.Executor`)\n  }\n\n  /**\n   * Defines a new command for use with this executor. When a command is sent,\n   * the {@code path} will be preprocessed using the command's parameters; any\n   * path segments prefixed with \":\" will be replaced by the parameter of the\n   * same name. For example, given \"/person/:name\" and the parameters\n   * \"{name: 'Bob'}\", the final command path will be \"/person/Bob\".\n   *\n   * @param {string} name The command name.\n   * @param {string} method The HTTP method to use when sending this command.\n   * @param {string} path The path to send the command to, relative to\n   *     the WebDriver server's command root and of the form\n   *     \"/path/:variable/segment\".\n   */\n  defineCommand(name, method, path) {\n    if (!this.customCommands_) {\n      this.customCommands_ = new Map()\n    }\n    this.customCommands_.set(name, { method, path })\n  }\n\n  /** @override */\n  async execute(command) {\n    let request = buildRequest(this.customCommands_, command)\n    this.log_.finer(() => `>>> ${request.method} ${request.path}`)\n\n    let client = CLIENTS.get(this)\n    if (promise.isPromise(client)) {\n      client = await client\n      CLIENTS.set(this, client)\n    }\n\n    let response = await client.send(request)\n    this.log_.finer(() => `>>>\\n${request}\\n<<<\\n${response}`)\n\n    let httpResponse = /** @type {!Response} */ (response)\n\n    let { isW3C, value } = parseHttpResponse(command, httpResponse)\n\n    if (command.getName() === cmd.Name.NEW_SESSION) {\n      if (!value || !value.sessionId) {\n        throw new error.WebDriverError(`Unable to parse new session response: ${response.body}`)\n      }\n\n      // The remote end is a W3C compliant server if there is no `status`\n      // field in the response.\n      if (command.getName() === cmd.Name.NEW_SESSION) {\n        this.w3c = this.w3c || isW3C\n      }\n\n      // No implementations use the `capabilities` key yet...\n      let capabilities = value.capabilities || value.value\n      return new Session(/** @type {{sessionId: string}} */ (value).sessionId, capabilities)\n    }\n\n    return typeof value === 'undefined' ? null : value\n  }\n}\n\n/**\n * @param {string} str .\n * @return {?} .\n */\nfunction tryParse(str) {\n  try {\n    return JSON.parse(str)\n    /*eslint no-unused-vars: \"off\"*/\n  } catch (ignored) {\n    // Do nothing.\n  }\n}\n\n/**\n * Callback used to parse {@link Response} objects from a\n * {@link HttpClient}.\n *\n * @param {!cmd.Command} command The command the response is for.\n * @param {!Response} httpResponse The HTTP response to parse.\n * @return {{isW3C: boolean, value: ?}} An object describing the parsed\n *     response. This object will have two fields: `isW3C` indicates whether\n *     the response looks like it came from a remote end that conforms with the\n *     W3C WebDriver spec, and `value`, the actual response value.\n * @throws {WebDriverError} If the HTTP response is an error.\n */\nfunction parseHttpResponse(command, httpResponse) {\n  if (httpResponse.status < 200) {\n    // This should never happen, but throw the raw response so users report it.\n    throw new error.WebDriverError(`Unexpected HTTP response:\\n${httpResponse}`)\n  }\n\n  let parsed = tryParse(httpResponse.body)\n\n  if (parsed && typeof parsed === 'object') {\n    let value = parsed.value\n    let isW3C = isObject(value) && typeof parsed.status === 'undefined'\n\n    if (!isW3C) {\n      error.checkLegacyResponse(parsed)\n\n      // Adjust legacy new session responses to look like W3C to simplify\n      // later processing.\n      if (command.getName() === cmd.Name.NEW_SESSION) {\n        value = parsed\n      }\n    } else if (httpResponse.status > 399) {\n      error.throwDecodedError(value)\n    }\n\n    return { isW3C, value }\n  }\n\n  if (parsed !== undefined) {\n    return { isW3C: false, value: parsed }\n  }\n\n  let value = httpResponse.body.replace(/\\r\\n/g, '\\n')\n\n  // 404 represents an unknown command; anything else > 399 is a generic unknown\n  // error.\n  if (httpResponse.status === 404) {\n    throw new error.UnsupportedOperationError(command.getName() + ': ' + value)\n  } else if (httpResponse.status >= 400) {\n    throw new error.WebDriverError(value)\n  }\n\n  return { isW3C: false, value: value || null }\n}\n\n/**\n * Builds a fully qualified path using the given set of command parameters. Each\n * path segment prefixed with ':' will be replaced by the value of the\n * corresponding parameter. All parameters spliced into the path will be\n * removed from the parameter map.\n * @param {string} path The original resource path.\n * @param {!Object<*>} parameters The parameters object to splice into the path.\n * @return {string} The modified path.\n */\nfunction buildPath(path, parameters) {\n  let pathParameters = path.match(/\\/:(\\w+)\\b/g)\n  if (pathParameters) {\n    for (let i = 0; i < pathParameters.length; ++i) {\n      let key = pathParameters[i].substring(2) // Trim the /:\n      if (key in parameters) {\n        let value = parameters[key]\n        if (webElement.isId(value)) {\n          // When inserting a WebElement into the URL, only use its ID value,\n          // not the full JSON.\n          value = webElement.extractId(value)\n        }\n        path = path.replace(pathParameters[i], '/' + value)\n        delete parameters[key]\n      } else {\n        throw new error.InvalidArgumentError('Missing required parameter: ' + key)\n      }\n    }\n  }\n  return path\n}\n\n// PUBLIC API\n\nmodule.exports = {\n  Executor,\n  Client,\n  Request,\n  Response,\n  // Exported for testing.\n  buildPath,\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/lib/http.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/lib/input.js":
/*!******************************************************!*\
  !*** ./node_modules/selenium-webdriver/lib/input.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\n\n/**\n * @fileoverview Defines types related to user input with the WebDriver API.\n */\nconst { Command, Name } = __webpack_require__(/*! ./command */ \"(rsc)/./node_modules/selenium-webdriver/lib/command.js\")\nconst { InvalidArgumentError } = __webpack_require__(/*! ./error */ \"(rsc)/./node_modules/selenium-webdriver/lib/error.js\")\n\n/**\n * Enumeration of the buttons used in the advanced interactions API.\n * @enum {number}\n */\nconst Button = {\n  LEFT: 0,\n  MIDDLE: 1,\n  RIGHT: 2,\n  BACK: 3,\n  FORWARD: 4,\n}\n\n/**\n * Representations of pressable keys that aren't text.  These are stored in\n * the Unicode PUA (Private Use Area) code points, 0xE000-0xF8FF.  Refer to\n * http://www.google.com.au/search?&q=unicode+pua&btnK=Search\n *\n * @enum {string}\n * @see <https://www.w3.org/TR/webdriver/#keyboard-actions>\n */\nconst Key = {\n  NULL: '\\uE000',\n  CANCEL: '\\uE001', // ^break\n  HELP: '\\uE002',\n  BACK_SPACE: '\\uE003',\n  TAB: '\\uE004',\n  CLEAR: '\\uE005',\n  RETURN: '\\uE006',\n  ENTER: '\\uE007',\n  SHIFT: '\\uE008',\n  CONTROL: '\\uE009',\n  ALT: '\\uE00A',\n  PAUSE: '\\uE00B',\n  ESCAPE: '\\uE00C',\n  SPACE: '\\uE00D',\n  PAGE_UP: '\\uE00E',\n  PAGE_DOWN: '\\uE00F',\n  END: '\\uE010',\n  HOME: '\\uE011',\n  ARROW_LEFT: '\\uE012',\n  LEFT: '\\uE012',\n  ARROW_UP: '\\uE013',\n  UP: '\\uE013',\n  ARROW_RIGHT: '\\uE014',\n  RIGHT: '\\uE014',\n  ARROW_DOWN: '\\uE015',\n  DOWN: '\\uE015',\n  INSERT: '\\uE016',\n  DELETE: '\\uE017',\n  SEMICOLON: '\\uE018',\n  EQUALS: '\\uE019',\n\n  NUMPAD0: '\\uE01A', // number pad keys\n  NUMPAD1: '\\uE01B',\n  NUMPAD2: '\\uE01C',\n  NUMPAD3: '\\uE01D',\n  NUMPAD4: '\\uE01E',\n  NUMPAD5: '\\uE01F',\n  NUMPAD6: '\\uE020',\n  NUMPAD7: '\\uE021',\n  NUMPAD8: '\\uE022',\n  NUMPAD9: '\\uE023',\n  MULTIPLY: '\\uE024',\n  ADD: '\\uE025',\n  SEPARATOR: '\\uE026',\n  SUBTRACT: '\\uE027',\n  DECIMAL: '\\uE028',\n  DIVIDE: '\\uE029',\n\n  F1: '\\uE031', // function keys\n  F2: '\\uE032',\n  F3: '\\uE033',\n  F4: '\\uE034',\n  F5: '\\uE035',\n  F6: '\\uE036',\n  F7: '\\uE037',\n  F8: '\\uE038',\n  F9: '\\uE039',\n  F10: '\\uE03A',\n  F11: '\\uE03B',\n  F12: '\\uE03C',\n\n  COMMAND: '\\uE03D', // Apple command key\n  META: '\\uE03D', // alias for Windows key\n\n  /**\n   * Japanese modifier key for switching between full- and half-width\n   * characters.\n   * @see <https://en.wikipedia.org/wiki/Language_input_keys>\n   */\n  ZENKAKU_HANKAKU: '\\uE040',\n}\n\n/**\n * Simulate pressing many keys at once in a \"chord\". Takes a sequence of\n * {@linkplain Key keys} or strings, appends each of the values to a string,\n * adds the chord termination key ({@link Key.NULL}) and returns the resulting\n * string.\n *\n * Note: when the low-level webdriver key handlers see Keys.NULL, active\n * modifier keys (CTRL/ALT/SHIFT/etc) release via a keyup event.\n *\n * @param {...string} keys The key sequence to concatenate.\n * @return {string} The null-terminated key sequence.\n */\nKey.chord = function (...keys) {\n  return keys.join('') + Key.NULL\n}\n\n/**\n * Used with {@link ./webelement.WebElement#sendKeys WebElement#sendKeys} on\n * file input elements (`<input type=\"file\">`) to detect when the entered key\n * sequence defines the path to a file.\n *\n * By default, {@linkplain ./webelement.WebElement WebElement's} will enter all\n * key sequences exactly as entered. You may set a\n * {@linkplain ./webdriver.WebDriver#setFileDetector file detector} on the\n * parent WebDriver instance to define custom behavior for handling file\n * elements. Of particular note is the\n * {@link selenium-webdriver/remote.FileDetector}, which should be used when\n * running against a remote\n * [Selenium Server](https://selenium.dev/downloads/).\n */\nclass FileDetector {\n  /**\n   * Handles the file specified by the given path, preparing it for use with\n   * the current browser. If the path does not refer to a valid file, it will\n   * be returned unchanged, otherwise a path suitable for use with the current\n   * browser will be returned.\n   *\n   * This default implementation is a no-op. Subtypes may override this function\n   * for custom tailored file handling.\n   *\n   * @param {!./webdriver.WebDriver} driver The driver for the current browser.\n   * @param {string} path The path to process.\n   * @return {!Promise<string>} A promise for the processed file path.\n   * @package\n   */\n  handleFile(_driver, path) {\n    return Promise.resolve(path)\n  }\n}\n\n/**\n * Generic description of a single action to send to the remote end.\n *\n * @record\n * @package\n */\nclass Action {\n  constructor() {\n    /** @type {!Action.Type} */\n    this.type\n    /** @type {(number|undefined)} */\n    this.duration\n    /** @type {(string|undefined)} */\n    this.value\n    /** @type {(Button|undefined)} */\n    this.button\n    /** @type {(number|undefined)} */\n    this.x\n    /** @type {(number|undefined)} */\n    this.y\n  }\n}\n\n/**\n * @enum {string}\n * @package\n * @see <https://w3c.github.io/webdriver/webdriver-spec.html#terminology-0>\n */\nAction.Type = {\n  KEY_DOWN: 'keyDown',\n  KEY_UP: 'keyUp',\n  PAUSE: 'pause',\n  POINTER_DOWN: 'pointerDown',\n  POINTER_UP: 'pointerUp',\n  POINTER_MOVE: 'pointerMove',\n  POINTER_CANCEL: 'pointerCancel',\n  SCROLL: 'scroll',\n}\n\n/**\n * Represents a user input device.\n *\n * @abstract\n */\nclass Device {\n  /**\n   * @param {Device.Type} type the input type.\n   * @param {string} id a unique ID for this device.\n   */\n  constructor(type, id) {\n    /** @private @const */ this.type_ = type\n    /** @private @const */ this.id_ = id\n  }\n\n  /** @return {!Object} the JSON encoding for this device. */\n  toJSON() {\n    return { type: this.type_, id: this.id_ }\n  }\n}\n\n/**\n * Device types supported by the WebDriver protocol.\n *\n * @enum {string}\n * @see <https://w3c.github.io/webdriver/webdriver-spec.html#input-source-state>\n */\nDevice.Type = {\n  KEY: 'key',\n  NONE: 'none',\n  POINTER: 'pointer',\n  WHEEL: 'wheel',\n}\n\n/**\n * @param {(string|Key|number)} key\n * @return {string}\n * @throws {!(InvalidArgumentError|RangeError)}\n */\nfunction checkCodePoint(key) {\n  if (typeof key === 'number') {\n    return String.fromCodePoint(key)\n  }\n\n  if (typeof key !== 'string') {\n    throw new InvalidArgumentError(`key is not a string: ${key}`)\n  }\n\n  key = key.normalize()\n  if (Array.from(key).length !== 1) {\n    throw new InvalidArgumentError(`key input is not a single code point: ${key}`)\n  }\n  return key\n}\n\n/**\n * Keyboard input device.\n *\n * @final\n * @see <https://www.w3.org/TR/webdriver/#dfn-key-input-source>\n */\nclass Keyboard extends Device {\n  /** @param {string} id the device ID. */\n  constructor(id) {\n    super(Device.Type.KEY, id)\n  }\n\n  /**\n   * Generates a key down action.\n   *\n   * @param {(Key|string|number)} key the key to press. This key may be\n   *     specified as a {@link Key} value, a specific unicode code point,\n   *     or a string containing a single unicode code point.\n   * @return {!Action} a new key down action.\n   * @package\n   */\n  keyDown(key) {\n    return { type: Action.Type.KEY_DOWN, value: checkCodePoint(key) }\n  }\n\n  /**\n   * Generates a key up action.\n   *\n   * @param {(Key|string|number)} key the key to press. This key may be\n   *     specified as a {@link Key} value, a specific unicode code point,\n   *     or a string containing a single unicode code point.\n   * @return {!Action} a new key up action.\n   * @package\n   */\n  keyUp(key) {\n    return { type: Action.Type.KEY_UP, value: checkCodePoint(key) }\n  }\n}\n\n/**\n * Defines the reference point from which to compute offsets for\n * {@linkplain ./input.Pointer#move pointer move} actions.\n *\n * @enum {string}\n */\nconst Origin = {\n  /** Compute offsets relative to the pointer's current position. */\n  POINTER: 'pointer',\n  /** Compute offsets relative to the viewport. */\n  VIEWPORT: 'viewport',\n}\n\n/**\n * Pointer input device.\n *\n * @final\n * @see <https://www.w3.org/TR/webdriver/#dfn-pointer-input-source>\n */\nclass Pointer extends Device {\n  /**\n   * @param {string} id the device ID.\n   * @param {Pointer.Type} type the pointer type.\n   */\n  constructor(id, type) {\n    super(Device.Type.POINTER, id)\n    /** @private @const */ this.pointerType_ = type\n  }\n\n  /** @override */\n  toJSON() {\n    return Object.assign({ parameters: { pointerType: this.pointerType_ } }, super.toJSON())\n  }\n\n  /**\n   * @return {!Action} An action that cancels this pointer's current input.\n   * @package\n   */\n  cancel() {\n    return { type: Action.Type.POINTER_CANCEL }\n  }\n\n  /**\n   * @param {!Button=} button The button to press.\n   * @param width\n   * @param height\n   * @param pressure\n   * @param tangentialPressure\n   * @param tiltX\n   * @param tiltY\n   * @param twist\n   * @param altitudeAngle\n   * @param azimuthAngle\n   * @return {!Action} An action to press the specified button with this device.\n   * @package\n   */\n  press(\n    button = Button.LEFT,\n    width = 0,\n    height = 0,\n    pressure = 0,\n    tangentialPressure = 0,\n    tiltX = 0,\n    tiltY = 0,\n    twist = 0,\n    altitudeAngle = 0,\n    azimuthAngle = 0,\n  ) {\n    return {\n      type: Action.Type.POINTER_DOWN,\n      button,\n      width,\n      height,\n      pressure,\n      tangentialPressure,\n      tiltX,\n      tiltY,\n      twist,\n      altitudeAngle,\n      azimuthAngle,\n    }\n  }\n\n  /**\n   * @param {!Button=} button The button to release.\n   * @return {!Action} An action to release the specified button with this\n   *     device.\n   * @package\n   */\n  release(button = Button.LEFT) {\n    return { type: Action.Type.POINTER_UP, button }\n  }\n\n  /**\n   * Creates an action for moving the pointer `x` and `y` pixels from the\n   * specified `origin`. The `origin` may be defined as the pointer's\n   * {@linkplain Origin.POINTER current position}, the\n   * {@linkplain Origin.VIEWPORT viewport}, or the center of a specific\n   * {@linkplain ./webdriver.WebElement WebElement}.\n   *\n   * @param {{\n   *   x: (number|undefined),\n   *   y: (number|undefined),\n   *   duration: (number|undefined),\n   *   origin: (!Origin|!./webdriver.WebElement|undefined),\n   * }=} options the move options.\n   * @return {!Action} The new action.\n   * @package\n   */\n  move({\n    x = 0,\n    y = 0,\n    duration = 100,\n    origin = Origin.VIEWPORT,\n    width = 0,\n    height = 0,\n    pressure = 0,\n    tangentialPressure = 0,\n    tiltX = 0,\n    tiltY = 0,\n    twist = 0,\n    altitudeAngle = 0,\n    azimuthAngle = 0,\n  }) {\n    return {\n      type: Action.Type.POINTER_MOVE,\n      origin,\n      duration,\n      x,\n      y,\n      width,\n      height,\n      pressure,\n      tangentialPressure,\n      tiltX,\n      tiltY,\n      twist,\n      altitudeAngle,\n      azimuthAngle,\n    }\n  }\n}\n\n/**\n * The supported types of pointers.\n * @enum {string}\n */\nPointer.Type = {\n  MOUSE: 'mouse',\n  PEN: 'pen',\n  TOUCH: 'touch',\n}\n\nclass Wheel extends Device {\n  /**\n   * @param {string} id the device ID..\n   */\n  constructor(id) {\n    super(Device.Type.WHEEL, id)\n  }\n\n  /**\n   * Scrolls a page via the coordinates given\n   * @param {number} x starting x coordinate\n   * @param {number} y starting y coordinate\n   * @param {number} deltaX Delta X to scroll to target\n   * @param {number} deltaY Delta Y to scroll to target\n   * @param {WebElement} origin element origin\n   * @param {number} duration duration ratio be the ratio of time delta and duration\n   * @returns {!Action} An action to scroll with this device.\n   */\n  scroll(x, y, deltaX, deltaY, origin, duration) {\n    return {\n      type: Action.Type.SCROLL,\n      duration: duration,\n      x: x,\n      y: y,\n      deltaX: deltaX,\n      deltaY: deltaY,\n      origin: origin,\n    }\n  }\n}\n\n/**\n * User facing API for generating complex user gestures. This class should not\n * be instantiated directly. Instead, users should create new instances by\n * calling {@link ./webdriver.WebDriver#actions WebDriver.actions()}.\n *\n * ### Action Ticks\n *\n * Action sequences are divided into a series of \"ticks\". At each tick, the\n * WebDriver remote end will perform a single action for each device included\n * in the action sequence. At tick 0, the driver will perform the first action\n * defined for each device, at tick 1 the second action for each device, and\n * so on until all actions have been executed. If an individual device does\n * not have an action defined at a particular tick, it will automatically\n * pause.\n *\n * By default, action sequences will be synchronized so only one device has a\n * define action in each tick. Consider the following code sample:\n *\n *     const actions = driver.actions();\n *\n *     await actions\n *         .keyDown(SHIFT)\n *         .move({origin: el})\n *         .press()\n *         .release()\n *         .keyUp(SHIFT)\n *         .perform();\n *\n * This sample produces the following sequence of ticks:\n *\n * | Device   | Tick 1         | Tick 2             | Tick 3  | Tick 4    | Tick 5       |\n * | -------- | -------------- | ------------------ | ------- | --------- | ------------ |\n * | Keyboard | keyDown(SHIFT) | pause()            | pause() | pause()   | keyUp(SHIFT) |\n * | Mouse    | pause()        | move({origin: el}) | press() | release() | pause()      |\n *\n * If you'd like the remote end to execute actions with multiple devices\n * simultaneously, you may pass `{async: true}` when creating the actions\n * builder. With synchronization disabled (`{async: true}`), the ticks from our\n * previous example become:\n *\n * | Device   | Tick 1             | Tick 2       | Tick 3    |\n * | -------- | ------------------ | ------------ | --------- |\n * | Keyboard | keyDown(SHIFT)     | keyUp(SHIFT) |           |\n * | Mouse    | move({origin: el}) | press()      | release() |\n *\n * When synchronization is disabled, it is your responsibility to insert\n * {@linkplain #pause() pauses} for each device, as needed:\n *\n *     const actions = driver.actions({async: true});\n *     const kb = actions.keyboard();\n *     const mouse = actions.mouse();\n *\n *     actions.keyDown(SHIFT).pause(kb).pause(kb).key(SHIFT);\n *     actions.pause(mouse).move({origin: el}).press().release();\n *     actions.perform();\n *\n * With pauses insert for individual devices, we're back to:\n *\n * | Device   | Tick 1         | Tick 2             | Tick 3  | Tick 4       |\n * | -------- | -------------- | ------------------ | ------- | ------------ |\n * | Keyboard | keyDown(SHIFT) | pause()            | pause() | keyUp(SHIFT) |\n * | Mouse    | pause()        | move({origin: el}) | press() | release()    |\n *\n * #### Tick Durations\n *\n * The length of each action tick is however long it takes the remote end to\n * execute the actions for every device in that tick. Most actions are\n * \"instantaneous\", however, {@linkplain #pause pause} and\n * {@linkplain #move pointer move} actions allow you to specify a duration for\n * how long that action should take. The remote end will always wait for all\n * actions within a tick to finish before starting the next tick, so a device\n * may implicitly pause while waiting for other devices to finish.\n *\n * | Device    | Tick 1                | Tick 2  |\n * | --------- | --------------------- | ------- |\n * | Pointer 1 | move({duration: 200}) | press() |\n * | Pointer 2 | move({duration: 300}) | press() |\n *\n * In table above, the move for Pointer 1 should only take 200 ms, but the\n * remote end will wait for the move for Pointer 2 to finish\n * (an additional 100 ms) before proceeding to Tick 2.\n *\n * This implicit waiting also applies to pauses. In the table below, even though\n * the keyboard only defines a pause of 100 ms, the remote end will wait an\n * additional 200 ms for the mouse move to finish before moving to Tick 2.\n *\n * | Device   | Tick 1                | Tick 2         |\n * | -------- | --------------------- | -------------- |\n * | Keyboard | pause(100)            | keyDown(SHIFT) |\n * | Mouse    | move({duration: 300}) |                |\n *\n * [client rect]: https://developer.mozilla.org/en-US/docs/Web/API/Element/getClientRects\n * [bounding client rect]: https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect\n *\n * @final\n * @see <https://www.w3.org/TR/webdriver/#actions>\n */\nclass Actions {\n  /**\n   * @param {!Executor} executor The object to execute the configured\n   *     actions with.\n   * @param {{async: (boolean|undefined)}} options Options for this action\n   *     sequence (see class description for details).\n   */\n  constructor(executor, { async = false } = {}) {\n    /** @private @const */\n    this.executor_ = executor\n\n    /** @private @const */\n    this.sync_ = !async\n\n    /** @private @const */\n    this.keyboard_ = new Keyboard('default keyboard')\n\n    /** @private @const */\n    this.mouse_ = new Pointer('default mouse', Pointer.Type.MOUSE)\n\n    /** @private @const */\n    this.wheel_ = new Wheel('default wheel')\n\n    /** @private @const {!Map<!Device, !Array<!Action>>} */\n    this.sequences_ = new Map([\n      [this.keyboard_, []],\n      [this.mouse_, []],\n      [this.wheel_, []],\n    ])\n  }\n\n  /** @return {!Keyboard} the keyboard device handle. */\n  keyboard() {\n    return this.keyboard_\n  }\n\n  /** @return {!Pointer} the mouse pointer device handle. */\n  mouse() {\n    return this.mouse_\n  }\n\n  /** @return {!Wheel} the wheel device handle. */\n  wheel() {\n    return this.wheel_\n  }\n\n  /**\n   * @param {!Device} device\n   * @return {!Array<!Action>}\n   * @private\n   */\n  sequence_(device) {\n    let sequence = this.sequences_.get(device)\n    if (!sequence) {\n      sequence = []\n      this.sequences_.set(device, sequence)\n    }\n    return sequence\n  }\n\n  /**\n   * Appends `actions` to the end of the current sequence for the given\n   * `device`. If device synchronization is enabled, after inserting the\n   * actions, pauses will be inserted for all other devices to ensure all action\n   * sequences are the same length.\n   *\n   * @param {!Device} device the device to update.\n   * @param {...!Action} actions the actions to insert.\n   * @return {!Actions} a self reference.\n   */\n  insert(device, ...actions) {\n    this.sequence_(device).push(...actions)\n    return this.sync_ ? this.synchronize() : this\n  }\n\n  /**\n   * Ensures the action sequence for every device referenced in this action\n   * sequence is the same length. For devices whose sequence is too short,\n   * this will insert {@linkplain #pause pauses} so that every device has an\n   * explicit action defined at each tick.\n   *\n   * @param {...!Device} devices The specific devices to synchronize.\n   *     If unspecified, the action sequences for every device will be\n   *     synchronized.\n   * @return {!Actions} a self reference.\n   */\n  synchronize(...devices) {\n    let sequences\n    let max = 0\n    if (devices.length === 0) {\n      for (const s of this.sequences_.values()) {\n        max = Math.max(max, s.length)\n      }\n      sequences = this.sequences_.values()\n    } else {\n      sequences = []\n      for (const device of devices) {\n        const seq = this.sequence_(device)\n        max = Math.max(max, seq.length)\n        sequences.push(seq)\n      }\n    }\n\n    const pause = { type: Action.Type.PAUSE, duration: 0 }\n    for (const seq of sequences) {\n      while (seq.length < max) {\n        seq.push(pause)\n      }\n    }\n\n    return this\n  }\n\n  /**\n   * Inserts a pause action for the specified devices, ensuring each device is\n   * idle for a tick. The length of the pause (in milliseconds) may be specified\n   * as the first parameter to this method (defaults to 0). Otherwise, you may\n   * just specify the individual devices that should pause.\n   *\n   * If no devices are specified, a pause action will be created (using the same\n   * duration) for every device.\n   *\n   * When device synchronization is enabled (the default for new {@link Actions}\n   * objects), there is no need to specify devices as pausing one automatically\n   * pauses the others for the same duration. In other words, the following are\n   * all equivalent:\n   *\n   *     let a1 = driver.actions();\n   *     a1.pause(100).perform();\n   *\n   *     let a2 = driver.actions();\n   *     a2.pause(100, a2.keyboard()).perform();\n   *     // Synchronization ensures a2.mouse() is automatically paused too.\n   *\n   *     let a3 = driver.actions();\n   *     a3.pause(100, a3.keyboard(), a3.mouse()).perform();\n   *\n   * When device synchronization is _disabled_, you can cause individual devices\n   * to pause during a tick. For example, to hold the SHIFT key down while\n   * moving the mouse:\n   *\n   *     let actions = driver.actions({async: true});\n   *\n   *     actions.keyDown(Key.SHIFT);\n   *     actions.pause(actions.mouse())  // Pause for shift down\n   *         .press(Button.LEFT)\n   *         .move({x: 10, y: 10})\n   *         .release(Button.LEFT);\n   *     actions\n   *         .pause(\n   *             actions.keyboard(),  // Pause for press left\n   *             actions.keyboard(),  // Pause for move\n   *             actions.keyboard())  // Pause for release left\n   *        .keyUp(Key.SHIFT);\n   *     await actions.perform();\n   *\n   * @param {(number|!Device)=} duration The length of the pause to insert, in\n   *     milliseconds. Alternatively, the duration may be omitted (yielding a\n   *     default 0 ms pause), and the first device to pause may be specified.\n   * @param {...!Device} devices The devices to insert the pause for. If no\n   *     devices are specified, the pause will be inserted for _all_ devices.\n   * @return {!Actions} a self reference.\n   */\n  pause(duration, ...devices) {\n    if (duration instanceof Device) {\n      devices.push(duration)\n      duration = 0\n    } else if (!duration) {\n      duration = 0\n    }\n\n    const action = { type: Action.Type.PAUSE, duration }\n\n    // NB: need a properly typed variable for type checking.\n    /** @type {!Iterable<!Device>} */\n    const iterable = devices.length === 0 ? this.sequences_.keys() : devices\n    for (const device of iterable) {\n      this.sequence_(device).push(action)\n    }\n    return this.sync_ ? this.synchronize() : this\n  }\n\n  /**\n   * Inserts an action to press a single key.\n   *\n   * @param {(Key|string|number)} key the key to press. This key may be\n   *     specified as a {@link Key} value, a specific unicode code point,\n   *     or a string containing a single unicode code point.\n   * @return {!Actions} a self reference.\n   */\n  keyDown(key) {\n    return this.insert(this.keyboard_, this.keyboard_.keyDown(key))\n  }\n\n  /**\n   * Inserts an action to release a single key.\n   *\n   * @param {(Key|string|number)} key the key to release. This key may be\n   *     specified as a {@link Key} value, a specific unicode code point,\n   *     or a string containing a single unicode code point.\n   * @return {!Actions} a self reference.\n   */\n  keyUp(key) {\n    return this.insert(this.keyboard_, this.keyboard_.keyUp(key))\n  }\n\n  /**\n   * Inserts a sequence of actions to type the provided key sequence.\n   * For each key, this will record a pair of {@linkplain #keyDown keyDown}\n   * and {@linkplain #keyUp keyUp} actions. An implication of this pairing\n   * is that modifier keys (e.g. {@link ./input.Key.SHIFT Key.SHIFT}) will\n   * always be immediately released. In other words, `sendKeys(Key.SHIFT, 'a')`\n   * is the same as typing `sendKeys('a')`, _not_ `sendKeys('A')`.\n   *\n   * @param {...(Key|string|number)} keys the keys to type.\n   * @return {!Actions} a self reference.\n   */\n  sendKeys(...keys) {\n    const { WebElement } = __webpack_require__(/*! ./webdriver */ \"(rsc)/./node_modules/selenium-webdriver/lib/webdriver.js\")\n\n    const actions = []\n    if (keys.length > 1 && keys[0] instanceof WebElement) {\n      this.click(keys[0])\n      keys.shift()\n    }\n    for (const key of keys) {\n      if (typeof key === 'string') {\n        for (const symbol of key) {\n          actions.push(this.keyboard_.keyDown(symbol), this.keyboard_.keyUp(symbol))\n        }\n      } else {\n        actions.push(this.keyboard_.keyDown(key), this.keyboard_.keyUp(key))\n      }\n    }\n    return this.insert(this.keyboard_, ...actions)\n  }\n\n  /**\n   * Inserts an action to press a mouse button at the mouse's current location.\n   *\n   * @param {!Button=} button The button to press; defaults to `LEFT`.\n   * @return {!Actions} a self reference.\n   */\n  press(button = Button.LEFT) {\n    return this.insert(this.mouse_, this.mouse_.press(button))\n  }\n\n  /**\n   * Inserts an action to release a mouse button at the mouse's current\n   * location.\n   *\n   * @param {!Button=} button The button to release; defaults to `LEFT`.\n   * @return {!Actions} a self reference.\n   */\n  release(button = Button.LEFT) {\n    return this.insert(this.mouse_, this.mouse_.release(button))\n  }\n\n  /**\n   * scrolls a page via the coordinates given\n   * @param {number} x starting x coordinate\n   * @param {number} y starting y coordinate\n   * @param {number} deltax delta x to scroll to target\n   * @param {number} deltay delta y to scroll to target\n   * @param {number} duration duration ratio be the ratio of time delta and duration\n   * @returns {!Actions} An action to scroll with this device.\n   */\n  scroll(x, y, targetDeltaX, targetDeltaY, origin, duration) {\n    return this.insert(this.wheel_, this.wheel_.scroll(x, y, targetDeltaX, targetDeltaY, origin, duration))\n  }\n\n  /**\n   * Inserts an action for moving the mouse `x` and `y` pixels relative to the\n   * specified `origin`. The `origin` may be defined as the mouse's\n   * {@linkplain ./input.Origin.POINTER current position}, the top-left corner of the\n   * {@linkplain ./input.Origin.VIEWPORT viewport}, or the center of a specific\n   * {@linkplain ./webdriver.WebElement WebElement}. Default is top left corner of the view-port if origin is not specified\n   *\n   * You may adjust how long the remote end should take, in milliseconds, to\n   * perform the move using the `duration` parameter (defaults to 100 ms).\n   * The number of incremental move events generated over this duration is an\n   * implementation detail for the remote end.\n   *\n   * @param {{\n   *   x: (number|undefined),\n   *   y: (number|undefined),\n   *   duration: (number|undefined),\n   *   origin: (!Origin|!./webdriver.WebElement|undefined),\n   * }=} options The move options. Defaults to moving the mouse to the top-left\n   *     corner of the viewport over 100ms.\n   * @return {!Actions} a self reference.\n   */\n  move({ x = 0, y = 0, duration = 100, origin = Origin.VIEWPORT } = {}) {\n    return this.insert(this.mouse_, this.mouse_.move({ x, y, duration, origin }))\n  }\n\n  /**\n   * Short-hand for performing a simple left-click (down/up) with the mouse.\n   *\n   * @param {./webdriver.WebElement=} element If specified, the mouse will\n   *     first be moved to the center of the element before performing the\n   *     click.\n   * @return {!Actions} a self reference.\n   */\n  click(element) {\n    if (element) {\n      this.move({ origin: element })\n    }\n    return this.press().release()\n  }\n\n  /**\n   * Short-hand for performing a simple right-click (down/up) with the mouse.\n   *\n   * @param {./webdriver.WebElement=} element If specified, the mouse will\n   *     first be moved to the center of the element before performing the\n   *     click.\n   * @return {!Actions} a self reference.\n   */\n  contextClick(element) {\n    if (element) {\n      this.move({ origin: element })\n    }\n    return this.press(Button.RIGHT).release(Button.RIGHT)\n  }\n\n  /**\n   * Short-hand for performing a double left-click with the mouse.\n   *\n   * @param {./webdriver.WebElement=} element If specified, the mouse will\n   *     first be moved to the center of the element before performing the\n   *     click.\n   * @return {!Actions} a self reference.\n   */\n  doubleClick(element) {\n    return this.click(element).press().release()\n  }\n\n  /**\n   * Configures a drag-and-drop action consisting of the following steps:\n   *\n   * 1.  Move to the center of the `from` element (element to be dragged).\n   * 2.  Press the left mouse button.\n   * 3.  If the `to` target is a {@linkplain ./webdriver.WebElement WebElement},\n   *     move the mouse to its center. Otherwise, move the mouse by the\n   *     specified offset.\n   * 4.  Release the left mouse button.\n   *\n   * @param {!./webdriver.WebElement} from The element to press the left mouse\n   *     button on to start the drag.\n   * @param {(!./webdriver.WebElement|{x: number, y: number})} to Either another\n   *     element to drag to (will drag to the center of the element), or an\n   *     object specifying the offset to drag by, in pixels.\n   * @return {!Actions} a self reference.\n   */\n  dragAndDrop(from, to) {\n    // Do not require up top to avoid a cycle that breaks static analysis.\n    const { WebElement } = __webpack_require__(/*! ./webdriver */ \"(rsc)/./node_modules/selenium-webdriver/lib/webdriver.js\")\n    if (!(to instanceof WebElement) && (!to || typeof to.x !== 'number' || typeof to.y !== 'number')) {\n      throw new InvalidArgumentError('Invalid drag target; must specify a WebElement or {x, y} offset')\n    }\n\n    this.move({ origin: from }).press()\n    if (to instanceof WebElement) {\n      this.move({ origin: to })\n    } else {\n      this.move({ x: to.x, y: to.y, origin: Origin.POINTER })\n    }\n    return this.release()\n  }\n\n  /**\n   * Releases all keys, pointers, and clears internal state.\n   *\n   * @return {!Promise<void>} a promise that will resolve when finished\n   *     clearing all action state.\n   */\n  clear() {\n    for (const s of this.sequences_.values()) {\n      s.length = 0\n    }\n    return this.executor_.execute(new Command(Name.CLEAR_ACTIONS))\n  }\n\n  /**\n   * Performs the configured action sequence.\n   *\n   * @return {!Promise<void>} a promise that will resolve when all actions have\n   *     been completed.\n   */\n  async perform() {\n    const _actions = []\n    this.sequences_.forEach((actions, device) => {\n      if (!isIdle(actions)) {\n        actions = actions.concat() // Defensive copy.\n        _actions.push(Object.assign({ actions }, device.toJSON()))\n      }\n    })\n\n    if (_actions.length === 0) {\n      return Promise.resolve()\n    }\n\n    await this.executor_.execute(new Command(Name.ACTIONS).setParameter('actions', _actions))\n  }\n\n  getSequences() {\n    const _actions = []\n    this.sequences_.forEach((actions, device) => {\n      if (!isIdle(actions)) {\n        actions = actions.concat()\n        _actions.push(Object.assign({ actions }, device.toJSON()))\n      }\n    })\n\n    return _actions\n  }\n}\n\n/**\n * @param {!Array<!Action>} actions\n * @return {boolean}\n */\nfunction isIdle(actions) {\n  return actions.length === 0 || actions.every((a) => a.type === Action.Type.PAUSE && !a.duration)\n}\n\n/**\n * Script used to compute the offset from the center of a DOM element's first\n * client rect from the top-left corner of the element's bounding client rect.\n * The element's center point is computed using the algorithm defined here:\n * <https://w3c.github.io/webdriver/webdriver-spec.html#dfn-center-point>.\n *\n * __This is only exported for use in internal unit tests. DO NOT USE.__\n *\n * @package\n */\nconst INTERNAL_COMPUTE_OFFSET_SCRIPT = `\nfunction computeOffset(el) {\n  var rect = el.getClientRects()[0];\n  var left = Math.max(0, Math.min(rect.x, rect.x + rect.width));\n  var right =\n      Math.min(window.innerWidth, Math.max(rect.x, rect.x + rect.width));\n  var top = Math.max(0, Math.min(rect.y, rect.y + rect.height));\n  var bot =\n      Math.min(window.innerHeight, Math.max(rect.y, rect.y + rect.height));\n  var x = Math.floor(0.5 * (left + right));\n  var y = Math.floor(0.5 * (top + bot));\n\n  var bbox = el.getBoundingClientRect();\n  return [x - bbox.left, y - bbox.top];\n}\nreturn computeOffset(arguments[0]);`\n\n// PUBLIC API\n\nmodule.exports = {\n  Action, // For documentation only.\n  Actions,\n  Button,\n  Device,\n  Key,\n  Keyboard,\n  FileDetector,\n  Origin,\n  Pointer,\n  INTERNAL_COMPUTE_OFFSET_SCRIPT,\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/lib/input.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/lib/logging.js":
/*!********************************************************!*\
  !*** ./node_modules/selenium-webdriver/lib/logging.js ***!
  \********************************************************/
/***/ ((module) => {

"use strict";
eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\n\n/**\n * @fileoverview Defines WebDriver's logging system. The logging system is\n * broken into major components: local and remote logging.\n *\n * The local logging API, which is anchored by the {@linkplain Logger} class is\n * similar to Java's logging API. Loggers, retrieved by\n * {@linkplain #getLogger getLogger(name)}, use hierarchical, dot-delimited\n * namespaces (e.g. \"\" > \"webdriver\" > \"webdriver.logging\"). Recorded log\n * messages are represented by the {@linkplain Entry} class. You can capture log\n * records by {@linkplain Logger#addHandler attaching} a handler function to the\n * desired logger. For convenience, you can quickly enable logging to the\n * console by simply calling {@linkplain #installConsoleHandler\n * installConsoleHandler}.\n *\n * The [remote logging API](https://github.com/SeleniumHQ/selenium/wiki/Logging)\n * allows you to retrieve logs from a remote WebDriver server. This API uses the\n * {@link Preferences} class to define desired log levels prior to creating\n * a WebDriver session:\n *\n *     var prefs = new logging.Preferences();\n *     prefs.setLevel(logging.Type.BROWSER, logging.Level.DEBUG);\n *\n *     var caps = Capabilities.chrome();\n *     caps.setLoggingPrefs(prefs);\n *     // ...\n *\n * Remote log entries, also represented by the {@link Entry} class, may be\n * retrieved via {@link webdriver.WebDriver.Logs}:\n *\n *     driver.manage().logs().get(logging.Type.BROWSER)\n *         .then(function(entries) {\n *            entries.forEach(function(entry) {\n *              console.log('[%s] %s', entry.level.name, entry.message);\n *            });\n *         });\n *\n * **NOTE:** Only a few browsers support the remote logging API (notably\n * Firefox and Chrome). Firefox supports basic logging functionality, while\n * Chrome exposes robust\n * [performance logging](https://chromedriver.chromium.org/logging)\n * options. Remote logging is still considered a non-standard feature, and the\n * APIs exposed by this module for it are non-frozen. This module will be\n * updated, possibly breaking backwards-compatibility, once logging is\n * officially defined by the\n * [W3C WebDriver spec](http://www.w3.org/TR/webdriver/).\n */\n\n/**\n * Defines a message level that may be used to control logging output.\n *\n * @final\n */\nclass Level {\n  /**\n   * @param {string} name the level's name.\n   * @param {number} level the level's numeric value.\n   */\n  constructor(name, level) {\n    if (level < 0) {\n      throw new TypeError('Level must be >= 0')\n    }\n\n    /** @private {string} */\n    this.name_ = name\n\n    /** @private {number} */\n    this.value_ = level\n  }\n\n  /** This logger's name. */\n  get name() {\n    return this.name_\n  }\n\n  /** The numeric log level. */\n  get value() {\n    return this.value_\n  }\n\n  /** @override */\n  toString() {\n    return this.name\n  }\n}\n\n/**\n * Indicates no log messages should be recorded.\n * @const\n */\nLevel.OFF = new Level('OFF', Infinity)\n\n/**\n * Log messages with a level of `1000` or higher.\n * @const\n */\nLevel.SEVERE = new Level('SEVERE', 1000)\n\n/**\n * Log messages with a level of `900` or higher.\n * @const\n */\nLevel.WARNING = new Level('WARNING', 900)\n\n/**\n * Log messages with a level of `800` or higher.\n * @const\n */\nLevel.INFO = new Level('INFO', 800)\n\n/**\n * Log messages with a level of `700` or higher.\n * @const\n */\nLevel.DEBUG = new Level('DEBUG', 700)\n\n/**\n * Log messages with a level of `500` or higher.\n * @const\n */\nLevel.FINE = new Level('FINE', 500)\n\n/**\n * Log messages with a level of `400` or higher.\n * @const\n */\nLevel.FINER = new Level('FINER', 400)\n\n/**\n * Log messages with a level of `300` or higher.\n * @const\n */\nLevel.FINEST = new Level('FINEST', 300)\n\n/**\n * Indicates all log messages should be recorded.\n * @const\n */\nLevel.ALL = new Level('ALL', 0)\n\nconst ALL_LEVELS = /** !Set<Level> */ new Set([\n  Level.OFF,\n  Level.SEVERE,\n  Level.WARNING,\n  Level.INFO,\n  Level.DEBUG,\n  Level.FINE,\n  Level.FINER,\n  Level.FINEST,\n  Level.ALL,\n])\n\nconst LEVELS_BY_NAME = /** !Map<string, !Level> */ new Map([\n  [Level.OFF.name, Level.OFF],\n  [Level.SEVERE.name, Level.SEVERE],\n  [Level.WARNING.name, Level.WARNING],\n  [Level.INFO.name, Level.INFO],\n  [Level.DEBUG.name, Level.DEBUG],\n  [Level.FINE.name, Level.FINE],\n  [Level.FINER.name, Level.FINER],\n  [Level.FINEST.name, Level.FINEST],\n  [Level.ALL.name, Level.ALL],\n])\n\n/**\n * Converts a level name or value to a {@link Level} value. If the name/value\n * is not recognized, {@link Level.ALL} will be returned.\n *\n * @param {(number|string)} nameOrValue The log level name, or value, to\n *     convert.\n * @return {!Level} The converted level.\n */\nfunction getLevel(nameOrValue) {\n  if (typeof nameOrValue === 'string') {\n    return LEVELS_BY_NAME.get(nameOrValue) || Level.ALL\n  }\n  if (typeof nameOrValue !== 'number') {\n    throw new TypeError('not a string or number')\n  }\n  for (let level of ALL_LEVELS) {\n    if (nameOrValue >= level.value) {\n      return level\n    }\n  }\n  return Level.ALL\n}\n\n/**\n * Describes a single log entry.\n *\n * @final\n */\nclass Entry {\n  /**\n   * @param {(!Level|string|number)} level The entry level.\n   * @param {string} message The log message.\n   * @param {number=} opt_timestamp The time this entry was generated, in\n   *     milliseconds since 0:00:00, January 1, 1970 UTC. If omitted, the\n   *     current time will be used.\n   * @param {string=} opt_type The log type, if known.\n   */\n  constructor(level, message, opt_timestamp, opt_type) {\n    this.level = level instanceof Level ? level : getLevel(level)\n    this.message = message\n    this.timestamp = typeof opt_timestamp === 'number' ? opt_timestamp : Date.now()\n    this.type = opt_type || ''\n  }\n\n  /**\n   * @return {{level: string, message: string, timestamp: number,\n   *           type: string}} The JSON representation of this entry.\n   */\n  toJSON() {\n    return {\n      level: this.level.name,\n      message: this.message,\n      timestamp: this.timestamp,\n      type: this.type,\n    }\n  }\n}\n\n/**\n * An object used to log debugging messages. Loggers use a hierarchical,\n * dot-separated naming scheme. For instance, \"foo\" is considered the parent of\n * the \"foo.bar\" and an ancestor of \"foo.bar.baz\".\n *\n * Each logger may be assigned a {@linkplain #setLevel log level}, which\n * controls which level of messages will be reported to the\n * {@linkplain #addHandler handlers} attached to this instance. If a log level\n * is not explicitly set on a logger, it will inherit its parent.\n *\n * This class should never be directly instantiated. Instead, users should\n * obtain logger references using the {@linkplain ./logging.getLogger()\n * getLogger()} function.\n *\n * @final\n */\nclass Logger {\n  /**\n   * @param {string} name the name of this logger.\n   * @param {Level=} opt_level the initial level for this logger.\n   */\n  constructor(name, opt_level) {\n    /** @private {string} */\n    this.name_ = name\n\n    /** @private {Level} */\n    this.level_ = opt_level || null\n\n    /** @private {Logger} */\n    this.parent_ = null\n\n    /** @private {Set<function(!Entry)>} */\n    this.handlers_ = null\n  }\n\n  /** @return {string} the name of this logger. */\n  getName() {\n    return this.name_\n  }\n\n  /**\n   * @param {Level} level the new level for this logger, or `null` if the logger\n   *     should inherit its level from its parent logger.\n   */\n  setLevel(level) {\n    this.level_ = level\n  }\n\n  /** @return {Level} the log level for this logger. */\n  getLevel() {\n    return this.level_\n  }\n\n  /**\n   * @return {!Level} the effective level for this logger.\n   */\n  getEffectiveLevel() {\n    let logger = this\n    let level\n    do {\n      level = logger.level_\n      logger = logger.parent_\n    } while (logger && !level)\n    return level || Level.OFF\n  }\n\n  /**\n   * @param {!Level} level the level to check.\n   * @return {boolean} whether messages recorded at the given level are loggable\n   *     by this instance.\n   */\n  isLoggable(level) {\n    return level.value !== Level.OFF.value && level.value >= this.getEffectiveLevel().value\n  }\n\n  /**\n   * Adds a handler to this logger. The handler will be invoked for each message\n   * logged with this instance, or any of its descendants.\n   *\n   * @param {function(!Entry)} handler the handler to add.\n   */\n  addHandler(handler) {\n    if (!this.handlers_) {\n      this.handlers_ = new Set()\n    }\n    this.handlers_.add(handler)\n  }\n\n  /**\n   * Removes a handler from this logger.\n   *\n   * @param {function(!Entry)} handler the handler to remove.\n   * @return {boolean} whether a handler was successfully removed.\n   */\n  removeHandler(handler) {\n    if (!this.handlers_) {\n      return false\n    }\n    return this.handlers_.delete(handler)\n  }\n\n  /**\n   * Logs a message at the given level. The message may be defined as a string\n   * or as a function that will return the message. If a function is provided,\n   * it will only be invoked if this logger's\n   * {@linkplain #getEffectiveLevel() effective log level} includes the given\n   * `level`.\n   *\n   * @param {!Level} level the level at which to log the message.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n  log(level, loggable) {\n    if (!this.isLoggable(level)) {\n      return\n    }\n    let message = '[' + this.name_ + '] ' + (typeof loggable === 'function' ? loggable() : loggable)\n    let entry = new Entry(level, message, Date.now())\n    for (let logger = this; logger; logger = logger.parent_) {\n      if (logger.handlers_) {\n        for (let handler of logger.handlers_) {\n          handler(entry)\n        }\n      }\n    }\n  }\n\n  /**\n   * Logs a message at the {@link Level.SEVERE} log level.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n  severe(loggable) {\n    this.log(Level.SEVERE, loggable)\n  }\n\n  /**\n   * Logs a message at the {@link Level.WARNING} log level.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n  warning(loggable) {\n    this.log(Level.WARNING, loggable)\n  }\n\n  /**\n   * Logs a message at the {@link Level.INFO} log level.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n  info(loggable) {\n    this.log(Level.INFO, loggable)\n  }\n\n  /**\n   * Logs a message at the {@link Level.DEBUG} log level.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n  debug(loggable) {\n    this.log(Level.DEBUG, loggable)\n  }\n\n  /**\n   * Logs a message at the {@link Level.FINE} log level.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n  fine(loggable) {\n    this.log(Level.FINE, loggable)\n  }\n\n  /**\n   * Logs a message at the {@link Level.FINER} log level.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n  finer(loggable) {\n    this.log(Level.FINER, loggable)\n  }\n\n  /**\n   * Logs a message at the {@link Level.FINEST} log level.\n   * @param {(string|function(): string)} loggable the message to log, or a\n   *     function that will return the message.\n   */\n  finest(loggable) {\n    this.log(Level.FINEST, loggable)\n  }\n}\n\n/**\n * Maintains a collection of loggers.\n *\n * @final\n */\nclass LogManager {\n  constructor() {\n    /** @private {!Map<string, !Logger>} */\n    this.loggers_ = new Map()\n    this.root_ = new Logger('', Level.OFF)\n  }\n\n  /**\n   * Retrieves a named logger, creating it in the process. This function will\n   * implicitly create the requested logger, and any of its parents, if they\n   * do not yet exist.\n   *\n   * @param {string} name the logger's name.\n   * @return {!Logger} the requested logger.\n   */\n  getLogger(name) {\n    if (!name) {\n      return this.root_\n    }\n    let parent = this.root_\n    for (let i = name.indexOf('.'); i != -1; i = name.indexOf('.', i + 1)) {\n      let parentName = name.substr(0, i)\n      parent = this.createLogger_(parentName, parent)\n    }\n    return this.createLogger_(name, parent)\n  }\n\n  /**\n   * Creates a new logger.\n   *\n   * @param {string} name the logger's name.\n   * @param {!Logger} parent the logger's parent.\n   * @return {!Logger} the new logger.\n   * @private\n   */\n  createLogger_(name, parent) {\n    if (this.loggers_.has(name)) {\n      return /** @type {!Logger} */ (this.loggers_.get(name))\n    }\n    let logger = new Logger(name, null)\n    logger.parent_ = parent\n    this.loggers_.set(name, logger)\n    return logger\n  }\n}\n\nconst logManager = new LogManager()\n\n/**\n * Retrieves a named logger, creating it in the process. This function will\n * implicitly create the requested logger, and any of its parents, if they\n * do not yet exist.\n *\n * The log level will be unspecified for newly created loggers. Use\n * {@link Logger#setLevel(level)} to explicitly set a level.\n *\n * @param {string} name the logger's name.\n * @return {!Logger} the requested logger.\n */\nfunction getLogger(name) {\n  return logManager.getLogger(name)\n}\n\n/**\n * Pads a number to ensure it has a minimum of two digits.\n *\n * @param {number} n the number to be padded.\n * @return {string} the padded number.\n */\nfunction pad(n) {\n  if (n >= 10) {\n    return '' + n\n  } else {\n    return '0' + n\n  }\n}\n\n/**\n * Logs all messages to the Console API.\n * @param {!Entry} entry the entry to log.\n */\nfunction consoleHandler(entry) {\n  if (typeof console === 'undefined' || !console) {\n    return\n  }\n\n  var timestamp = new Date(entry.timestamp)\n  var msg =\n    '[' +\n    timestamp.getUTCFullYear() +\n    '-' +\n    pad(timestamp.getUTCMonth() + 1) +\n    '-' +\n    pad(timestamp.getUTCDate()) +\n    'T' +\n    pad(timestamp.getUTCHours()) +\n    ':' +\n    pad(timestamp.getUTCMinutes()) +\n    ':' +\n    pad(timestamp.getUTCSeconds()) +\n    'Z] ' +\n    '[' +\n    entry.level.name +\n    '] ' +\n    entry.message\n\n  var level = entry.level.value\n  if (level >= Level.SEVERE.value) {\n    console.error(msg)\n  } else if (level >= Level.WARNING.value) {\n    console.warn(msg)\n  } else {\n    console.log(msg)\n  }\n}\n\n/**\n * Adds the console handler to the given logger. The console handler will log\n * all messages using the JavaScript Console API.\n *\n * @param {Logger=} opt_logger The logger to add the handler to; defaults\n *     to the root logger.\n */\nfunction addConsoleHandler(opt_logger) {\n  let logger = opt_logger || logManager.root_\n  logger.addHandler(consoleHandler)\n}\n\n/**\n * Removes the console log handler from the given logger.\n *\n * @param {Logger=} opt_logger The logger to remove the handler from; defaults\n *     to the root logger.\n * @see exports.addConsoleHandler\n */\nfunction removeConsoleHandler(opt_logger) {\n  let logger = opt_logger || logManager.root_\n  logger.removeHandler(consoleHandler)\n}\n\n/**\n * Installs the console log handler on the root logger.\n */\nfunction installConsoleHandler() {\n  addConsoleHandler(logManager.root_)\n}\n\n/**\n * Common log types.\n * @enum {string}\n */\nconst Type = {\n  /** Logs originating from the browser. */\n  BROWSER: 'browser',\n  /** Logs from a WebDriver client. */\n  CLIENT: 'client',\n  /** Logs from a WebDriver implementation. */\n  DRIVER: 'driver',\n  /** Logs related to performance. */\n  PERFORMANCE: 'performance',\n  /** Logs from the remote server. */\n  SERVER: 'server',\n}\n\n/**\n * Describes the log preferences for a WebDriver session.\n *\n * @final\n */\nclass Preferences {\n  constructor() {\n    /** @private {!Map<string, !Level>} */\n    this.prefs_ = new Map()\n  }\n\n  /**\n   * Sets the desired logging level for a particular log type.\n   * @param {(string|Type)} type The log type.\n   * @param {(!Level|string|number)} level The desired log level.\n   * @throws {TypeError} if `type` is not a `string`.\n   */\n  setLevel(type, level) {\n    if (typeof type !== 'string') {\n      throw TypeError('specified log type is not a string: ' + typeof type)\n    }\n    this.prefs_.set(type, level instanceof Level ? level : getLevel(level))\n  }\n\n  /**\n   * Converts this instance to its JSON representation.\n   * @return {!Object<string, string>} The JSON representation of this set of\n   *     preferences.\n   */\n  toJSON() {\n    let json = {}\n    for (let key of this.prefs_.keys()) {\n      json[key] = this.prefs_.get(key).name\n    }\n    return json\n  }\n}\n\n// PUBLIC API\n\nmodule.exports = {\n  Entry: Entry,\n  Level: Level,\n  LogManager: LogManager,\n  Logger: Logger,\n  Preferences: Preferences,\n  Type: Type,\n  addConsoleHandler: addConsoleHandler,\n  getLevel: getLevel,\n  getLogger: getLogger,\n  installConsoleHandler: installConsoleHandler,\n  removeConsoleHandler: removeConsoleHandler,\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/lib/logging.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/lib/network.js":
/*!********************************************************!*\
  !*** ./node_modules/selenium-webdriver/lib/network.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst network = __webpack_require__(/*! ../bidi/network */ \"(rsc)/./node_modules/selenium-webdriver/bidi/network.js\")\nconst { InterceptPhase } = __webpack_require__(/*! ../bidi/interceptPhase */ \"(rsc)/./node_modules/selenium-webdriver/bidi/interceptPhase.js\")\nconst { AddInterceptParameters } = __webpack_require__(/*! ../bidi/addInterceptParameters */ \"(rsc)/./node_modules/selenium-webdriver/bidi/addInterceptParameters.js\")\n\nclass Network {\n  #driver\n  #network\n  #callBackInterceptIdMap = new Map()\n\n  constructor(driver) {\n    this.#driver = driver\n  }\n\n  // This should be done in the constructor.\n  // But since it needs to call async methods we cannot do that in the constructor.\n  // We can have a separate async method that initialises the Script instance.\n  // However, that pattern does not allow chaining the methods as we would like the user to use it.\n  // Since it involves awaiting to get the instance and then another await to call the method.\n  // Using this allows the user to do this \"await driver.network.addAuthenticationHandler(callback)\"\n  async #init() {\n    if (this.#network !== undefined) {\n      return\n    }\n    this.#network = await network(this.#driver)\n  }\n\n  async addAuthenticationHandler(username, password) {\n    await this.#init()\n\n    const interceptId = await this.#network.addIntercept(new AddInterceptParameters(InterceptPhase.AUTH_REQUIRED))\n\n    const id = await this.#network.authRequired(async (event) => {\n      await this.#network.continueWithAuth(event.request.request, username, password)\n    })\n\n    this.#callBackInterceptIdMap.set(id, interceptId)\n    return id\n  }\n\n  async removeAuthenticationHandler(id) {\n    await this.#init()\n\n    const interceptId = this.#callBackInterceptIdMap.get(id)\n\n    await this.#network.removeIntercept(interceptId)\n    await this.#network.removeCallback(id)\n\n    this.#callBackInterceptIdMap.delete(id)\n  }\n\n  async clearAuthenticationHandlers() {\n    for (const [key, value] of this.#callBackInterceptIdMap.entries()) {\n      await this.#network.removeIntercept(value)\n      await this.#network.removeCallback(key)\n    }\n\n    this.#callBackInterceptIdMap.clear()\n  }\n}\n\nmodule.exports = Network\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc2VsZW5pdW0td2ViZHJpdmVyL2xpYi9uZXR3b3JrLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZ0JBQWdCLG1CQUFPLENBQUMsZ0ZBQWlCO0FBQ3pDLFFBQVEsaUJBQWlCLEVBQUUsbUJBQU8sQ0FBQyw4RkFBd0I7QUFDM0QsUUFBUSx5QkFBeUIsRUFBRSxtQkFBTyxDQUFDLDhHQUFnQzs7QUFFM0U7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2dvb2dsZS1zaGVldHMtc2VsZW5pdW0tYXV0b21hdGlvbi8uL25vZGVfbW9kdWxlcy9zZWxlbml1bS13ZWJkcml2ZXIvbGliL25ldHdvcmsuanM/ODU5YyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgU29mdHdhcmUgRnJlZWRvbSBDb25zZXJ2YW5jeSAoU0ZDKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIFNGQyBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5jb25zdCBuZXR3b3JrID0gcmVxdWlyZSgnLi4vYmlkaS9uZXR3b3JrJylcbmNvbnN0IHsgSW50ZXJjZXB0UGhhc2UgfSA9IHJlcXVpcmUoJy4uL2JpZGkvaW50ZXJjZXB0UGhhc2UnKVxuY29uc3QgeyBBZGRJbnRlcmNlcHRQYXJhbWV0ZXJzIH0gPSByZXF1aXJlKCcuLi9iaWRpL2FkZEludGVyY2VwdFBhcmFtZXRlcnMnKVxuXG5jbGFzcyBOZXR3b3JrIHtcbiAgI2RyaXZlclxuICAjbmV0d29ya1xuICAjY2FsbEJhY2tJbnRlcmNlcHRJZE1hcCA9IG5ldyBNYXAoKVxuXG4gIGNvbnN0cnVjdG9yKGRyaXZlcikge1xuICAgIHRoaXMuI2RyaXZlciA9IGRyaXZlclxuICB9XG5cbiAgLy8gVGhpcyBzaG91bGQgYmUgZG9uZSBpbiB0aGUgY29uc3RydWN0b3IuXG4gIC8vIEJ1dCBzaW5jZSBpdCBuZWVkcyB0byBjYWxsIGFzeW5jIG1ldGhvZHMgd2UgY2Fubm90IGRvIHRoYXQgaW4gdGhlIGNvbnN0cnVjdG9yLlxuICAvLyBXZSBjYW4gaGF2ZSBhIHNlcGFyYXRlIGFzeW5jIG1ldGhvZCB0aGF0IGluaXRpYWxpc2VzIHRoZSBTY3JpcHQgaW5zdGFuY2UuXG4gIC8vIEhvd2V2ZXIsIHRoYXQgcGF0dGVybiBkb2VzIG5vdCBhbGxvdyBjaGFpbmluZyB0aGUgbWV0aG9kcyBhcyB3ZSB3b3VsZCBsaWtlIHRoZSB1c2VyIHRvIHVzZSBpdC5cbiAgLy8gU2luY2UgaXQgaW52b2x2ZXMgYXdhaXRpbmcgdG8gZ2V0IHRoZSBpbnN0YW5jZSBhbmQgdGhlbiBhbm90aGVyIGF3YWl0IHRvIGNhbGwgdGhlIG1ldGhvZC5cbiAgLy8gVXNpbmcgdGhpcyBhbGxvd3MgdGhlIHVzZXIgdG8gZG8gdGhpcyBcImF3YWl0IGRyaXZlci5uZXR3b3JrLmFkZEF1dGhlbnRpY2F0aW9uSGFuZGxlcihjYWxsYmFjaylcIlxuICBhc3luYyAjaW5pdCgpIHtcbiAgICBpZiAodGhpcy4jbmV0d29yayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgdGhpcy4jbmV0d29yayA9IGF3YWl0IG5ldHdvcmsodGhpcy4jZHJpdmVyKVxuICB9XG5cbiAgYXN5bmMgYWRkQXV0aGVudGljYXRpb25IYW5kbGVyKHVzZXJuYW1lLCBwYXNzd29yZCkge1xuICAgIGF3YWl0IHRoaXMuI2luaXQoKVxuXG4gICAgY29uc3QgaW50ZXJjZXB0SWQgPSBhd2FpdCB0aGlzLiNuZXR3b3JrLmFkZEludGVyY2VwdChuZXcgQWRkSW50ZXJjZXB0UGFyYW1ldGVycyhJbnRlcmNlcHRQaGFzZS5BVVRIX1JFUVVJUkVEKSlcblxuICAgIGNvbnN0IGlkID0gYXdhaXQgdGhpcy4jbmV0d29yay5hdXRoUmVxdWlyZWQoYXN5bmMgKGV2ZW50KSA9PiB7XG4gICAgICBhd2FpdCB0aGlzLiNuZXR3b3JrLmNvbnRpbnVlV2l0aEF1dGgoZXZlbnQucmVxdWVzdC5yZXF1ZXN0LCB1c2VybmFtZSwgcGFzc3dvcmQpXG4gICAgfSlcblxuICAgIHRoaXMuI2NhbGxCYWNrSW50ZXJjZXB0SWRNYXAuc2V0KGlkLCBpbnRlcmNlcHRJZClcbiAgICByZXR1cm4gaWRcbiAgfVxuXG4gIGFzeW5jIHJlbW92ZUF1dGhlbnRpY2F0aW9uSGFuZGxlcihpZCkge1xuICAgIGF3YWl0IHRoaXMuI2luaXQoKVxuXG4gICAgY29uc3QgaW50ZXJjZXB0SWQgPSB0aGlzLiNjYWxsQmFja0ludGVyY2VwdElkTWFwLmdldChpZClcblxuICAgIGF3YWl0IHRoaXMuI25ldHdvcmsucmVtb3ZlSW50ZXJjZXB0KGludGVyY2VwdElkKVxuICAgIGF3YWl0IHRoaXMuI25ldHdvcmsucmVtb3ZlQ2FsbGJhY2soaWQpXG5cbiAgICB0aGlzLiNjYWxsQmFja0ludGVyY2VwdElkTWFwLmRlbGV0ZShpZClcbiAgfVxuXG4gIGFzeW5jIGNsZWFyQXV0aGVudGljYXRpb25IYW5kbGVycygpIHtcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiB0aGlzLiNjYWxsQmFja0ludGVyY2VwdElkTWFwLmVudHJpZXMoKSkge1xuICAgICAgYXdhaXQgdGhpcy4jbmV0d29yay5yZW1vdmVJbnRlcmNlcHQodmFsdWUpXG4gICAgICBhd2FpdCB0aGlzLiNuZXR3b3JrLnJlbW92ZUNhbGxiYWNrKGtleSlcbiAgICB9XG5cbiAgICB0aGlzLiNjYWxsQmFja0ludGVyY2VwdElkTWFwLmNsZWFyKClcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE5ldHdvcmtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/lib/network.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/lib/pinnedScript.js":
/*!*************************************************************!*\
  !*** ./node_modules/selenium-webdriver/lib/pinnedScript.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst crypto = __webpack_require__(/*! node:crypto */ \"node:crypto\")\n\nclass PinnedScript {\n  constructor(script) {\n    this.scriptSource_ = script\n    // eslint-disable-next-line\n    this.scriptHandle_ = crypto.randomUUID().replace(/-/gi, '')\n  }\n\n  get handle() {\n    return this.scriptHandle_\n  }\n\n  get source() {\n    return this.scriptSource_\n  }\n\n  get scriptId() {\n    return this.scriptId_\n  }\n\n  set scriptId(id) {\n    this.scriptId_ = id\n  }\n\n  creationScript() {\n    return `function __webdriver_${this.scriptHandle_}(arguments) { ${this.scriptSource_} }`\n  }\n\n  executionScript() {\n    return `return __webdriver_${this.scriptHandle_}(arguments)`\n  }\n\n  removalScript() {\n    return `__webdriver_${this.scriptHandle_} = undefined`\n  }\n}\n\n// PUBLIC API\n\nmodule.exports = {\n  PinnedScript,\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc2VsZW5pdW0td2ViZHJpdmVyL2xpYi9waW5uZWRTY3JpcHQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxlQUFlLG1CQUFPLENBQUMsZ0NBQWE7O0FBRXBDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtQ0FBbUMsbUJBQW1CLGNBQWMsRUFBRSxxQkFBcUI7QUFDM0Y7O0FBRUE7QUFDQSxpQ0FBaUMsbUJBQW1CO0FBQ3BEOztBQUVBO0FBQ0EsMEJBQTBCLG9CQUFvQjtBQUM5QztBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2dvb2dsZS1zaGVldHMtc2VsZW5pdW0tYXV0b21hdGlvbi8uL25vZGVfbW9kdWxlcy9zZWxlbml1bS13ZWJkcml2ZXIvbGliL3Bpbm5lZFNjcmlwdC5qcz82ZTMxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBTb2Z0d2FyZSBGcmVlZG9tIENvbnNlcnZhbmN5IChTRkMpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgU0ZDIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmNvbnN0IGNyeXB0byA9IHJlcXVpcmUoJ25vZGU6Y3J5cHRvJylcblxuY2xhc3MgUGlubmVkU2NyaXB0IHtcbiAgY29uc3RydWN0b3Ioc2NyaXB0KSB7XG4gICAgdGhpcy5zY3JpcHRTb3VyY2VfID0gc2NyaXB0XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgdGhpcy5zY3JpcHRIYW5kbGVfID0gY3J5cHRvLnJhbmRvbVVVSUQoKS5yZXBsYWNlKC8tL2dpLCAnJylcbiAgfVxuXG4gIGdldCBoYW5kbGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2NyaXB0SGFuZGxlX1xuICB9XG5cbiAgZ2V0IHNvdXJjZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zY3JpcHRTb3VyY2VfXG4gIH1cblxuICBnZXQgc2NyaXB0SWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2NyaXB0SWRfXG4gIH1cblxuICBzZXQgc2NyaXB0SWQoaWQpIHtcbiAgICB0aGlzLnNjcmlwdElkXyA9IGlkXG4gIH1cblxuICBjcmVhdGlvblNjcmlwdCgpIHtcbiAgICByZXR1cm4gYGZ1bmN0aW9uIF9fd2ViZHJpdmVyXyR7dGhpcy5zY3JpcHRIYW5kbGVffShhcmd1bWVudHMpIHsgJHt0aGlzLnNjcmlwdFNvdXJjZV99IH1gXG4gIH1cblxuICBleGVjdXRpb25TY3JpcHQoKSB7XG4gICAgcmV0dXJuIGByZXR1cm4gX193ZWJkcml2ZXJfJHt0aGlzLnNjcmlwdEhhbmRsZV99KGFyZ3VtZW50cylgXG4gIH1cblxuICByZW1vdmFsU2NyaXB0KCkge1xuICAgIHJldHVybiBgX193ZWJkcml2ZXJfJHt0aGlzLnNjcmlwdEhhbmRsZV99ID0gdW5kZWZpbmVkYFxuICB9XG59XG5cbi8vIFBVQkxJQyBBUElcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFBpbm5lZFNjcmlwdCxcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/lib/pinnedScript.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/lib/promise.js":
/*!********************************************************!*\
  !*** ./node_modules/selenium-webdriver/lib/promise.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Defines a handful of utility functions to simplify working\n * with promises.\n */\n\n\n\nconst { isObject, isPromise } = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/selenium-webdriver/lib/util.js\")\n\n/**\n * Creates a promise that will be resolved at a set time in the future.\n * @param {number} ms The amount of time, in milliseconds, to wait before\n *     resolving the promise.\n * @return {!Promise<void>} The promise.\n */\nfunction delayed(ms) {\n  return new Promise((resolve) => setTimeout(resolve, ms))\n}\n\n/**\n * Wraps a function that expects a node-style callback as its final\n * argument. This callback expects two arguments: an error value (which will be\n * null if the call succeeded), and the success value as the second argument.\n * The callback will the resolve or reject the returned promise, based on its\n * arguments.\n * @param {!Function} fn The function to wrap.\n * @param {...?} args The arguments to apply to the function, excluding the\n *     final callback.\n * @return {!Thenable} A promise that will be resolved with the\n *     result of the provided function's callback.\n */\nfunction checkedNodeCall(fn, ...args) {\n  return new Promise(function (fulfill, reject) {\n    try {\n      fn(...args, function (error, value) {\n        error ? reject(error) : fulfill(value)\n      })\n    } catch (ex) {\n      reject(ex)\n    }\n  })\n}\n\n/**\n * Registers a listener to invoke when a promise is resolved, regardless\n * of whether the promise's value was successfully computed. This function\n * is synonymous with the {@code finally} clause in a synchronous API:\n *\n *     // Synchronous API:\n *     try {\n *       doSynchronousWork();\n *     } finally {\n *       cleanUp();\n *     }\n *\n *     // Asynchronous promise API:\n *     doAsynchronousWork().finally(cleanUp);\n *\n * __Note:__ similar to the {@code finally} clause, if the registered\n * callback returns a rejected promise or throws an error, it will silently\n * replace the rejection error (if any) from this promise:\n *\n *     try {\n *       throw Error('one');\n *     } finally {\n *       throw Error('two');  // Hides Error: one\n *     }\n *\n *     let p = Promise.reject(Error('one'));\n *     promise.finally(p, function() {\n *       throw Error('two');  // Hides Error: one\n *     });\n *\n * @param {!IThenable<?>} promise The promise to add the listener to.\n * @param {function(): (R|IThenable<R>)} callback The function to call when\n *     the promise is resolved.\n * @return {!Promise<R>} A promise that will be resolved with the callback\n *     result.\n * @template R\n */\nasync function thenFinally(promise, callback) {\n  try {\n    await Promise.resolve(promise)\n    return callback()\n  } catch (e) {\n    await callback()\n    throw e\n  }\n}\n\n/**\n * Calls a function for each element in an array and inserts the result into a\n * new array, which is used as the fulfillment value of the promise returned\n * by this function.\n *\n * If the return value of the mapping function is a promise, this function\n * will wait for it to be fulfilled before inserting it into the new array.\n *\n * If the mapping function throws or returns a rejected promise, the\n * promise returned by this function will be rejected with the same reason.\n * Only the first failure will be reported; all subsequent errors will be\n * silently ignored.\n *\n * @param {!(Array<TYPE>|IThenable<!Array<TYPE>>)} array The array to iterate\n *     over, or a promise that will resolve to said array.\n * @param {function(this: SELF, TYPE, number, !Array<TYPE>): ?} fn The\n *     function to call for each element in the array. This function should\n *     expect three arguments (the element, the index, and the array itself.\n * @param {SELF=} self The object to be used as the value of 'this' within `fn`.\n * @template TYPE, SELF\n */\nasync function map(array, fn, self = undefined) {\n  const v = await Promise.resolve(array)\n  if (!Array.isArray(v)) {\n    throw TypeError('not an array')\n  }\n\n  const arr = /** @type {!Array} */ (v)\n  const values = []\n\n  for (const [index, item] of arr.entries()) {\n    values.push(await Promise.resolve(fn.call(self, item, index, arr)))\n  }\n\n  return values\n}\n\n/**\n * Calls a function for each element in an array, and if the function returns\n * true adds the element to a new array.\n *\n * If the return value of the filter function is a promise, this function\n * will wait for it to be fulfilled before determining whether to insert the\n * element into the new array.\n *\n * If the filter function throws or returns a rejected promise, the promise\n * returned by this function will be rejected with the same reason. Only the\n * first failure will be reported; all subsequent errors will be silently\n * ignored.\n *\n * @param {!(Array<TYPE>|IThenable<!Array<TYPE>>)} array The array to iterate\n *     over, or a promise that will resolve to said array.\n * @param {function(this: SELF, TYPE, number, !Array<TYPE>): (\n *             boolean|IThenable<boolean>)} fn The function\n *     to call for each element in the array.\n * @param {SELF=} self The object to be used as the value of 'this' within `fn`.\n * @template TYPE, SELF\n */\nasync function filter(array, fn, self = undefined) {\n  const v = await Promise.resolve(array)\n  if (!Array.isArray(v)) {\n    throw TypeError('not an array')\n  }\n\n  const arr = /** @type {!Array} */ (v)\n  const values = []\n\n  for (const [index, item] of arr.entries()) {\n    const isConditionTrue = await Promise.resolve(fn.call(self, item, index, arr))\n    if (isConditionTrue) {\n      values.push(item)\n    }\n  }\n\n  return values\n}\n\n/**\n * Returns a promise that will be resolved with the input value in a\n * fully-resolved state. If the value is an array, each element will be fully\n * resolved. Likewise, if the value is an object, all keys will be fully\n * resolved. In both cases, all nested arrays and objects will also be\n * fully resolved.  All fields are resolved in place; the returned promise will\n * resolve on {@code value} and not a copy.\n *\n * Warning: This function makes no checks against objects that contain\n * cyclical references:\n *\n *     var value = {};\n *     value['self'] = value;\n *     promise.fullyResolved(value);  // Stack overflow.\n *\n * @param {*} value The value to fully resolve.\n * @return {!Thenable} A promise for a fully resolved version\n *     of the input value.\n */\nasync function fullyResolved(value) {\n  value = await Promise.resolve(value)\n  if (Array.isArray(value)) {\n    return fullyResolveKeys(/** @type {!Array} */ (value))\n  }\n\n  if (isObject(value)) {\n    return fullyResolveKeys(/** @type {!Object} */ (value))\n  }\n\n  if (typeof value === 'function') {\n    return fullyResolveKeys(/** @type {!Object} */ (value))\n  }\n\n  return value\n}\n\n/**\n * @param {!(Array|Object)} obj the object to resolve.\n * @return {!Thenable} A promise that will be resolved with the\n *     input object once all of its values have been fully resolved.\n */\nasync function fullyResolveKeys(obj) {\n  const isArray = Array.isArray(obj)\n  const numKeys = isArray ? obj.length : Object.keys(obj).length\n\n  if (!numKeys) {\n    return obj\n  }\n\n  async function forEachProperty(obj, fn) {\n    for (let key in obj) {\n      await fn(obj[key], key)\n    }\n  }\n\n  async function forEachElement(arr, fn) {\n    for (let i = 0; i < arr.length; i++) {\n      await fn(arr[i], i)\n    }\n  }\n\n  const forEachKey = isArray ? forEachElement : forEachProperty\n  await forEachKey(obj, async function (partialValue, key) {\n    if (!Array.isArray(partialValue) && (!partialValue || typeof partialValue !== 'object')) {\n      return\n    }\n    obj[key] = await fullyResolved(partialValue)\n  })\n  return obj\n}\n\n// PUBLIC API\n\nmodule.exports = {\n  checkedNodeCall,\n  delayed,\n  filter,\n  finally: thenFinally,\n  fullyResolved,\n  isPromise,\n  map,\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/lib/promise.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/lib/script.js":
/*!*******************************************************!*\
  !*** ./node_modules/selenium-webdriver/lib/script.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst logInspector = __webpack_require__(/*! ../bidi/logInspector */ \"(rsc)/./node_modules/selenium-webdriver/bidi/logInspector.js\")\nconst scriptManager = __webpack_require__(/*! ../bidi//scriptManager */ \"(rsc)/./node_modules/selenium-webdriver/bidi/scriptManager.js\")\nconst { LocalValue, ChannelValue } = __webpack_require__(/*! ../bidi/protocolValue */ \"(rsc)/./node_modules/selenium-webdriver/bidi/protocolValue.js\")\nconst fs = __webpack_require__(/*! node:fs */ \"node:fs\")\nconst path = __webpack_require__(/*! node:path */ \"node:path\")\nconst by = __webpack_require__(/*! ./by */ \"(rsc)/./node_modules/selenium-webdriver/lib/by.js\")\n\nclass Script {\n  #driver\n  #logInspector\n  #script\n\n  constructor(driver) {\n    this.#driver = driver\n  }\n\n  // This should be done in the constructor.\n  // But since it needs to call async methods we cannot do that in the constructor.\n  // We can have a separate async method that initialises the Script instance.\n  // However, that pattern does not allow chaining the methods as we would like the user to use it.\n  // Since it involves awaiting to get the instance and then another await to call the method.\n  // Using this allows the user to do this \"await driver.script().addJavaScriptErrorHandler(callback)\"\n  async #init() {\n    if (this.#logInspector !== undefined) {\n      return\n    }\n    this.#logInspector = await logInspector(this.#driver)\n  }\n\n  async #initScript() {\n    if (this.#script !== undefined) {\n      return\n    }\n    this.#script = await scriptManager([], this.#driver)\n  }\n\n  async addJavaScriptErrorHandler(callback) {\n    await this.#init()\n    return await this.#logInspector.onJavascriptException(callback)\n  }\n\n  async removeJavaScriptErrorHandler(id) {\n    await this.#init()\n    await this.#logInspector.removeCallback(id)\n  }\n\n  async addConsoleMessageHandler(callback) {\n    await this.#init()\n    return this.#logInspector.onConsoleEntry(callback)\n  }\n\n  async removeConsoleMessageHandler(id) {\n    await this.#init()\n\n    await this.#logInspector.removeCallback(id)\n  }\n\n  async addDomMutationHandler(callback) {\n    await this.#initScript()\n\n    let argumentValues = []\n    let value = LocalValue.createChannelValue(new ChannelValue('channel_name'))\n    argumentValues.push(value)\n\n    const filePath = path.join(__dirname, 'atoms', 'bidi-mutation-listener.js')\n\n    let mutationListener = fs.readFileSync(filePath, 'utf-8').toString()\n    await this.#script.addPreloadScript(mutationListener, argumentValues)\n\n    let id = await this.#script.onMessage(async (message) => {\n      let payload = JSON.parse(message['data']['value'])\n      let elements = await this.#driver.findElements({\n        css: '*[data-__webdriver_id=' + by.escapeCss(payload['target']) + ']',\n      })\n\n      if (elements.length === 0) {\n        return\n      }\n\n      let event = {\n        element: elements[0],\n        attribute_name: payload['name'],\n        current_value: payload['value'],\n        old_value: payload['oldValue'],\n      }\n      callback(event)\n    })\n\n    return id\n  }\n\n  async removeDomMutationHandler(id) {\n    await this.#initScript()\n\n    await this.#script.removeCallback(id)\n  }\n\n  async pin(script) {\n    await this.#initScript()\n    return await this.#script.addPreloadScript(script)\n  }\n\n  async unpin(id) {\n    await this.#initScript()\n    await this.#script.removePreloadScript(id)\n  }\n\n  async execute(script, ...args) {\n    await this.#initScript()\n\n    const browsingContextId = await this.#driver.getWindowHandle()\n\n    const argumentList = []\n\n    args.forEach((arg) => {\n      argumentList.push(LocalValue.getArgument(arg))\n    })\n\n    const response = await this.#script.callFunctionInBrowsingContext(browsingContextId, script, true, argumentList)\n\n    return response.result\n  }\n}\n\nmodule.exports = Script\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc2VsZW5pdW0td2ViZHJpdmVyL2xpYi9zY3JpcHQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxxQkFBcUIsbUJBQU8sQ0FBQywwRkFBc0I7QUFDbkQsc0JBQXNCLG1CQUFPLENBQUMsNkZBQXdCO0FBQ3RELFFBQVEsMkJBQTJCLEVBQUUsbUJBQU8sQ0FBQyw0RkFBdUI7QUFDcEUsV0FBVyxtQkFBTyxDQUFDLHdCQUFTO0FBQzVCLGFBQWEsbUJBQU8sQ0FBQyw0QkFBVztBQUNoQyxXQUFXLG1CQUFPLENBQUMsK0RBQU07O0FBRXpCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEtBQUs7O0FBRUw7O0FBRUE7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ29vZ2xlLXNoZWV0cy1zZWxlbml1bS1hdXRvbWF0aW9uLy4vbm9kZV9tb2R1bGVzL3NlbGVuaXVtLXdlYmRyaXZlci9saWIvc2NyaXB0LmpzPzM3MGIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIFNvZnR3YXJlIEZyZWVkb20gQ29uc2VydmFuY3kgKFNGQykgdW5kZXIgb25lXG4vLyBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbi8vIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4vLyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBTRkMgbGljZW5zZXMgdGhpcyBmaWxlXG4vLyB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4vLyBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbi8vIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbi8vIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4vLyBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuLy8gS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4vLyBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4vLyB1bmRlciB0aGUgTGljZW5zZS5cblxuY29uc3QgbG9nSW5zcGVjdG9yID0gcmVxdWlyZSgnLi4vYmlkaS9sb2dJbnNwZWN0b3InKVxuY29uc3Qgc2NyaXB0TWFuYWdlciA9IHJlcXVpcmUoJy4uL2JpZGkvL3NjcmlwdE1hbmFnZXInKVxuY29uc3QgeyBMb2NhbFZhbHVlLCBDaGFubmVsVmFsdWUgfSA9IHJlcXVpcmUoJy4uL2JpZGkvcHJvdG9jb2xWYWx1ZScpXG5jb25zdCBmcyA9IHJlcXVpcmUoJ25vZGU6ZnMnKVxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ25vZGU6cGF0aCcpXG5jb25zdCBieSA9IHJlcXVpcmUoJy4vYnknKVxuXG5jbGFzcyBTY3JpcHQge1xuICAjZHJpdmVyXG4gICNsb2dJbnNwZWN0b3JcbiAgI3NjcmlwdFxuXG4gIGNvbnN0cnVjdG9yKGRyaXZlcikge1xuICAgIHRoaXMuI2RyaXZlciA9IGRyaXZlclxuICB9XG5cbiAgLy8gVGhpcyBzaG91bGQgYmUgZG9uZSBpbiB0aGUgY29uc3RydWN0b3IuXG4gIC8vIEJ1dCBzaW5jZSBpdCBuZWVkcyB0byBjYWxsIGFzeW5jIG1ldGhvZHMgd2UgY2Fubm90IGRvIHRoYXQgaW4gdGhlIGNvbnN0cnVjdG9yLlxuICAvLyBXZSBjYW4gaGF2ZSBhIHNlcGFyYXRlIGFzeW5jIG1ldGhvZCB0aGF0IGluaXRpYWxpc2VzIHRoZSBTY3JpcHQgaW5zdGFuY2UuXG4gIC8vIEhvd2V2ZXIsIHRoYXQgcGF0dGVybiBkb2VzIG5vdCBhbGxvdyBjaGFpbmluZyB0aGUgbWV0aG9kcyBhcyB3ZSB3b3VsZCBsaWtlIHRoZSB1c2VyIHRvIHVzZSBpdC5cbiAgLy8gU2luY2UgaXQgaW52b2x2ZXMgYXdhaXRpbmcgdG8gZ2V0IHRoZSBpbnN0YW5jZSBhbmQgdGhlbiBhbm90aGVyIGF3YWl0IHRvIGNhbGwgdGhlIG1ldGhvZC5cbiAgLy8gVXNpbmcgdGhpcyBhbGxvd3MgdGhlIHVzZXIgdG8gZG8gdGhpcyBcImF3YWl0IGRyaXZlci5zY3JpcHQoKS5hZGRKYXZhU2NyaXB0RXJyb3JIYW5kbGVyKGNhbGxiYWNrKVwiXG4gIGFzeW5jICNpbml0KCkge1xuICAgIGlmICh0aGlzLiNsb2dJbnNwZWN0b3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHRoaXMuI2xvZ0luc3BlY3RvciA9IGF3YWl0IGxvZ0luc3BlY3Rvcih0aGlzLiNkcml2ZXIpXG4gIH1cblxuICBhc3luYyAjaW5pdFNjcmlwdCgpIHtcbiAgICBpZiAodGhpcy4jc2NyaXB0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICB0aGlzLiNzY3JpcHQgPSBhd2FpdCBzY3JpcHRNYW5hZ2VyKFtdLCB0aGlzLiNkcml2ZXIpXG4gIH1cblxuICBhc3luYyBhZGRKYXZhU2NyaXB0RXJyb3JIYW5kbGVyKGNhbGxiYWNrKSB7XG4gICAgYXdhaXQgdGhpcy4jaW5pdCgpXG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuI2xvZ0luc3BlY3Rvci5vbkphdmFzY3JpcHRFeGNlcHRpb24oY2FsbGJhY2spXG4gIH1cblxuICBhc3luYyByZW1vdmVKYXZhU2NyaXB0RXJyb3JIYW5kbGVyKGlkKSB7XG4gICAgYXdhaXQgdGhpcy4jaW5pdCgpXG4gICAgYXdhaXQgdGhpcy4jbG9nSW5zcGVjdG9yLnJlbW92ZUNhbGxiYWNrKGlkKVxuICB9XG5cbiAgYXN5bmMgYWRkQ29uc29sZU1lc3NhZ2VIYW5kbGVyKGNhbGxiYWNrKSB7XG4gICAgYXdhaXQgdGhpcy4jaW5pdCgpXG4gICAgcmV0dXJuIHRoaXMuI2xvZ0luc3BlY3Rvci5vbkNvbnNvbGVFbnRyeShjYWxsYmFjaylcbiAgfVxuXG4gIGFzeW5jIHJlbW92ZUNvbnNvbGVNZXNzYWdlSGFuZGxlcihpZCkge1xuICAgIGF3YWl0IHRoaXMuI2luaXQoKVxuXG4gICAgYXdhaXQgdGhpcy4jbG9nSW5zcGVjdG9yLnJlbW92ZUNhbGxiYWNrKGlkKVxuICB9XG5cbiAgYXN5bmMgYWRkRG9tTXV0YXRpb25IYW5kbGVyKGNhbGxiYWNrKSB7XG4gICAgYXdhaXQgdGhpcy4jaW5pdFNjcmlwdCgpXG5cbiAgICBsZXQgYXJndW1lbnRWYWx1ZXMgPSBbXVxuICAgIGxldCB2YWx1ZSA9IExvY2FsVmFsdWUuY3JlYXRlQ2hhbm5lbFZhbHVlKG5ldyBDaGFubmVsVmFsdWUoJ2NoYW5uZWxfbmFtZScpKVxuICAgIGFyZ3VtZW50VmFsdWVzLnB1c2godmFsdWUpXG5cbiAgICBjb25zdCBmaWxlUGF0aCA9IHBhdGguam9pbihfX2Rpcm5hbWUsICdhdG9tcycsICdiaWRpLW11dGF0aW9uLWxpc3RlbmVyLmpzJylcblxuICAgIGxldCBtdXRhdGlvbkxpc3RlbmVyID0gZnMucmVhZEZpbGVTeW5jKGZpbGVQYXRoLCAndXRmLTgnKS50b1N0cmluZygpXG4gICAgYXdhaXQgdGhpcy4jc2NyaXB0LmFkZFByZWxvYWRTY3JpcHQobXV0YXRpb25MaXN0ZW5lciwgYXJndW1lbnRWYWx1ZXMpXG5cbiAgICBsZXQgaWQgPSBhd2FpdCB0aGlzLiNzY3JpcHQub25NZXNzYWdlKGFzeW5jIChtZXNzYWdlKSA9PiB7XG4gICAgICBsZXQgcGF5bG9hZCA9IEpTT04ucGFyc2UobWVzc2FnZVsnZGF0YSddWyd2YWx1ZSddKVxuICAgICAgbGV0IGVsZW1lbnRzID0gYXdhaXQgdGhpcy4jZHJpdmVyLmZpbmRFbGVtZW50cyh7XG4gICAgICAgIGNzczogJypbZGF0YS1fX3dlYmRyaXZlcl9pZD0nICsgYnkuZXNjYXBlQ3NzKHBheWxvYWRbJ3RhcmdldCddKSArICddJyxcbiAgICAgIH0pXG5cbiAgICAgIGlmIChlbGVtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGxldCBldmVudCA9IHtcbiAgICAgICAgZWxlbWVudDogZWxlbWVudHNbMF0sXG4gICAgICAgIGF0dHJpYnV0ZV9uYW1lOiBwYXlsb2FkWyduYW1lJ10sXG4gICAgICAgIGN1cnJlbnRfdmFsdWU6IHBheWxvYWRbJ3ZhbHVlJ10sXG4gICAgICAgIG9sZF92YWx1ZTogcGF5bG9hZFsnb2xkVmFsdWUnXSxcbiAgICAgIH1cbiAgICAgIGNhbGxiYWNrKGV2ZW50KVxuICAgIH0pXG5cbiAgICByZXR1cm4gaWRcbiAgfVxuXG4gIGFzeW5jIHJlbW92ZURvbU11dGF0aW9uSGFuZGxlcihpZCkge1xuICAgIGF3YWl0IHRoaXMuI2luaXRTY3JpcHQoKVxuXG4gICAgYXdhaXQgdGhpcy4jc2NyaXB0LnJlbW92ZUNhbGxiYWNrKGlkKVxuICB9XG5cbiAgYXN5bmMgcGluKHNjcmlwdCkge1xuICAgIGF3YWl0IHRoaXMuI2luaXRTY3JpcHQoKVxuICAgIHJldHVybiBhd2FpdCB0aGlzLiNzY3JpcHQuYWRkUHJlbG9hZFNjcmlwdChzY3JpcHQpXG4gIH1cblxuICBhc3luYyB1bnBpbihpZCkge1xuICAgIGF3YWl0IHRoaXMuI2luaXRTY3JpcHQoKVxuICAgIGF3YWl0IHRoaXMuI3NjcmlwdC5yZW1vdmVQcmVsb2FkU2NyaXB0KGlkKVxuICB9XG5cbiAgYXN5bmMgZXhlY3V0ZShzY3JpcHQsIC4uLmFyZ3MpIHtcbiAgICBhd2FpdCB0aGlzLiNpbml0U2NyaXB0KClcblxuICAgIGNvbnN0IGJyb3dzaW5nQ29udGV4dElkID0gYXdhaXQgdGhpcy4jZHJpdmVyLmdldFdpbmRvd0hhbmRsZSgpXG5cbiAgICBjb25zdCBhcmd1bWVudExpc3QgPSBbXVxuXG4gICAgYXJncy5mb3JFYWNoKChhcmcpID0+IHtcbiAgICAgIGFyZ3VtZW50TGlzdC5wdXNoKExvY2FsVmFsdWUuZ2V0QXJndW1lbnQoYXJnKSlcbiAgICB9KVxuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLiNzY3JpcHQuY2FsbEZ1bmN0aW9uSW5Ccm93c2luZ0NvbnRleHQoYnJvd3NpbmdDb250ZXh0SWQsIHNjcmlwdCwgdHJ1ZSwgYXJndW1lbnRMaXN0KVxuXG4gICAgcmV0dXJuIHJlc3BvbnNlLnJlc3VsdFxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2NyaXB0XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/lib/script.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/lib/select.js":
/*!*******************************************************!*\
  !*** ./node_modules/selenium-webdriver/lib/select.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/*\n * Licensed to the Software Freedom Conservancy (SFC) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The SFC licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n\n\nconst { By } = __webpack_require__(/*! ./by */ \"(rsc)/./node_modules/selenium-webdriver/lib/by.js\")\nconst error = __webpack_require__(/*! ./error */ \"(rsc)/./node_modules/selenium-webdriver/lib/error.js\")\n\n/**\n * ISelect interface makes a protocol for all kind of select elements (standard html and custom\n * model)\n *\n * @interface\n */\n// eslint-disable-next-line no-unused-vars\nclass ISelect {\n  /**\n   * @return {!Promise<boolean>} Whether this select element supports selecting multiple options at the same time? This\n   * is done by checking the value of the \"multiple\" attribute.\n   */\n  isMultiple() {}\n\n  /**\n   * @return {!Promise<!Array<!WebElement>>} All options belonging to this select tag\n   */\n  getOptions() {}\n\n  /**\n   * @return {!Promise<!Array<!WebElement>>} All selected options belonging to this select tag\n   */\n  getAllSelectedOptions() {}\n\n  /**\n   * @return {!Promise<!WebElement>} The first selected option in this select tag (or the currently selected option in a\n   * normal select)\n   */\n  getFirstSelectedOption() {}\n\n  /**\n   * Select all options that display text matching the argument. That is, when given \"Bar\" this\n   * would select an option like:\n   *\n   * &lt;option value=\"foo\"&gt;Bar&lt;/option&gt;\n   *\n   * @param {string} text The visible text to match against\n   * @return {Promise<void>}\n   */\n  selectByVisibleText(text) {} // eslint-disable-line\n\n  /**\n   * Select all options that have a value matching the argument. That is, when given \"foo\" this\n   * would select an option like:\n   *\n   * &lt;option value=\"foo\"&gt;Bar&lt;/option&gt;\n   *\n   * @param {string} value The value to match against\n   * @return {Promise<void>}\n   */\n  selectByValue(value) {} // eslint-disable-line\n\n  /**\n   * Select the option at the given index. This is done by examining the \"index\" attribute of an\n   * element, and not merely by counting.\n   *\n   * @param {Number} index The option at this index will be selected\n   * @return {Promise<void>}\n   */\n  selectByIndex(index) {} // eslint-disable-line\n\n  /**\n   * Clear all selected entries. This is only valid when the SELECT supports multiple selections.\n   *\n   * @return {Promise<void>}\n   */\n  deselectAll() {}\n\n  /**\n   * Deselect all options that display text matching the argument. That is, when given \"Bar\" this\n   * would deselect an option like:\n   *\n   * &lt;option value=\"foo\"&gt;Bar&lt;/option&gt;\n   *\n   * @param {string} text The visible text to match against\n   * @return {Promise<void>}\n   */\n  deselectByVisibleText(text) {} // eslint-disable-line\n\n  /**\n   * Deselect all options that have a value matching the argument. That is, when given \"foo\" this\n   * would deselect an option like:\n   *\n   * @param {string} value The value to match against\n   * @return {Promise<void>}\n   */\n  deselectByValue(value) {} // eslint-disable-line\n\n  /**\n   * Deselect the option at the given index. This is done by examining the \"index\" attribute of an\n   * element, and not merely by counting.\n   *\n   * @param {Number} index The option at this index will be deselected\n   * @return {Promise<void>}\n   */\n  deselectByIndex(index) {} // eslint-disable-line\n}\n\n/**\n * @implements ISelect\n */\nclass Select {\n  /**\n   * Create an Select Element\n   * @param {WebElement} element Select WebElement.\n   */\n  constructor(element) {\n    if (element === null) {\n      throw new Error(`Element must not be null. Please provide a valid <select> element.`)\n    }\n\n    this.element = element\n\n    this.element.getAttribute('tagName').then(function (tagName) {\n      if (tagName.toLowerCase() !== 'select') {\n        throw new Error(`Select only works on <select> elements`)\n      }\n    })\n\n    this.element.getAttribute('multiple').then((multiple) => {\n      this.multiple = multiple !== null && multiple !== 'false'\n    })\n  }\n\n  /**\n   *\n   * Select option with specified index.\n   *\n   * <example>\n   <select id=\"selectbox\">\n   <option value=\"1\">Option 1</option>\n   <option value=\"2\">Option 2</option>\n   <option value=\"3\">Option 3</option>\n   </select>\n   const selectBox = await driver.findElement(By.id(\"selectbox\"));\n   await selectObject.selectByIndex(1);\n   * </example>\n   *\n   * @param index\n   */\n  async selectByIndex(index) {\n    if (index < 0) {\n      throw new Error('Index needs to be 0 or any other positive number')\n    }\n\n    let options = await this.element.findElements(By.tagName('option'))\n\n    if (options.length === 0) {\n      throw new Error(\"Select element doesn't contain any option element\")\n    }\n\n    if (options.length - 1 < index) {\n      throw new Error(\n        `Option with index \"${index}\" not found. Select element only contains ${options.length - 1} option elements`,\n      )\n    }\n\n    for (let option of options) {\n      if ((await option.getAttribute('index')) === index.toString()) {\n        await this.setSelected(option)\n      }\n    }\n  }\n\n  /**\n   *\n   * Select option by specific value.\n   *\n   * <example>\n   <select id=\"selectbox\">\n   <option value=\"1\">Option 1</option>\n   <option value=\"2\">Option 2</option>\n   <option value=\"3\">Option 3</option>\n   </select>\n   const selectBox = await driver.findElement(By.id(\"selectbox\"));\n   await selectObject.selectByVisibleText(\"Option 2\");\n   * </example>\n   *\n   *\n   * @param {string} value value of option element to be selected\n   */\n  async selectByValue(value) {\n    let matched = false\n    let isMulti = await this.isMultiple()\n\n    let options = await this.element.findElements(By.xpath('.//option[@value = ' + escapeQuotes(value) + ']'))\n\n    for (let option of options) {\n      await this.setSelected(option)\n\n      if (!isMulti) {\n        return\n      }\n      matched = true\n    }\n\n    if (!matched) {\n      throw new Error(`Cannot locate option with value: ${value}`)\n    }\n  }\n\n  /**\n   *\n   * Select option with displayed text matching the argument.\n   *\n   * <example>\n   <select id=\"selectbox\">\n   <option value=\"1\">Option 1</option>\n   <option value=\"2\">Option 2</option>\n   <option value=\"3\">Option 3</option>\n   </select>\n   const selectBox = await driver.findElement(By.id(\"selectbox\"));\n   await selectObject.selectByVisibleText(\"Option 2\");\n   * </example>\n   *\n   * @param {String|Number} text       text of option element to get selected\n   *\n   */\n  async selectByVisibleText(text) {\n    text = typeof text === 'number' ? text.toString() : text\n\n    const xpath = './/option[normalize-space(.) = ' + escapeQuotes(text) + ']'\n\n    const options = await this.element.findElements(By.xpath(xpath))\n\n    for (let option of options) {\n      await this.setSelected(option)\n      if (!(await this.isMultiple())) {\n        return\n      }\n    }\n\n    let matched = Array.isArray(options) && options.length > 0\n\n    if (!matched && text.includes(' ')) {\n      const subStringWithoutSpace = getLongestSubstringWithoutSpace(text)\n      let candidates\n      if ('' === subStringWithoutSpace) {\n        candidates = await this.element.findElements(By.tagName('option'))\n      } else {\n        const xpath = './/option[contains(., ' + escapeQuotes(subStringWithoutSpace) + ')]'\n        candidates = await this.element.findElements(By.xpath(xpath))\n      }\n\n      const trimmed = text.trim()\n\n      for (let option of candidates) {\n        const optionText = await option.getText()\n        if (trimmed === optionText.trim()) {\n          await this.setSelected(option)\n          if (!(await this.isMultiple())) {\n            return\n          }\n          matched = true\n        }\n      }\n    }\n\n    if (!matched) {\n      throw new Error(`Cannot locate option with text: ${text}`)\n    }\n  }\n\n  /**\n   * Returns a list of all options belonging to this select tag\n   * @returns {!Promise<!Array<!WebElement>>}\n   */\n  async getOptions() {\n    return await this.element.findElements({ tagName: 'option' })\n  }\n\n  /**\n   * Returns a boolean value if the select tag is multiple\n   * @returns {Promise<boolean>}\n   */\n  async isMultiple() {\n    return this.multiple\n  }\n\n  /**\n   * Returns a list of all selected options belonging to this select tag\n   *\n   * @returns {Promise<void>}\n   */\n  async getAllSelectedOptions() {\n    const opts = await this.getOptions()\n    const results = []\n    for (let options of opts) {\n      if (await options.isSelected()) {\n        results.push(options)\n      }\n    }\n    return results\n  }\n\n  /**\n   * Returns first Selected Option\n   * @returns {Promise<Element>}\n   */\n  async getFirstSelectedOption() {\n    return (await this.getAllSelectedOptions())[0]\n  }\n\n  /**\n   * Deselects all selected options\n   * @returns {Promise<void>}\n   */\n  async deselectAll() {\n    if (!this.isMultiple()) {\n      throw new Error('You may only deselect all options of a multi-select')\n    }\n\n    const options = await this.getOptions()\n\n    for (let option of options) {\n      if (await option.isSelected()) {\n        await option.click()\n      }\n    }\n  }\n\n  /**\n   *\n   * @param {string|Number}text text of option to deselect\n   * @returns {Promise<void>}\n   */\n  async deselectByVisibleText(text) {\n    if (!(await this.isMultiple())) {\n      throw new Error('You may only deselect options of a multi-select')\n    }\n\n    /**\n     * convert value into string\n     */\n    text = typeof text === 'number' ? text.toString() : text\n\n    const optionElement = await this.element.findElement(\n      By.xpath('.//option[normalize-space(.) = ' + escapeQuotes(text) + ']'),\n    )\n    if (await optionElement.isSelected()) {\n      await optionElement.click()\n    }\n  }\n\n  /**\n   *\n   * @param {Number} index       index of option element to deselect\n   * Deselect the option at the given index.\n   * This is done by examining the \"index\"\n   * attribute of an element, and not merely by counting.\n   * @returns {Promise<void>}\n   */\n  async deselectByIndex(index) {\n    if (!(await this.isMultiple())) {\n      throw new Error('You may only deselect options of a multi-select')\n    }\n\n    if (index < 0) {\n      throw new Error('Index needs to be 0 or any other positive number')\n    }\n\n    let options = await this.element.findElements(By.tagName('option'))\n\n    if (options.length === 0) {\n      throw new Error(\"Select element doesn't contain any option element\")\n    }\n\n    if (options.length - 1 < index) {\n      throw new Error(\n        `Option with index \"${index}\" not found. Select element only contains ${options.length - 1} option elements`,\n      )\n    }\n\n    for (let option of options) {\n      if ((await option.getAttribute('index')) === index.toString()) {\n        if (await option.isSelected()) {\n          await option.click()\n        }\n      }\n    }\n  }\n\n  /**\n   *\n   * @param {String} value value of an option to deselect\n   * @returns {Promise<void>}\n   */\n  async deselectByValue(value) {\n    if (!(await this.isMultiple())) {\n      throw new Error('You may only deselect options of a multi-select')\n    }\n\n    let matched = false\n\n    let options = await this.element.findElements(By.xpath('.//option[@value = ' + escapeQuotes(value) + ']'))\n\n    if (options.length === 0) {\n      throw new Error(`Cannot locate option with value: ${value}`)\n    }\n\n    for (let option of options) {\n      if (await option.isSelected()) {\n        await option.click()\n      }\n      matched = true\n    }\n\n    if (!matched) {\n      throw new Error(`Cannot locate option with value: ${value}`)\n    }\n  }\n\n  async setSelected(option) {\n    if (!(await option.isSelected())) {\n      if (!(await option.isEnabled())) {\n        throw new error.UnsupportedOperationError(`You may not select a disabled option`)\n      }\n      await option.click()\n    }\n  }\n}\n\nfunction escapeQuotes(toEscape) {\n  if (toEscape.includes(`\"`) && toEscape.includes(`'`)) {\n    const quoteIsLast = toEscape.lastIndexOf(`\"`) === toEscape.length - 1\n    const substrings = toEscape.split(`\"`)\n\n    // Remove the last element if it's an empty string\n    if (substrings[substrings.length - 1] === '') {\n      substrings.pop()\n    }\n\n    let result = 'concat('\n\n    for (let i = 0; i < substrings.length; i++) {\n      result += `\"${substrings[i]}\"`\n      result += i === substrings.length - 1 ? (quoteIsLast ? `, '\"')` : `)`) : `, '\"', `\n    }\n    return result\n  }\n\n  if (toEscape.includes('\"')) {\n    return `'${toEscape}'`\n  }\n\n  // Otherwise return the quoted string\n  return `\"${toEscape}\"`\n}\n\nfunction getLongestSubstringWithoutSpace(text) {\n  let words = text.split(' ')\n  let longestString = ''\n  for (let word of words) {\n    if (word.length > longestString.length) {\n      longestString = word\n    }\n  }\n  return longestString\n}\n\nmodule.exports = { Select, escapeQuotes }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/lib/select.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/lib/session.js":
/*!********************************************************!*\
  !*** ./node_modules/selenium-webdriver/lib/session.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\n\nconst { Capabilities } = __webpack_require__(/*! ./capabilities */ \"(rsc)/./node_modules/selenium-webdriver/lib/capabilities.js\")\n\n/**\n * Contains information about a single WebDriver session.\n */\nclass Session {\n  /**\n   * @param {string} id The session ID.\n   * @param {!./capabilities.Capabilities} capabilities\n   *     The session capabilities.\n   */\n  constructor(id, capabilities) {\n    /** @private {string} */\n    this.id_ = id\n\n    /** @private {!Capabilities} */\n    this.caps_ =\n      capabilities instanceof Capabilities\n        ? /** @type {!Capabilities} */ (capabilities)\n        : new Capabilities(capabilities)\n  }\n\n  /**\n   * @return {string} This session's ID.\n   */\n  getId() {\n    return this.id_\n  }\n\n  /**\n   * @return {!Capabilities} This session's capabilities.\n   */\n  getCapabilities() {\n    return this.caps_\n  }\n\n  /**\n   * Retrieves the value of a specific capability.\n   * @param {string} key The capability to retrieve.\n   * @return {*} The capability value.\n   */\n  getCapability(key) {\n    return this.caps_.get(key)\n  }\n\n  /**\n   * Returns the JSON representation of this object, which is just the string\n   * session ID.\n   * @return {string} The JSON representation of this Session.\n   */\n  toJSON() {\n    return this.getId()\n  }\n}\n\n// PUBLIC API\n\nmodule.exports = { Session }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc2VsZW5pdW0td2ViZHJpdmVyL2xpYi9zZXNzaW9uLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRVk7O0FBRVosUUFBUSxlQUFlLEVBQUUsbUJBQU8sQ0FBQyxtRkFBZ0I7O0FBRWpEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSw4QkFBOEI7QUFDM0M7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLFFBQVE7QUFDMUI7O0FBRUEsa0JBQWtCLGVBQWU7QUFDakM7QUFDQTtBQUNBLHFCQUFxQixlQUFlO0FBQ3BDO0FBQ0E7O0FBRUE7QUFDQSxjQUFjLFFBQVE7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxjQUFjLGVBQWU7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixjQUFjLEdBQUc7QUFDakI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsY0FBYyxRQUFRO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsbUJBQW1CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ29vZ2xlLXNoZWV0cy1zZWxlbml1bS1hdXRvbWF0aW9uLy4vbm9kZV9tb2R1bGVzL3NlbGVuaXVtLXdlYmRyaXZlci9saWIvc2Vzc2lvbi5qcz9kOTFjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBTb2Z0d2FyZSBGcmVlZG9tIENvbnNlcnZhbmN5IChTRkMpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgU0ZDIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbid1c2Ugc3RyaWN0J1xuXG5jb25zdCB7IENhcGFiaWxpdGllcyB9ID0gcmVxdWlyZSgnLi9jYXBhYmlsaXRpZXMnKVxuXG4vKipcbiAqIENvbnRhaW5zIGluZm9ybWF0aW9uIGFib3V0IGEgc2luZ2xlIFdlYkRyaXZlciBzZXNzaW9uLlxuICovXG5jbGFzcyBTZXNzaW9uIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUgc2Vzc2lvbiBJRC5cbiAgICogQHBhcmFtIHshLi9jYXBhYmlsaXRpZXMuQ2FwYWJpbGl0aWVzfSBjYXBhYmlsaXRpZXNcbiAgICogICAgIFRoZSBzZXNzaW9uIGNhcGFiaWxpdGllcy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGlkLCBjYXBhYmlsaXRpZXMpIHtcbiAgICAvKiogQHByaXZhdGUge3N0cmluZ30gKi9cbiAgICB0aGlzLmlkXyA9IGlkXG5cbiAgICAvKiogQHByaXZhdGUgeyFDYXBhYmlsaXRpZXN9ICovXG4gICAgdGhpcy5jYXBzXyA9XG4gICAgICBjYXBhYmlsaXRpZXMgaW5zdGFuY2VvZiBDYXBhYmlsaXRpZXNcbiAgICAgICAgPyAvKiogQHR5cGUgeyFDYXBhYmlsaXRpZXN9ICovIChjYXBhYmlsaXRpZXMpXG4gICAgICAgIDogbmV3IENhcGFiaWxpdGllcyhjYXBhYmlsaXRpZXMpXG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB7c3RyaW5nfSBUaGlzIHNlc3Npb24ncyBJRC5cbiAgICovXG4gIGdldElkKCkge1xuICAgIHJldHVybiB0aGlzLmlkX1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4geyFDYXBhYmlsaXRpZXN9IFRoaXMgc2Vzc2lvbidzIGNhcGFiaWxpdGllcy5cbiAgICovXG4gIGdldENhcGFiaWxpdGllcygpIHtcbiAgICByZXR1cm4gdGhpcy5jYXBzX1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlcyB0aGUgdmFsdWUgb2YgYSBzcGVjaWZpYyBjYXBhYmlsaXR5LlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBjYXBhYmlsaXR5IHRvIHJldHJpZXZlLlxuICAgKiBAcmV0dXJuIHsqfSBUaGUgY2FwYWJpbGl0eSB2YWx1ZS5cbiAgICovXG4gIGdldENhcGFiaWxpdHkoa2V5KSB7XG4gICAgcmV0dXJuIHRoaXMuY2Fwc18uZ2V0KGtleSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBKU09OIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgb2JqZWN0LCB3aGljaCBpcyBqdXN0IHRoZSBzdHJpbmdcbiAgICogc2Vzc2lvbiBJRC5cbiAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgSlNPTiByZXByZXNlbnRhdGlvbiBvZiB0aGlzIFNlc3Npb24uXG4gICAqL1xuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0SWQoKVxuICB9XG59XG5cbi8vIFBVQkxJQyBBUElcblxubW9kdWxlLmV4cG9ydHMgPSB7IFNlc3Npb24gfVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/lib/session.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/lib/symbols.js":
/*!********************************************************!*\
  !*** ./node_modules/selenium-webdriver/lib/symbols.js ***!
  \********************************************************/
/***/ ((module) => {

"use strict";
eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\n\n/**\n * @fileoverview Defines well-known symbols used within the selenium-webdriver\n * library.\n */\n\nmodule.exports = {\n  /**\n   * The serialize symbol specifies a method that returns an object's serialized\n   * representation. If an object's serialized form is not immediately\n   * available, the serialize method will return a promise that will be resolved\n   * with the serialized form.\n   *\n   * Note that the described method is analogous to objects that define a\n   * `toJSON()` method, except the serialized result may be a promise, or\n   * another object with a promised property.\n   */\n  serialize: Symbol('serialize'),\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc2VsZW5pdW0td2ViZHJpdmVyL2xpYi9zeW1ib2xzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRVk7O0FBRVo7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nb29nbGUtc2hlZXRzLXNlbGVuaXVtLWF1dG9tYXRpb24vLi9ub2RlX21vZHVsZXMvc2VsZW5pdW0td2ViZHJpdmVyL2xpYi9zeW1ib2xzLmpzP2E4ZGMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIFNvZnR3YXJlIEZyZWVkb20gQ29uc2VydmFuY3kgKFNGQykgdW5kZXIgb25lXG4vLyBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbi8vIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4vLyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBTRkMgbGljZW5zZXMgdGhpcyBmaWxlXG4vLyB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4vLyBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbi8vIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbi8vIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4vLyBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuLy8gS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4vLyBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4vLyB1bmRlciB0aGUgTGljZW5zZS5cblxuJ3VzZSBzdHJpY3QnXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBEZWZpbmVzIHdlbGwta25vd24gc3ltYm9scyB1c2VkIHdpdGhpbiB0aGUgc2VsZW5pdW0td2ViZHJpdmVyXG4gKiBsaWJyYXJ5LlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvKipcbiAgICogVGhlIHNlcmlhbGl6ZSBzeW1ib2wgc3BlY2lmaWVzIGEgbWV0aG9kIHRoYXQgcmV0dXJucyBhbiBvYmplY3QncyBzZXJpYWxpemVkXG4gICAqIHJlcHJlc2VudGF0aW9uLiBJZiBhbiBvYmplY3QncyBzZXJpYWxpemVkIGZvcm0gaXMgbm90IGltbWVkaWF0ZWx5XG4gICAqIGF2YWlsYWJsZSwgdGhlIHNlcmlhbGl6ZSBtZXRob2Qgd2lsbCByZXR1cm4gYSBwcm9taXNlIHRoYXQgd2lsbCBiZSByZXNvbHZlZFxuICAgKiB3aXRoIHRoZSBzZXJpYWxpemVkIGZvcm0uXG4gICAqXG4gICAqIE5vdGUgdGhhdCB0aGUgZGVzY3JpYmVkIG1ldGhvZCBpcyBhbmFsb2dvdXMgdG8gb2JqZWN0cyB0aGF0IGRlZmluZSBhXG4gICAqIGB0b0pTT04oKWAgbWV0aG9kLCBleGNlcHQgdGhlIHNlcmlhbGl6ZWQgcmVzdWx0IG1heSBiZSBhIHByb21pc2UsIG9yXG4gICAqIGFub3RoZXIgb2JqZWN0IHdpdGggYSBwcm9taXNlZCBwcm9wZXJ0eS5cbiAgICovXG4gIHNlcmlhbGl6ZTogU3ltYm9sKCdzZXJpYWxpemUnKSxcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/lib/symbols.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/lib/until.js":
/*!******************************************************!*\
  !*** ./node_modules/selenium-webdriver/lib/until.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Defines common conditions for use with\n * {@link webdriver.WebDriver#wait WebDriver wait}.\n *\n * Sample usage:\n *\n *     driver.get('http://www.google.com/ncr');\n *\n *     var query = driver.wait(until.elementLocated(By.name('q')));\n *     query.sendKeys('webdriver\\n');\n *\n *     driver.wait(until.titleIs('webdriver - Google Search'));\n *\n * To define a custom condition, simply call WebDriver.wait with a function\n * that will eventually return a truthy-value (neither null, undefined, false,\n * 0, or the empty string):\n *\n *     driver.wait(function() {\n *       return driver.getTitle().then(function(title) {\n *         return title === 'webdriver - Google Search';\n *       });\n *     }, 1000);\n */\n\n\n\nconst by = __webpack_require__(/*! ./by */ \"(rsc)/./node_modules/selenium-webdriver/lib/by.js\")\nconst error = __webpack_require__(/*! ./error */ \"(rsc)/./node_modules/selenium-webdriver/lib/error.js\")\nconst webdriver = __webpack_require__(/*! ./webdriver */ \"(rsc)/./node_modules/selenium-webdriver/lib/webdriver.js\")\nconst Condition = webdriver.Condition\nconst WebElementCondition = webdriver.WebElementCondition\n\n/**\n * Creates a condition that will wait until the input driver is able to switch\n * to the designated frame. The target frame may be specified as\n *\n * 1. a numeric index into\n *     [window.frames](https://developer.mozilla.org/en-US/docs/Web/API/Window.frames)\n *     for the currently selected frame.\n * 2. a {@link ./webdriver.WebElement}, which must reference a FRAME or IFRAME\n *     element on the current page.\n * 3. a locator which may be used to first locate a FRAME or IFRAME on the\n *     current page before attempting to switch to it.\n *\n * Upon successful resolution of this condition, the driver will be left\n * focused on the new frame.\n *\n * @param {!(number|./webdriver.WebElement|By|\n *           function(!./webdriver.WebDriver): !./webdriver.WebElement)} frame\n *     The frame identifier.\n * @return {!Condition<boolean>} A new condition.\n */\nfunction ableToSwitchToFrame(frame) {\n  let condition\n  if (typeof frame === 'number' || frame instanceof webdriver.WebElement) {\n    condition = (driver) => attemptToSwitchFrames(driver, frame)\n  } else {\n    condition = function (driver) {\n      let locator = /** @type {!(By|Function)} */ (frame)\n      return driver.findElements(locator).then(function (els) {\n        if (els.length) {\n          return attemptToSwitchFrames(driver, els[0])\n        }\n      })\n    }\n  }\n\n  return new Condition('to be able to switch to frame', condition)\n\n  function attemptToSwitchFrames(driver, frame) {\n    return driver\n      .switchTo()\n      .frame(frame)\n      .then(\n        function () {\n          return true\n        },\n        function (e) {\n          if (!(e instanceof error.NoSuchFrameError)) {\n            throw e\n          }\n        },\n      )\n  }\n}\n\n/**\n * Creates a condition that waits for an alert to be opened. Upon success, the\n * returned promise will be fulfilled with the handle for the opened alert.\n *\n * @return {!Condition<!./webdriver.Alert>} The new condition.\n */\nfunction alertIsPresent() {\n  return new Condition('for alert to be present', function (driver) {\n    return driver\n      .switchTo()\n      .alert()\n      .catch(function (e) {\n        if (\n          !(\n            e instanceof error.NoSuchAlertError ||\n            // XXX: Workaround for GeckoDriver error `TypeError: can't convert null\n            // to object`. For more details, see\n            // https://github.com/SeleniumHQ/selenium/pull/2137\n            (e instanceof error.WebDriverError && e.message === `can't convert null to object`)\n          )\n        ) {\n          throw e\n        }\n      })\n  })\n}\n\n/**\n * Creates a condition that will wait for the current page's title to match the\n * given value.\n *\n * @param {string} title The expected page title.\n * @return {!Condition<boolean>} The new condition.\n */\nfunction titleIs(title) {\n  return new Condition('for title to be ' + JSON.stringify(title), function (driver) {\n    return driver.getTitle().then(function (t) {\n      return t === title\n    })\n  })\n}\n\n/**\n * Creates a condition that will wait for the current page's title to contain\n * the given substring.\n *\n * @param {string} substr The substring that should be present in the page\n *     title.\n * @return {!Condition<boolean>} The new condition.\n */\nfunction titleContains(substr) {\n  return new Condition('for title to contain ' + JSON.stringify(substr), function (driver) {\n    return driver.getTitle().then(function (title) {\n      return title.indexOf(substr) !== -1\n    })\n  })\n}\n\n/**\n * Creates a condition that will wait for the current page's title to match the\n * given regular expression.\n *\n * @param {!RegExp} regex The regular expression to test against.\n * @return {!Condition<boolean>} The new condition.\n */\nfunction titleMatches(regex) {\n  return new Condition('for title to match ' + regex, function (driver) {\n    return driver.getTitle().then(function (title) {\n      return regex.test(title)\n    })\n  })\n}\n\n/**\n * Creates a condition that will wait for the current page's url to match the\n * given value.\n *\n * @param {string} url The expected page url.\n * @return {!Condition<boolean>} The new condition.\n */\nfunction urlIs(url) {\n  return new Condition('for URL to be ' + JSON.stringify(url), function (driver) {\n    return driver.getCurrentUrl().then(function (u) {\n      return u === url\n    })\n  })\n}\n\n/**\n * Creates a condition that will wait for the current page's url to contain\n * the given substring.\n *\n * @param {string} substrUrl The substring that should be present in the current\n *     URL.\n * @return {!Condition<boolean>} The new condition.\n */\nfunction urlContains(substrUrl) {\n  return new Condition('for URL to contain ' + JSON.stringify(substrUrl), function (driver) {\n    return driver.getCurrentUrl().then(function (url) {\n      return url && url.includes(substrUrl)\n    })\n  })\n}\n\n/**\n * Creates a condition that will wait for the current page's url to match the\n * given regular expression.\n *\n * @param {!RegExp} regex The regular expression to test against.\n * @return {!Condition<boolean>} The new condition.\n */\nfunction urlMatches(regex) {\n  return new Condition('for URL to match ' + regex, function (driver) {\n    return driver.getCurrentUrl().then(function (url) {\n      return regex.test(url)\n    })\n  })\n}\n\n/**\n * Creates a condition that will loop until an element is\n * {@link ./webdriver.WebDriver#findElement found} with the given locator.\n *\n * @param {!(By|Function)} locator The locator to use.\n * @return {!WebElementCondition} The new condition.\n */\nfunction elementLocated(locator) {\n  locator = by.checkedLocator(locator)\n  let locatorStr = typeof locator === 'function' ? 'by function()' : locator + ''\n  return new WebElementCondition('for element to be located ' + locatorStr, function (driver) {\n    return driver.findElements(locator).then(function (elements) {\n      return elements[0]\n    })\n  })\n}\n\n/**\n * Creates a condition that will loop until at least one element is\n * {@link ./webdriver.WebDriver#findElement found} with the given locator.\n *\n * @param {!(By|Function)} locator The locator to use.\n * @return {!Condition<!Array<!./webdriver.WebElement>>} The new\n *     condition.\n */\nfunction elementsLocated(locator) {\n  locator = by.checkedLocator(locator)\n  let locatorStr = typeof locator === 'function' ? 'by function()' : locator + ''\n  return new Condition('for at least one element to be located ' + locatorStr, function (driver) {\n    return driver.findElements(locator).then(function (elements) {\n      return elements.length > 0 ? elements : null\n    })\n  })\n}\n\n/**\n * Creates a condition that will wait for the given element to become stale. An\n * element is considered stale once it is removed from the DOM, or a new page\n * has loaded.\n *\n * @param {!./webdriver.WebElement} element The element that should become stale.\n * @return {!Condition<boolean>} The new condition.\n */\nfunction stalenessOf(element) {\n  return new Condition('element to become stale', function () {\n    return element.getTagName().then(\n      function () {\n        return false\n      },\n      function (e) {\n        if (e instanceof error.StaleElementReferenceError) {\n          return true\n        }\n        throw e\n      },\n    )\n  })\n}\n\n/**\n * Creates a condition that will wait for the given element to become visible.\n *\n * @param {!./webdriver.WebElement} element The element to test.\n * @return {!WebElementCondition} The new condition.\n * @see ./webdriver.WebDriver#isDisplayed\n */\nfunction elementIsVisible(element) {\n  return new WebElementCondition('until element is visible', function () {\n    return element.isDisplayed().then((v) => (v ? element : null))\n  })\n}\n\n/**\n * Creates a condition that will wait for the given element to be in the DOM,\n * yet not visible to the user.\n *\n * @param {!./webdriver.WebElement} element The element to test.\n * @return {!WebElementCondition} The new condition.\n * @see ./webdriver.WebDriver#isDisplayed\n */\nfunction elementIsNotVisible(element) {\n  return new WebElementCondition('until element is not visible', function () {\n    return element.isDisplayed().then((v) => (v ? null : element))\n  })\n}\n\n/**\n * Creates a condition that will wait for the given element to be enabled.\n *\n * @param {!./webdriver.WebElement} element The element to test.\n * @return {!WebElementCondition} The new condition.\n * @see webdriver.WebDriver#isEnabled\n */\nfunction elementIsEnabled(element) {\n  return new WebElementCondition('until element is enabled', function () {\n    return element.isEnabled().then((v) => (v ? element : null))\n  })\n}\n\n/**\n * Creates a condition that will wait for the given element to be disabled.\n *\n * @param {!./webdriver.WebElement} element The element to test.\n * @return {!WebElementCondition} The new condition.\n * @see webdriver.WebDriver#isEnabled\n */\nfunction elementIsDisabled(element) {\n  return new WebElementCondition('until element is disabled', function () {\n    return element.isEnabled().then((v) => (v ? null : element))\n  })\n}\n\n/**\n * Creates a condition that will wait for the given element to be selected.\n * @param {!./webdriver.WebElement} element The element to test.\n * @return {!WebElementCondition} The new condition.\n * @see webdriver.WebDriver#isSelected\n */\nfunction elementIsSelected(element) {\n  return new WebElementCondition('until element is selected', function () {\n    return element.isSelected().then((v) => (v ? element : null))\n  })\n}\n\n/**\n * Creates a condition that will wait for the given element to be deselected.\n *\n * @param {!./webdriver.WebElement} element The element to test.\n * @return {!WebElementCondition} The new condition.\n * @see webdriver.WebDriver#isSelected\n */\nfunction elementIsNotSelected(element) {\n  return new WebElementCondition('until element is not selected', function () {\n    return element.isSelected().then((v) => (v ? null : element))\n  })\n}\n\n/**\n * Creates a condition that will wait for the given element's\n * {@link webdriver.WebDriver#getText visible text} to match the given\n * {@code text} exactly.\n *\n * @param {!./webdriver.WebElement} element The element to test.\n * @param {string} text The expected text.\n * @return {!WebElementCondition} The new condition.\n * @see webdriver.WebDriver#getText\n */\nfunction elementTextIs(element, text) {\n  return new WebElementCondition('until element text is', function () {\n    return element.getText().then((t) => (t === text ? element : null))\n  })\n}\n\n/**\n * Creates a condition that will wait for the given element's\n * {@link webdriver.WebDriver#getText visible text} to contain the given\n * substring.\n *\n * @param {!./webdriver.WebElement} element The element to test.\n * @param {string} substr The substring to search for.\n * @return {!WebElementCondition} The new condition.\n * @see webdriver.WebDriver#getText\n */\nfunction elementTextContains(element, substr) {\n  return new WebElementCondition('until element text contains', function () {\n    return element.getText().then((t) => (t.indexOf(substr) != -1 ? element : null))\n  })\n}\n\n/**\n * Creates a condition that will wait for the given element's\n * {@link webdriver.WebDriver#getText visible text} to match a regular\n * expression.\n *\n * @param {!./webdriver.WebElement} element The element to test.\n * @param {!RegExp} regex The regular expression to test against.\n * @return {!WebElementCondition} The new condition.\n * @see webdriver.WebDriver#getText\n */\nfunction elementTextMatches(element, regex) {\n  return new WebElementCondition('until element text matches', function () {\n    return element.getText().then((t) => (regex.test(t) ? element : null))\n  })\n}\n\n// PUBLIC API\n\nmodule.exports = {\n  elementTextMatches,\n  elementTextContains,\n  elementTextIs,\n  elementIsNotSelected,\n  elementIsSelected,\n  elementIsDisabled,\n  ableToSwitchToFrame,\n  elementIsEnabled,\n  elementIsNotVisible,\n  elementIsVisible,\n  stalenessOf,\n  elementsLocated,\n  elementLocated,\n  urlMatches,\n  urlContains,\n  urlIs,\n  titleMatches,\n  titleContains,\n  alertIsPresent,\n  titleIs,\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/lib/until.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/lib/util.js":
/*!*****************************************************!*\
  !*** ./node_modules/selenium-webdriver/lib/util.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";
eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\n\n/**\n * Determines whether a {@code value} should be treated as an object.\n * @param {?} value The value to test.\n * @returns {boolean} Whether the value is an object.\n */\nfunction isObject(value) {\n  return Object.prototype.toString.call(value) === '[object Object]'\n}\n\n/**\n * Determines whether a {@code value} should be treated as a promise.\n * Any object whose \"then\" property is a function will be considered a promise.\n *\n * @param {?} value The value to test.\n * @return {boolean} Whether the value is a promise.\n */\nfunction isPromise(value) {\n  try {\n    // Use array notation so the Closure compiler does not obfuscate away our\n    // contract.\n    return (typeof value === 'object' || typeof value === 'function') && typeof value['then'] === 'function'\n    /*eslint no-unused-vars: \"off\"*/\n  } catch (ex) {\n    return false\n  }\n}\n\nmodule.exports = {\n  isObject,\n  isPromise,\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc2VsZW5pdW0td2ViZHJpdmVyL2xpYi91dGlsLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRVk7O0FBRVo7QUFDQSx5QkFBeUIsYUFBYTtBQUN0QyxXQUFXLEdBQUc7QUFDZCxhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx5QkFBeUIsYUFBYTtBQUN0QztBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2QsWUFBWSxTQUFTO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2dvb2dsZS1zaGVldHMtc2VsZW5pdW0tYXV0b21hdGlvbi8uL25vZGVfbW9kdWxlcy9zZWxlbml1bS13ZWJkcml2ZXIvbGliL3V0aWwuanM/Mjc5NCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgU29mdHdhcmUgRnJlZWRvbSBDb25zZXJ2YW5jeSAoU0ZDKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIFNGQyBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4ndXNlIHN0cmljdCdcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgYSB7QGNvZGUgdmFsdWV9IHNob3VsZCBiZSB0cmVhdGVkIGFzIGFuIG9iamVjdC5cbiAqIEBwYXJhbSB7P30gdmFsdWUgVGhlIHZhbHVlIHRvIHRlc3QuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gV2hldGhlciB0aGUgdmFsdWUgaXMgYW4gb2JqZWN0LlxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSdcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgYSB7QGNvZGUgdmFsdWV9IHNob3VsZCBiZSB0cmVhdGVkIGFzIGEgcHJvbWlzZS5cbiAqIEFueSBvYmplY3Qgd2hvc2UgXCJ0aGVuXCIgcHJvcGVydHkgaXMgYSBmdW5jdGlvbiB3aWxsIGJlIGNvbnNpZGVyZWQgYSBwcm9taXNlLlxuICpcbiAqIEBwYXJhbSB7P30gdmFsdWUgVGhlIHZhbHVlIHRvIHRlc3QuXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHRoZSB2YWx1ZSBpcyBhIHByb21pc2UuXG4gKi9cbmZ1bmN0aW9uIGlzUHJvbWlzZSh2YWx1ZSkge1xuICB0cnkge1xuICAgIC8vIFVzZSBhcnJheSBub3RhdGlvbiBzbyB0aGUgQ2xvc3VyZSBjb21waWxlciBkb2VzIG5vdCBvYmZ1c2NhdGUgYXdheSBvdXJcbiAgICAvLyBjb250cmFjdC5cbiAgICByZXR1cm4gKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSAmJiB0eXBlb2YgdmFsdWVbJ3RoZW4nXSA9PT0gJ2Z1bmN0aW9uJ1xuICAgIC8qZXNsaW50IG5vLXVudXNlZC12YXJzOiBcIm9mZlwiKi9cbiAgfSBjYXRjaCAoZXgpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNPYmplY3QsXG4gIGlzUHJvbWlzZSxcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/lib/util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/lib/virtual_authenticator.js":
/*!**********************************************************************!*\
  !*** ./node_modules/selenium-webdriver/lib/virtual_authenticator.js ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";
eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\n\n/**\n * Protocol for virtual authenticators\n * @enum {string}\n */\nconst Protocol = {\n  CTAP2: 'ctap2',\n  U2F: 'ctap1/u2f',\n}\n\n/**\n * AuthenticatorTransport values\n * @enum {string}\n */\nconst Transport = {\n  BLE: 'ble',\n  USB: 'usb',\n  NFC: 'nfc',\n  INTERNAL: 'internal',\n}\n\n/**\n * Options for the creation of virtual authenticators.\n * @see http://w3c.github.io/webauthn/#sctn-automation\n */\nclass VirtualAuthenticatorOptions {\n  /**\n   * Constructor to initialise VirtualAuthenticatorOptions object.\n   */\n  constructor() {\n    this._protocol = Protocol['CTAP2']\n    this._transport = Transport['USB']\n    this._hasResidentKey = false\n    this._hasUserVerification = false\n    this._isUserConsenting = true\n    this._isUserVerified = false\n  }\n\n  getProtocol() {\n    return this._protocol\n  }\n\n  setProtocol(protocol) {\n    this._protocol = protocol\n  }\n\n  getTransport() {\n    return this._transport\n  }\n\n  setTransport(transport) {\n    this._transport = transport\n  }\n\n  getHasResidentKey() {\n    return this._hasResidentKey\n  }\n\n  setHasResidentKey(value) {\n    this._hasResidentKey = value\n  }\n\n  getHasUserVerification() {\n    return this._hasUserVerification\n  }\n\n  setHasUserVerification(value) {\n    this._hasUserVerification = value\n  }\n\n  getIsUserConsenting() {\n    return this._isUserConsenting\n  }\n\n  setIsUserConsenting(value) {\n    this._isUserConsenting = value\n  }\n\n  getIsUserVerified() {\n    return this._isUserVerified\n  }\n\n  setIsUserVerified(value) {\n    this._isUserVerified = value\n  }\n\n  toDict() {\n    return {\n      protocol: this.getProtocol(),\n      transport: this.getTransport(),\n      hasResidentKey: this.getHasResidentKey(),\n      hasUserVerification: this.getHasUserVerification(),\n      isUserConsenting: this.getIsUserConsenting(),\n      isUserVerified: this.getIsUserVerified(),\n    }\n  }\n}\n\n/**\n * A credential stored in a virtual authenticator.\n * @see https://w3c.github.io/webauthn/#credential-parameters\n */\nclass Credential {\n  constructor(credentialId, isResidentCredential, rpId, userHandle, privateKey, signCount) {\n    this._id = credentialId\n    this._isResidentCredential = isResidentCredential\n    this._rpId = rpId\n    this._userHandle = userHandle\n    this._privateKey = privateKey\n    this._signCount = signCount\n  }\n\n  static createResidentCredential(id, rpId, userHandle, privateKey, signCount) {\n    return new Credential(id, true, rpId, userHandle, privateKey, signCount)\n  }\n\n  static createNonResidentCredential(id, rpId, privateKey, signCount) {\n    return new Credential(id, false, rpId, null, privateKey, signCount)\n  }\n\n  id() {\n    return this._id\n  }\n\n  isResidentCredential() {\n    return this._isResidentCredential\n  }\n\n  rpId() {\n    return this._rpId\n  }\n\n  userHandle() {\n    if (this._userHandle != null) {\n      return this._userHandle\n    }\n    return null\n  }\n\n  privateKey() {\n    return this._privateKey\n  }\n\n  signCount() {\n    return this._signCount\n  }\n\n  /**\n   * Creates a resident (i.e. stateless) credential.\n   * @param id Unique base64 encoded string.\n   * @param rpId Relying party identifier.\n   * @param userHandle userHandle associated to the credential. Must be Base64 encoded string.\n   * @param privateKey Base64 encoded PKCS\n   * @param signCount initial value for a signature counter.\n   * @deprecated This method has been made static. Call it with class name. Example, Credential.createResidentCredential()\n   * @returns A resident credential\n   */\n  createResidentCredential(id, rpId, userHandle, privateKey, signCount) {\n    return new Credential(id, true, rpId, userHandle, privateKey, signCount)\n  }\n\n  /**\n   * Creates a non-resident (i.e. stateless) credential.\n   * @param id Unique base64 encoded string.\n   * @param rpId Relying party identifier.\n   * @param privateKey Base64 encoded PKCS\n   * @param signCount initial value for a signature counter.\n   * @deprecated This method has been made static. Call it with class name. Example, Credential.createNonResidentCredential()\n   * @returns A non-resident credential\n   */\n  createNonResidentCredential(id, rpId, privateKey, signCount) {\n    return new Credential(id, false, rpId, null, privateKey, signCount)\n  }\n\n  toDict() {\n    let credentialData = {\n      credentialId: Buffer.from(this._id).toString('base64url'),\n      isResidentCredential: this._isResidentCredential,\n      rpId: this._rpId,\n      privateKey: Buffer.from(this._privateKey, 'binary').toString('base64url'),\n      signCount: this._signCount,\n    }\n\n    if (this.userHandle() != null) {\n      credentialData['userHandle'] = Buffer.from(this._userHandle).toString('base64url')\n    }\n\n    return credentialData\n  }\n\n  /**\n   * Creates a credential from a map.\n   */\n  fromDict(data) {\n    let id = new Uint8Array(Buffer.from(data['credentialId'], 'base64url'))\n    let isResidentCredential = data['isResidentCredential']\n    let rpId = data['rpId']\n    let privateKey = Buffer.from(data['privateKey'], 'base64url').toString('binary')\n    let signCount = data['signCount']\n    let userHandle\n\n    if ('userHandle' in data) {\n      userHandle = new Uint8Array(Buffer.from(data['userHandle'], 'base64url'))\n    } else {\n      userHandle = null\n    }\n    return new Credential(id, isResidentCredential, rpId, userHandle, privateKey, signCount)\n  }\n}\n\n// PUBLIC API\n\nmodule.exports = {\n  Credential,\n  VirtualAuthenticatorOptions,\n  Transport,\n  Protocol,\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc2VsZW5pdW0td2ViZHJpdmVyL2xpYi92aXJ0dWFsX2F1dGhlbnRpY2F0b3IuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFWTs7QUFFWjtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2dvb2dsZS1zaGVldHMtc2VsZW5pdW0tYXV0b21hdGlvbi8uL25vZGVfbW9kdWxlcy9zZWxlbml1bS13ZWJkcml2ZXIvbGliL3ZpcnR1YWxfYXV0aGVudGljYXRvci5qcz84MWUwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBTb2Z0d2FyZSBGcmVlZG9tIENvbnNlcnZhbmN5IChTRkMpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgU0ZDIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbid1c2Ugc3RyaWN0J1xuXG4vKipcbiAqIFByb3RvY29sIGZvciB2aXJ0dWFsIGF1dGhlbnRpY2F0b3JzXG4gKiBAZW51bSB7c3RyaW5nfVxuICovXG5jb25zdCBQcm90b2NvbCA9IHtcbiAgQ1RBUDI6ICdjdGFwMicsXG4gIFUyRjogJ2N0YXAxL3UyZicsXG59XG5cbi8qKlxuICogQXV0aGVudGljYXRvclRyYW5zcG9ydCB2YWx1ZXNcbiAqIEBlbnVtIHtzdHJpbmd9XG4gKi9cbmNvbnN0IFRyYW5zcG9ydCA9IHtcbiAgQkxFOiAnYmxlJyxcbiAgVVNCOiAndXNiJyxcbiAgTkZDOiAnbmZjJyxcbiAgSU5URVJOQUw6ICdpbnRlcm5hbCcsXG59XG5cbi8qKlxuICogT3B0aW9ucyBmb3IgdGhlIGNyZWF0aW9uIG9mIHZpcnR1YWwgYXV0aGVudGljYXRvcnMuXG4gKiBAc2VlIGh0dHA6Ly93M2MuZ2l0aHViLmlvL3dlYmF1dGhuLyNzY3RuLWF1dG9tYXRpb25cbiAqL1xuY2xhc3MgVmlydHVhbEF1dGhlbnRpY2F0b3JPcHRpb25zIHtcbiAgLyoqXG4gICAqIENvbnN0cnVjdG9yIHRvIGluaXRpYWxpc2UgVmlydHVhbEF1dGhlbnRpY2F0b3JPcHRpb25zIG9iamVjdC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX3Byb3RvY29sID0gUHJvdG9jb2xbJ0NUQVAyJ11cbiAgICB0aGlzLl90cmFuc3BvcnQgPSBUcmFuc3BvcnRbJ1VTQiddXG4gICAgdGhpcy5faGFzUmVzaWRlbnRLZXkgPSBmYWxzZVxuICAgIHRoaXMuX2hhc1VzZXJWZXJpZmljYXRpb24gPSBmYWxzZVxuICAgIHRoaXMuX2lzVXNlckNvbnNlbnRpbmcgPSB0cnVlXG4gICAgdGhpcy5faXNVc2VyVmVyaWZpZWQgPSBmYWxzZVxuICB9XG5cbiAgZ2V0UHJvdG9jb2woKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Byb3RvY29sXG4gIH1cblxuICBzZXRQcm90b2NvbChwcm90b2NvbCkge1xuICAgIHRoaXMuX3Byb3RvY29sID0gcHJvdG9jb2xcbiAgfVxuXG4gIGdldFRyYW5zcG9ydCgpIHtcbiAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0XG4gIH1cblxuICBzZXRUcmFuc3BvcnQodHJhbnNwb3J0KSB7XG4gICAgdGhpcy5fdHJhbnNwb3J0ID0gdHJhbnNwb3J0XG4gIH1cblxuICBnZXRIYXNSZXNpZGVudEtleSgpIHtcbiAgICByZXR1cm4gdGhpcy5faGFzUmVzaWRlbnRLZXlcbiAgfVxuXG4gIHNldEhhc1Jlc2lkZW50S2V5KHZhbHVlKSB7XG4gICAgdGhpcy5faGFzUmVzaWRlbnRLZXkgPSB2YWx1ZVxuICB9XG5cbiAgZ2V0SGFzVXNlclZlcmlmaWNhdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5faGFzVXNlclZlcmlmaWNhdGlvblxuICB9XG5cbiAgc2V0SGFzVXNlclZlcmlmaWNhdGlvbih2YWx1ZSkge1xuICAgIHRoaXMuX2hhc1VzZXJWZXJpZmljYXRpb24gPSB2YWx1ZVxuICB9XG5cbiAgZ2V0SXNVc2VyQ29uc2VudGluZygpIHtcbiAgICByZXR1cm4gdGhpcy5faXNVc2VyQ29uc2VudGluZ1xuICB9XG5cbiAgc2V0SXNVc2VyQ29uc2VudGluZyh2YWx1ZSkge1xuICAgIHRoaXMuX2lzVXNlckNvbnNlbnRpbmcgPSB2YWx1ZVxuICB9XG5cbiAgZ2V0SXNVc2VyVmVyaWZpZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2lzVXNlclZlcmlmaWVkXG4gIH1cblxuICBzZXRJc1VzZXJWZXJpZmllZCh2YWx1ZSkge1xuICAgIHRoaXMuX2lzVXNlclZlcmlmaWVkID0gdmFsdWVcbiAgfVxuXG4gIHRvRGljdCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcHJvdG9jb2w6IHRoaXMuZ2V0UHJvdG9jb2woKSxcbiAgICAgIHRyYW5zcG9ydDogdGhpcy5nZXRUcmFuc3BvcnQoKSxcbiAgICAgIGhhc1Jlc2lkZW50S2V5OiB0aGlzLmdldEhhc1Jlc2lkZW50S2V5KCksXG4gICAgICBoYXNVc2VyVmVyaWZpY2F0aW9uOiB0aGlzLmdldEhhc1VzZXJWZXJpZmljYXRpb24oKSxcbiAgICAgIGlzVXNlckNvbnNlbnRpbmc6IHRoaXMuZ2V0SXNVc2VyQ29uc2VudGluZygpLFxuICAgICAgaXNVc2VyVmVyaWZpZWQ6IHRoaXMuZ2V0SXNVc2VyVmVyaWZpZWQoKSxcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBIGNyZWRlbnRpYWwgc3RvcmVkIGluIGEgdmlydHVhbCBhdXRoZW50aWNhdG9yLlxuICogQHNlZSBodHRwczovL3czYy5naXRodWIuaW8vd2ViYXV0aG4vI2NyZWRlbnRpYWwtcGFyYW1ldGVyc1xuICovXG5jbGFzcyBDcmVkZW50aWFsIHtcbiAgY29uc3RydWN0b3IoY3JlZGVudGlhbElkLCBpc1Jlc2lkZW50Q3JlZGVudGlhbCwgcnBJZCwgdXNlckhhbmRsZSwgcHJpdmF0ZUtleSwgc2lnbkNvdW50KSB7XG4gICAgdGhpcy5faWQgPSBjcmVkZW50aWFsSWRcbiAgICB0aGlzLl9pc1Jlc2lkZW50Q3JlZGVudGlhbCA9IGlzUmVzaWRlbnRDcmVkZW50aWFsXG4gICAgdGhpcy5fcnBJZCA9IHJwSWRcbiAgICB0aGlzLl91c2VySGFuZGxlID0gdXNlckhhbmRsZVxuICAgIHRoaXMuX3ByaXZhdGVLZXkgPSBwcml2YXRlS2V5XG4gICAgdGhpcy5fc2lnbkNvdW50ID0gc2lnbkNvdW50XG4gIH1cblxuICBzdGF0aWMgY3JlYXRlUmVzaWRlbnRDcmVkZW50aWFsKGlkLCBycElkLCB1c2VySGFuZGxlLCBwcml2YXRlS2V5LCBzaWduQ291bnQpIHtcbiAgICByZXR1cm4gbmV3IENyZWRlbnRpYWwoaWQsIHRydWUsIHJwSWQsIHVzZXJIYW5kbGUsIHByaXZhdGVLZXksIHNpZ25Db3VudClcbiAgfVxuXG4gIHN0YXRpYyBjcmVhdGVOb25SZXNpZGVudENyZWRlbnRpYWwoaWQsIHJwSWQsIHByaXZhdGVLZXksIHNpZ25Db3VudCkge1xuICAgIHJldHVybiBuZXcgQ3JlZGVudGlhbChpZCwgZmFsc2UsIHJwSWQsIG51bGwsIHByaXZhdGVLZXksIHNpZ25Db3VudClcbiAgfVxuXG4gIGlkKCkge1xuICAgIHJldHVybiB0aGlzLl9pZFxuICB9XG5cbiAgaXNSZXNpZGVudENyZWRlbnRpYWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2lzUmVzaWRlbnRDcmVkZW50aWFsXG4gIH1cblxuICBycElkKCkge1xuICAgIHJldHVybiB0aGlzLl9ycElkXG4gIH1cblxuICB1c2VySGFuZGxlKCkge1xuICAgIGlmICh0aGlzLl91c2VySGFuZGxlICE9IG51bGwpIHtcbiAgICAgIHJldHVybiB0aGlzLl91c2VySGFuZGxlXG4gICAgfVxuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBwcml2YXRlS2V5KCkge1xuICAgIHJldHVybiB0aGlzLl9wcml2YXRlS2V5XG4gIH1cblxuICBzaWduQ291bnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NpZ25Db3VudFxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSByZXNpZGVudCAoaS5lLiBzdGF0ZWxlc3MpIGNyZWRlbnRpYWwuXG4gICAqIEBwYXJhbSBpZCBVbmlxdWUgYmFzZTY0IGVuY29kZWQgc3RyaW5nLlxuICAgKiBAcGFyYW0gcnBJZCBSZWx5aW5nIHBhcnR5IGlkZW50aWZpZXIuXG4gICAqIEBwYXJhbSB1c2VySGFuZGxlIHVzZXJIYW5kbGUgYXNzb2NpYXRlZCB0byB0aGUgY3JlZGVudGlhbC4gTXVzdCBiZSBCYXNlNjQgZW5jb2RlZCBzdHJpbmcuXG4gICAqIEBwYXJhbSBwcml2YXRlS2V5IEJhc2U2NCBlbmNvZGVkIFBLQ1NcbiAgICogQHBhcmFtIHNpZ25Db3VudCBpbml0aWFsIHZhbHVlIGZvciBhIHNpZ25hdHVyZSBjb3VudGVyLlxuICAgKiBAZGVwcmVjYXRlZCBUaGlzIG1ldGhvZCBoYXMgYmVlbiBtYWRlIHN0YXRpYy4gQ2FsbCBpdCB3aXRoIGNsYXNzIG5hbWUuIEV4YW1wbGUsIENyZWRlbnRpYWwuY3JlYXRlUmVzaWRlbnRDcmVkZW50aWFsKClcbiAgICogQHJldHVybnMgQSByZXNpZGVudCBjcmVkZW50aWFsXG4gICAqL1xuICBjcmVhdGVSZXNpZGVudENyZWRlbnRpYWwoaWQsIHJwSWQsIHVzZXJIYW5kbGUsIHByaXZhdGVLZXksIHNpZ25Db3VudCkge1xuICAgIHJldHVybiBuZXcgQ3JlZGVudGlhbChpZCwgdHJ1ZSwgcnBJZCwgdXNlckhhbmRsZSwgcHJpdmF0ZUtleSwgc2lnbkNvdW50KVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBub24tcmVzaWRlbnQgKGkuZS4gc3RhdGVsZXNzKSBjcmVkZW50aWFsLlxuICAgKiBAcGFyYW0gaWQgVW5pcXVlIGJhc2U2NCBlbmNvZGVkIHN0cmluZy5cbiAgICogQHBhcmFtIHJwSWQgUmVseWluZyBwYXJ0eSBpZGVudGlmaWVyLlxuICAgKiBAcGFyYW0gcHJpdmF0ZUtleSBCYXNlNjQgZW5jb2RlZCBQS0NTXG4gICAqIEBwYXJhbSBzaWduQ291bnQgaW5pdGlhbCB2YWx1ZSBmb3IgYSBzaWduYXR1cmUgY291bnRlci5cbiAgICogQGRlcHJlY2F0ZWQgVGhpcyBtZXRob2QgaGFzIGJlZW4gbWFkZSBzdGF0aWMuIENhbGwgaXQgd2l0aCBjbGFzcyBuYW1lLiBFeGFtcGxlLCBDcmVkZW50aWFsLmNyZWF0ZU5vblJlc2lkZW50Q3JlZGVudGlhbCgpXG4gICAqIEByZXR1cm5zIEEgbm9uLXJlc2lkZW50IGNyZWRlbnRpYWxcbiAgICovXG4gIGNyZWF0ZU5vblJlc2lkZW50Q3JlZGVudGlhbChpZCwgcnBJZCwgcHJpdmF0ZUtleSwgc2lnbkNvdW50KSB7XG4gICAgcmV0dXJuIG5ldyBDcmVkZW50aWFsKGlkLCBmYWxzZSwgcnBJZCwgbnVsbCwgcHJpdmF0ZUtleSwgc2lnbkNvdW50KVxuICB9XG5cbiAgdG9EaWN0KCkge1xuICAgIGxldCBjcmVkZW50aWFsRGF0YSA9IHtcbiAgICAgIGNyZWRlbnRpYWxJZDogQnVmZmVyLmZyb20odGhpcy5faWQpLnRvU3RyaW5nKCdiYXNlNjR1cmwnKSxcbiAgICAgIGlzUmVzaWRlbnRDcmVkZW50aWFsOiB0aGlzLl9pc1Jlc2lkZW50Q3JlZGVudGlhbCxcbiAgICAgIHJwSWQ6IHRoaXMuX3JwSWQsXG4gICAgICBwcml2YXRlS2V5OiBCdWZmZXIuZnJvbSh0aGlzLl9wcml2YXRlS2V5LCAnYmluYXJ5JykudG9TdHJpbmcoJ2Jhc2U2NHVybCcpLFxuICAgICAgc2lnbkNvdW50OiB0aGlzLl9zaWduQ291bnQsXG4gICAgfVxuXG4gICAgaWYgKHRoaXMudXNlckhhbmRsZSgpICE9IG51bGwpIHtcbiAgICAgIGNyZWRlbnRpYWxEYXRhWyd1c2VySGFuZGxlJ10gPSBCdWZmZXIuZnJvbSh0aGlzLl91c2VySGFuZGxlKS50b1N0cmluZygnYmFzZTY0dXJsJylcbiAgICB9XG5cbiAgICByZXR1cm4gY3JlZGVudGlhbERhdGFcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgY3JlZGVudGlhbCBmcm9tIGEgbWFwLlxuICAgKi9cbiAgZnJvbURpY3QoZGF0YSkge1xuICAgIGxldCBpZCA9IG5ldyBVaW50OEFycmF5KEJ1ZmZlci5mcm9tKGRhdGFbJ2NyZWRlbnRpYWxJZCddLCAnYmFzZTY0dXJsJykpXG4gICAgbGV0IGlzUmVzaWRlbnRDcmVkZW50aWFsID0gZGF0YVsnaXNSZXNpZGVudENyZWRlbnRpYWwnXVxuICAgIGxldCBycElkID0gZGF0YVsncnBJZCddXG4gICAgbGV0IHByaXZhdGVLZXkgPSBCdWZmZXIuZnJvbShkYXRhWydwcml2YXRlS2V5J10sICdiYXNlNjR1cmwnKS50b1N0cmluZygnYmluYXJ5JylcbiAgICBsZXQgc2lnbkNvdW50ID0gZGF0YVsnc2lnbkNvdW50J11cbiAgICBsZXQgdXNlckhhbmRsZVxuXG4gICAgaWYgKCd1c2VySGFuZGxlJyBpbiBkYXRhKSB7XG4gICAgICB1c2VySGFuZGxlID0gbmV3IFVpbnQ4QXJyYXkoQnVmZmVyLmZyb20oZGF0YVsndXNlckhhbmRsZSddLCAnYmFzZTY0dXJsJykpXG4gICAgfSBlbHNlIHtcbiAgICAgIHVzZXJIYW5kbGUgPSBudWxsXG4gICAgfVxuICAgIHJldHVybiBuZXcgQ3JlZGVudGlhbChpZCwgaXNSZXNpZGVudENyZWRlbnRpYWwsIHJwSWQsIHVzZXJIYW5kbGUsIHByaXZhdGVLZXksIHNpZ25Db3VudClcbiAgfVxufVxuXG4vLyBQVUJMSUMgQVBJXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBDcmVkZW50aWFsLFxuICBWaXJ0dWFsQXV0aGVudGljYXRvck9wdGlvbnMsXG4gIFRyYW5zcG9ydCxcbiAgUHJvdG9jb2wsXG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/lib/virtual_authenticator.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/lib/webdriver.js":
/*!**********************************************************!*\
  !*** ./node_modules/selenium-webdriver/lib/webdriver.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview The heart of the WebDriver JavaScript API.\n */\n\n\n\nconst by = __webpack_require__(/*! ./by */ \"(rsc)/./node_modules/selenium-webdriver/lib/by.js\")\nconst { RelativeBy } = __webpack_require__(/*! ./by */ \"(rsc)/./node_modules/selenium-webdriver/lib/by.js\")\nconst command = __webpack_require__(/*! ./command */ \"(rsc)/./node_modules/selenium-webdriver/lib/command.js\")\nconst error = __webpack_require__(/*! ./error */ \"(rsc)/./node_modules/selenium-webdriver/lib/error.js\")\nconst input = __webpack_require__(/*! ./input */ \"(rsc)/./node_modules/selenium-webdriver/lib/input.js\")\nconst logging = __webpack_require__(/*! ./logging */ \"(rsc)/./node_modules/selenium-webdriver/lib/logging.js\")\nconst promise = __webpack_require__(/*! ./promise */ \"(rsc)/./node_modules/selenium-webdriver/lib/promise.js\")\nconst Symbols = __webpack_require__(/*! ./symbols */ \"(rsc)/./node_modules/selenium-webdriver/lib/symbols.js\")\nconst cdp = __webpack_require__(/*! ../devtools/CDPConnection */ \"(rsc)/./node_modules/selenium-webdriver/devtools/CDPConnection.js\")\nconst WebSocket = __webpack_require__(/*! ws */ \"(rsc)/./node_modules/ws/index.js\")\nconst http = __webpack_require__(/*! ../http/index */ \"(rsc)/./node_modules/selenium-webdriver/http/index.js\")\nconst fs = __webpack_require__(/*! node:fs */ \"node:fs\")\nconst { Capabilities } = __webpack_require__(/*! ./capabilities */ \"(rsc)/./node_modules/selenium-webdriver/lib/capabilities.js\")\nconst path = __webpack_require__(/*! node:path */ \"node:path\")\nconst { NoSuchElementError } = __webpack_require__(/*! ./error */ \"(rsc)/./node_modules/selenium-webdriver/lib/error.js\")\nconst cdpTargets = ['page', 'browser']\nconst { Credential } = __webpack_require__(/*! ./virtual_authenticator */ \"(rsc)/./node_modules/selenium-webdriver/lib/virtual_authenticator.js\")\nconst webElement = __webpack_require__(/*! ./webelement */ \"(rsc)/./node_modules/selenium-webdriver/lib/webelement.js\")\nconst { isObject } = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/selenium-webdriver/lib/util.js\")\nconst BIDI = __webpack_require__(/*! ../bidi */ \"(rsc)/./node_modules/selenium-webdriver/bidi/index.js\")\nconst { PinnedScript } = __webpack_require__(/*! ./pinnedScript */ \"(rsc)/./node_modules/selenium-webdriver/lib/pinnedScript.js\")\nconst JSZip = __webpack_require__(/*! jszip */ \"(rsc)/./node_modules/jszip/lib/index.js\")\nconst Script = __webpack_require__(/*! ./script */ \"(rsc)/./node_modules/selenium-webdriver/lib/script.js\")\nconst Network = __webpack_require__(/*! ./network */ \"(rsc)/./node_modules/selenium-webdriver/lib/network.js\")\n\n// Capability names that are defined in the W3C spec.\nconst W3C_CAPABILITY_NAMES = new Set([\n  'acceptInsecureCerts',\n  'browserName',\n  'browserVersion',\n  'pageLoadStrategy',\n  'platformName',\n  'proxy',\n  'setWindowRect',\n  'strictFileInteractability',\n  'timeouts',\n  'unhandledPromptBehavior',\n  'webSocketUrl',\n])\n\n/**\n * Defines a condition for use with WebDriver's {@linkplain WebDriver#wait wait\n * command}.\n *\n * @template OUT\n */\nclass Condition {\n  /**\n   * @param {string} message A descriptive error message. Should complete the\n   *     sentence \"Waiting [...]\"\n   * @param {function(!WebDriver): OUT} fn The condition function to\n   *     evaluate on each iteration of the wait loop.\n   */\n  constructor(message, fn) {\n    /** @private {string} */\n    this.description_ = 'Waiting ' + message\n\n    /** @type {function(!WebDriver): OUT} */\n    this.fn = fn\n  }\n\n  /** @return {string} A description of this condition. */\n  description() {\n    return this.description_\n  }\n}\n\n/**\n * Defines a condition that will result in a {@link WebElement}.\n *\n * @extends {Condition<!(WebElement|IThenable<!WebElement>)>}\n */\nclass WebElementCondition extends Condition {\n  /**\n   * @param {string} message A descriptive error message. Should complete the\n   *     sentence \"Waiting [...]\"\n   * @param {function(!WebDriver): !(WebElement|IThenable<!WebElement>)}\n   *     fn The condition function to evaluate on each iteration of the wait\n   *     loop.\n   */\n  constructor(message, fn) {\n    super(message, fn)\n  }\n}\n\n//////////////////////////////////////////////////////////////////////////////\n//\n//  WebDriver\n//\n//////////////////////////////////////////////////////////////////////////////\n\n/**\n * Translates a command to its wire-protocol representation before passing it\n * to the given `executor` for execution.\n * @param {!command.Executor} executor The executor to use.\n * @param {!command.Command} command The command to execute.\n * @return {!Promise} A promise that will resolve with the command response.\n */\nfunction executeCommand(executor, command) {\n  return toWireValue(command.getParameters()).then(function (parameters) {\n    command.setParameters(parameters)\n    return executor.execute(command)\n  })\n}\n\n/**\n * Converts an object to its JSON representation in the WebDriver wire protocol.\n * When converting values of type object, the following steps will be taken:\n * <ol>\n * <li>if the object is a WebElement, the return value will be the element's\n *     server ID\n * <li>if the object defines a {@link Symbols.serialize} method, this algorithm\n *     will be recursively applied to the object's serialized representation\n * <li>if the object provides a \"toJSON\" function, this algorithm will\n *     recursively be applied to the result of that function\n * <li>otherwise, the value of each key will be recursively converted according\n *     to the rules above.\n * </ol>\n *\n * @param {*} obj The object to convert.\n * @return {!Promise<?>} A promise that will resolve to the input value's JSON\n *     representation.\n */\nasync function toWireValue(obj) {\n  let value = await Promise.resolve(obj)\n  if (value === void 0 || value === null) {\n    return value\n  }\n\n  if (typeof value === 'boolean' || typeof value === 'number' || typeof value === 'string') {\n    return value\n  }\n\n  if (Array.isArray(value)) {\n    return convertKeys(value)\n  }\n\n  if (typeof value === 'function') {\n    return '' + value\n  }\n\n  if (typeof value[Symbols.serialize] === 'function') {\n    return toWireValue(value[Symbols.serialize]())\n  } else if (typeof value.toJSON === 'function') {\n    return toWireValue(value.toJSON())\n  }\n  return convertKeys(value)\n}\n\nasync function convertKeys(obj) {\n  const isArray = Array.isArray(obj)\n  const numKeys = isArray ? obj.length : Object.keys(obj).length\n  const ret = isArray ? new Array(numKeys) : {}\n  if (!numKeys) {\n    return ret\n  }\n\n  async function forEachKey(obj, fn) {\n    if (Array.isArray(obj)) {\n      for (let i = 0, n = obj.length; i < n; i++) {\n        await fn(obj[i], i)\n      }\n    } else {\n      for (let key in obj) {\n        await fn(obj[key], key)\n      }\n    }\n  }\n\n  await forEachKey(obj, async function (value, key) {\n    ret[key] = await toWireValue(value)\n  })\n\n  return ret\n}\n\n/**\n * Converts a value from its JSON representation according to the WebDriver wire\n * protocol. Any JSON object that defines a WebElement ID will be decoded to a\n * {@link WebElement} object. All other values will be passed through as is.\n *\n * @param {!WebDriver} driver The driver to use as the parent of any unwrapped\n *     {@link WebElement} values.\n * @param {*} value The value to convert.\n * @return {*} The converted value.\n */\nfunction fromWireValue(driver, value) {\n  if (Array.isArray(value)) {\n    value = value.map((v) => fromWireValue(driver, v))\n  } else if (WebElement.isId(value)) {\n    let id = WebElement.extractId(value)\n    value = new WebElement(driver, id)\n  } else if (ShadowRoot.isId(value)) {\n    let id = ShadowRoot.extractId(value)\n    value = new ShadowRoot(driver, id)\n  } else if (isObject(value)) {\n    let result = {}\n    for (let key in value) {\n      if (Object.prototype.hasOwnProperty.call(value, key)) {\n        result[key] = fromWireValue(driver, value[key])\n      }\n    }\n    value = result\n  }\n  return value\n}\n\n/**\n * Resolves a wait message from either a function or a string.\n * @param {(string|Function)=} message An optional message to use if the wait times out.\n * @return {string} The resolved message\n */\nfunction resolveWaitMessage(message) {\n  return message ? `${typeof message === 'function' ? message() : message}\\n` : ''\n}\n\n/**\n * Structural interface for a WebDriver client.\n *\n * @record\n */\nclass IWebDriver {\n  /**\n   * Executes the provided {@link command.Command} using this driver's\n   * {@link command.Executor}.\n   *\n   * @param {!command.Command} command The command to schedule.\n   * @return {!Promise<T>} A promise that will be resolved with the command\n   *     result.\n   * @template T\n   */\n  execute(command) {} // eslint-disable-line\n\n  /**\n   * Sets the {@linkplain input.FileDetector file detector} that should be\n   * used with this instance.\n   * @param {input.FileDetector} detector The detector to use or `null`.\n   */\n  setFileDetector(detector) {} // eslint-disable-line\n\n  /**\n   * @return {!command.Executor} The command executor used by this instance.\n   */\n  getExecutor() {}\n\n  /**\n   * @return {!Promise<!Session>} A promise for this client's session.\n   */\n  getSession() {}\n\n  /**\n   * @return {!Promise<!Capabilities>} A promise that will resolve with\n   *     the instance's capabilities.\n   */\n  getCapabilities() {}\n\n  /**\n   * Terminates the browser session. After calling quit, this instance will be\n   * invalidated and may no longer be used to issue commands against the\n   * browser.\n   *\n   * @return {!Promise<void>} A promise that will be resolved when the\n   *     command has completed.\n   */\n  quit() {}\n\n  /**\n   * Creates a new action sequence using this driver. The sequence will not be\n   * submitted for execution until\n   * {@link ./input.Actions#perform Actions.perform()} is called.\n   *\n   * @param {{async: (boolean|undefined),\n   *          bridge: (boolean|undefined)}=} options Configuration options for\n   *     the action sequence (see {@link ./input.Actions Actions} documentation\n   *     for details).\n   * @return {!input.Actions} A new action sequence for this instance.\n   */\n  actions(options) {} // eslint-disable-line\n\n  /**\n   * Executes a snippet of JavaScript in the context of the currently selected\n   * frame or window. The script fragment will be executed as the body of an\n   * anonymous function. If the script is provided as a function object, that\n   * function will be converted to a string for injection into the target\n   * window.\n   *\n   * Any arguments provided in addition to the script will be included as script\n   * arguments and may be referenced using the `arguments` object. Arguments may\n   * be a boolean, number, string, or {@linkplain WebElement}. Arrays and\n   * objects may also be used as script arguments as long as each item adheres\n   * to the types previously mentioned.\n   *\n   * The script may refer to any variables accessible from the current window.\n   * Furthermore, the script will execute in the window's context, thus\n   * `document` may be used to refer to the current document. Any local\n   * variables will not be available once the script has finished executing,\n   * though global variables will persist.\n   *\n   * If the script has a return value (i.e. if the script contains a return\n   * statement), then the following steps will be taken for resolving this\n   * functions return value:\n   *\n   * - For a HTML element, the value will resolve to a {@linkplain WebElement}\n   * - Null and undefined return values will resolve to null</li>\n   * - Booleans, numbers, and strings will resolve as is</li>\n   * - Functions will resolve to their string representation</li>\n   * - For arrays and objects, each member item will be converted according to\n   *     the rules above\n   *\n   * @param {!(string|Function)} script The script to execute.\n   * @param {...*} args The arguments to pass to the script.\n   * @return {!IThenable<T>} A promise that will resolve to the\n   *    scripts return value.\n   * @template T\n   */\n  executeScript(script, ...args) {} // eslint-disable-line\n\n  /**\n   * Executes a snippet of asynchronous JavaScript in the context of the\n   * currently selected frame or window. The script fragment will be executed as\n   * the body of an anonymous function. If the script is provided as a function\n   * object, that function will be converted to a string for injection into the\n   * target window.\n   *\n   * Any arguments provided in addition to the script will be included as script\n   * arguments and may be referenced using the `arguments` object. Arguments may\n   * be a boolean, number, string, or {@linkplain WebElement}. Arrays and\n   * objects may also be used as script arguments as long as each item adheres\n   * to the types previously mentioned.\n   *\n   * Unlike executing synchronous JavaScript with {@link #executeScript},\n   * scripts executed with this function must explicitly signal they are\n   * finished by invoking the provided callback. This callback will always be\n   * injected into the executed function as the last argument, and thus may be\n   * referenced with  `arguments[arguments.length - 1]`. The following steps\n   * will be taken for resolving this functions return value against the first\n   * argument to the script's callback function:\n   *\n   * - For a HTML element, the value will resolve to a {@link WebElement}\n   * - Null and undefined return values will resolve to null\n   * - Booleans, numbers, and strings will resolve as is\n   * - Functions will resolve to their string representation\n   * - For arrays and objects, each member item will be converted according to\n   *     the rules above\n   *\n   * __Example #1:__ Performing a sleep that is synchronized with the currently\n   * selected window:\n   *\n   *     var start = new Date().getTime();\n   *     driver.executeAsyncScript(\n   *         'window.setTimeout(arguments[arguments.length - 1], 500);').\n   *         then(function() {\n   *           console.log(\n   *               'Elapsed time: ' + (new Date().getTime() - start) + ' ms');\n   *         });\n   *\n   * __Example #2:__ Synchronizing a test with an AJAX application:\n   *\n   *     var button = driver.findElement(By.id('compose-button'));\n   *     button.click();\n   *     driver.executeAsyncScript(\n   *         'var callback = arguments[arguments.length - 1];' +\n   *         'mailClient.getComposeWindowWidget().onload(callback);');\n   *     driver.switchTo().frame('composeWidget');\n   *     driver.findElement(By.id('to')).sendKeys('dog@example.com');\n   *\n   * __Example #3:__ Injecting a XMLHttpRequest and waiting for the result. In\n   * this example, the inject script is specified with a function literal. When\n   * using this format, the function is converted to a string for injection, so\n   * it should not reference any symbols not defined in the scope of the page\n   * under test.\n   *\n   *     driver.executeAsyncScript(function() {\n   *       var callback = arguments[arguments.length - 1];\n   *       var xhr = new XMLHttpRequest();\n   *       xhr.open(\"GET\", \"/resource/data.json\", true);\n   *       xhr.onreadystatechange = function() {\n   *         if (xhr.readyState == 4) {\n   *           callback(xhr.responseText);\n   *         }\n   *       };\n   *       xhr.send('');\n   *     }).then(function(str) {\n   *       console.log(JSON.parse(str)['food']);\n   *     });\n   *\n   * @param {!(string|Function)} script The script to execute.\n   * @param {...*} args The arguments to pass to the script.\n   * @return {!IThenable<T>} A promise that will resolve to the scripts return\n   *     value.\n   * @template T\n   */\n  executeAsyncScript(script, ...args) {} // eslint-disable-line\n\n  /**\n   * Waits for a condition to evaluate to a \"truthy\" value. The condition may be\n   * specified by a {@link Condition}, as a custom function, or as any\n   * promise-like thenable.\n   *\n   * For a {@link Condition} or function, the wait will repeatedly\n   * evaluate the condition until it returns a truthy value. If any errors occur\n   * while evaluating the condition, they will be allowed to propagate. In the\n   * event a condition returns a {@linkplain Promise}, the polling loop will\n   * wait for it to be resolved and use the resolved value for whether the\n   * condition has been satisfied. The resolution time for a promise is always\n   * factored into whether a wait has timed out.\n   *\n   * If the provided condition is a {@link WebElementCondition}, then\n   * the wait will return a {@link WebElementPromise} that will resolve to the\n   * element that satisfied the condition.\n   *\n   * _Example:_ waiting up to 10 seconds for an element to be present on the\n   * page.\n   *\n   *     async function example() {\n   *       let button =\n   *           await driver.wait(until.elementLocated(By.id('foo')), 10000);\n   *       await button.click();\n   *     }\n   *\n   * @param {!(IThenable<T>|\n   *           Condition<T>|\n   *           function(!WebDriver): T)} condition The condition to\n   *     wait on, defined as a promise, condition object, or  a function to\n   *     evaluate as a condition.\n   * @param {number=} timeout The duration in milliseconds, how long to wait\n   *     for the condition to be true.\n   * @param {(string|Function)=} message An optional message to use if the wait times out.\n   * @param {number=} pollTimeout The duration in milliseconds, how long to\n   *     wait between polling the condition.\n   * @return {!(IThenable<T>|WebElementPromise)} A promise that will be\n   *     resolved with the first truthy value returned by the condition\n   *     function, or rejected if the condition times out. If the input\n   *     condition is an instance of a {@link WebElementCondition},\n   *     the returned value will be a {@link WebElementPromise}.\n   * @throws {TypeError} if the provided `condition` is not a valid type.\n   * @template T\n   */\n  wait(\n    condition, // eslint-disable-line\n    timeout = undefined, // eslint-disable-line\n    message = undefined, // eslint-disable-line\n    pollTimeout = undefined, // eslint-disable-line\n  ) {}\n\n  /**\n   * Makes the driver sleep for the given amount of time.\n   *\n   * @param {number} ms The amount of time, in milliseconds, to sleep.\n   * @return {!Promise<void>} A promise that will be resolved when the sleep has\n   *     finished.\n   */\n  sleep(ms) {} // eslint-disable-line\n\n  /**\n   * Retrieves the current window handle.\n   *\n   * @return {!Promise<string>} A promise that will be resolved with the current\n   *     window handle.\n   */\n  getWindowHandle() {}\n\n  /**\n   * Retrieves a list of all available window handles.\n   *\n   * @return {!Promise<!Array<string>>} A promise that will be resolved with an\n   *     array of window handles.\n   */\n  getAllWindowHandles() {}\n\n  /**\n   * Retrieves the current page's source. The returned source is a representation\n   * of the underlying DOM: do not expect it to be formatted or escaped in the\n   * same way as the raw response sent from the web server.\n   *\n   * @return {!Promise<string>} A promise that will be resolved with the current\n   *     page source.\n   */\n  getPageSource() {}\n\n  /**\n   * Closes the current window.\n   *\n   * @return {!Promise<void>} A promise that will be resolved when this command\n   *     has completed.\n   */\n  close() {}\n\n  /**\n   * Navigates to the given URL.\n   *\n   * @param {string} url The fully qualified URL to open.\n   * @return {!Promise<void>} A promise that will be resolved when the document\n   *     has finished loading.\n   */\n  get(url) {} // eslint-disable-line\n\n  /**\n   * Retrieves the URL for the current page.\n   *\n   * @return {!Promise<string>} A promise that will be resolved with the\n   *     current URL.\n   */\n  getCurrentUrl() {}\n\n  /**\n   * Retrieves the current page title.\n   *\n   * @return {!Promise<string>} A promise that will be resolved with the current\n   *     page's title.\n   */\n  getTitle() {}\n\n  /**\n   * Locates an element on the page. If the element cannot be found, a\n   * {@link error.NoSuchElementError} will be returned by the driver.\n   *\n   * This function should not be used to test whether an element is present on\n   * the page. Rather, you should use {@link #findElements}:\n   *\n   *     driver.findElements(By.id('foo'))\n   *         .then(found => console.log('Element found? %s', !!found.length));\n   *\n   * The search criteria for an element may be defined using one of the\n   * factories in the {@link webdriver.By} namespace, or as a short-hand\n   * {@link webdriver.By.Hash} object. For example, the following two statements\n   * are equivalent:\n   *\n   *     var e1 = driver.findElement(By.id('foo'));\n   *     var e2 = driver.findElement({id:'foo'});\n   *\n   * You may also provide a custom locator function, which takes as input this\n   * instance and returns a {@link WebElement}, or a promise that will resolve\n   * to a WebElement. If the returned promise resolves to an array of\n   * WebElements, WebDriver will use the first element. For example, to find the\n   * first visible link on a page, you could write:\n   *\n   *     var link = driver.findElement(firstVisibleLink);\n   *\n   *     function firstVisibleLink(driver) {\n   *       var links = driver.findElements(By.tagName('a'));\n   *       return promise.filter(links, function(link) {\n   *         return link.isDisplayed();\n   *       });\n   *     }\n   *\n   * @param {!(by.By|Function)} locator The locator to use.\n   * @return {!WebElementPromise} A WebElement that can be used to issue\n   *     commands against the located element. If the element is not found, the\n   *     element will be invalidated and all scheduled commands aborted.\n   */\n  findElement(locator) {} // eslint-disable-line\n\n  /**\n   * Search for multiple elements on the page. Refer to the documentation on\n   * {@link #findElement(by)} for information on element locator strategies.\n   *\n   * @param {!(by.By|Function)} locator The locator to use.\n   * @return {!Promise<!Array<!WebElement>>} A promise that will resolve to an\n   *     array of WebElements.\n   */\n  findElements(locator) {} // eslint-disable-line\n\n  /**\n   * Takes a screenshot of the current page. The driver makes the best effort to\n   * return a screenshot of the following, in order of preference:\n   *\n   * 1. Entire page\n   * 2. Current window\n   * 3. Visible portion of the current frame\n   * 4. The entire display containing the browser\n   *\n   * @return {!Promise<string>} A promise that will be resolved to the\n   *     screenshot as a base-64 encoded PNG.\n   */\n  takeScreenshot() {}\n\n  /**\n   * @return {!Options} The options interface for this instance.\n   */\n  manage() {}\n\n  /**\n   * @return {!Navigation} The navigation interface for this instance.\n   */\n  navigate() {}\n\n  /**\n   * @return {!TargetLocator} The target locator interface for this\n   *     instance.\n   */\n  switchTo() {}\n\n  /**\n   *\n   * Takes a PDF of the current page. The driver makes a best effort to\n   * return a PDF based on the provided parameters.\n   *\n   * @param {{orientation:(string|undefined),\n   *         scale:(number|undefined),\n   *         background:(boolean|undefined),\n   *         width:(number|undefined),\n   *         height:(number|undefined),\n   *         top:(number|undefined),\n   *         bottom:(number|undefined),\n   *         left:(number|undefined),\n   *         right:(number|undefined),\n   *         shrinkToFit:(boolean|undefined),\n   *         pageRanges:(Array|undefined)}} options\n   */\n  printPage(options) {} // eslint-disable-line\n}\n\n/**\n * @param {!Capabilities} capabilities A capabilities object.\n * @return {!Capabilities} A copy of the parameter capabilities, omitting\n *     capability names that are not valid W3C names.\n */\nfunction filterNonW3CCaps(capabilities) {\n  let newCaps = new Capabilities(capabilities)\n  for (let k of newCaps.keys()) {\n    // Any key containing a colon is a vendor-prefixed capability.\n    if (!(W3C_CAPABILITY_NAMES.has(k) || k.indexOf(':') >= 0)) {\n      newCaps.delete(k)\n    }\n  }\n  return newCaps\n}\n\n/**\n * Each WebDriver instance provides automated control over a browser session.\n *\n * @implements {IWebDriver}\n */\nclass WebDriver {\n  #script = undefined\n  #network = undefined\n  /**\n   * @param {!(./session.Session|IThenable<!./session.Session>)} session Either\n   *     a known session or a promise that will be resolved to a session.\n   * @param {!command.Executor} executor The executor to use when sending\n   *     commands to the browser.\n   * @param {(function(this: void): ?)=} onQuit A function to call, if any,\n   *     when the session is terminated.\n   */\n  constructor(session, executor, onQuit = undefined) {\n    /** @private {!Promise<!Session>} */\n    this.session_ = Promise.resolve(session)\n\n    // If session is a rejected promise, add a no-op rejection handler.\n    // This effectively hides setup errors until users attempt to interact\n    // with the session.\n    this.session_.catch(function () {})\n\n    /** @private {!command.Executor} */\n    this.executor_ = executor\n\n    /** @private {input.FileDetector} */\n    this.fileDetector_ = null\n\n    /** @private @const {(function(this: void): ?|undefined)} */\n    this.onQuit_ = onQuit\n\n    /** @private {./virtual_authenticator}*/\n    this.authenticatorId_ = null\n\n    this.pinnedScripts_ = {}\n  }\n\n  /**\n   * Creates a new WebDriver session.\n   *\n   * This function will always return a WebDriver instance. If there is an error\n   * creating the session, such as the aforementioned SessionNotCreatedError,\n   * the driver will have a rejected {@linkplain #getSession session} promise.\n   * This rejection will propagate through any subsequent commands scheduled\n   * on the returned WebDriver instance.\n   *\n   *     let required = Capabilities.firefox();\n   *     let driver = WebDriver.createSession(executor, {required});\n   *\n   *     // If the createSession operation failed, then this command will also\n   *     // also fail, propagating the creation failure.\n   *     driver.get('http://www.google.com').catch(e => console.log(e));\n   *\n   * @param {!command.Executor} executor The executor to create the new session\n   *     with.\n   * @param {!Capabilities} capabilities The desired capabilities for the new\n   *     session.\n   * @param {(function(this: void): ?)=} onQuit A callback to invoke when\n   *    the newly created session is terminated. This should be used to clean\n   *    up any resources associated with the session.\n   * @return {!WebDriver} The driver for the newly created session.\n   */\n  static createSession(executor, capabilities, onQuit = undefined) {\n    let cmd = new command.Command(command.Name.NEW_SESSION)\n\n    // For W3C remote ends.\n    cmd.setParameter('capabilities', {\n      firstMatch: [{}],\n      alwaysMatch: filterNonW3CCaps(capabilities),\n    })\n\n    let session = executeCommand(executor, cmd)\n    if (typeof onQuit === 'function') {\n      session = session.catch((err) => {\n        return Promise.resolve(onQuit.call(void 0)).then((_) => {\n          throw err\n        })\n      })\n    }\n    return new this(session, executor, onQuit)\n  }\n\n  /** @override */\n  async execute(command) {\n    command.setParameter('sessionId', this.session_)\n\n    let parameters = await toWireValue(command.getParameters())\n    command.setParameters(parameters)\n    let value = await this.executor_.execute(command)\n    return fromWireValue(this, value)\n  }\n\n  /** @override */\n  setFileDetector(detector) {\n    this.fileDetector_ = detector\n  }\n\n  /** @override */\n  getExecutor() {\n    return this.executor_\n  }\n\n  /** @override */\n  getSession() {\n    return this.session_\n  }\n\n  /** @override */\n  getCapabilities() {\n    return this.session_.then((s) => s.getCapabilities())\n  }\n\n  /** @override */\n  quit() {\n    let result = this.execute(new command.Command(command.Name.QUIT))\n    // Delete our session ID when the quit command finishes; this will allow us\n    // to throw an error when attempting to use a driver post-quit.\n    return promise.finally(result, () => {\n      this.session_ = Promise.reject(\n        new error.NoSuchSessionError(\n          'This driver instance does not have a valid session ID ' +\n            '(did you call WebDriver.quit()?) and may no longer be used.',\n        ),\n      )\n\n      // Only want the session rejection to bubble if accessed.\n      this.session_.catch(function () {})\n\n      if (this.onQuit_) {\n        return this.onQuit_.call(void 0)\n      }\n\n      // Close the websocket connection on quit\n      // If the websocket connection is not closed,\n      // and we are running CDP sessions against the Selenium Grid,\n      // the node process never exits since the websocket connection is open until the Grid is shutdown.\n      if (this._wsConnection !== undefined) {\n        this._wsConnection.close()\n      }\n    })\n  }\n\n  /** @override */\n  actions(options) {\n    return new input.Actions(this, options || undefined)\n  }\n\n  /** @override */\n  executeScript(script, ...args) {\n    if (typeof script === 'function') {\n      script = 'return (' + script + ').apply(null, arguments);'\n    }\n\n    if (script && script instanceof PinnedScript) {\n      return this.execute(\n        new command.Command(command.Name.EXECUTE_SCRIPT)\n          .setParameter('script', script.executionScript())\n          .setParameter('args', args),\n      )\n    }\n\n    return this.execute(\n      new command.Command(command.Name.EXECUTE_SCRIPT).setParameter('script', script).setParameter('args', args),\n    )\n  }\n\n  /** @override */\n  executeAsyncScript(script, ...args) {\n    if (typeof script === 'function') {\n      script = 'return (' + script + ').apply(null, arguments);'\n    }\n\n    if (script && script instanceof PinnedScript) {\n      return this.execute(\n        new command.Command(command.Name.EXECUTE_ASYNC_SCRIPT)\n          .setParameter('script', script.executionScript())\n          .setParameter('args', args),\n      )\n    }\n\n    return this.execute(\n      new command.Command(command.Name.EXECUTE_ASYNC_SCRIPT).setParameter('script', script).setParameter('args', args),\n    )\n  }\n\n  /** @override */\n  wait(condition, timeout = 0, message = undefined, pollTimeout = 200) {\n    if (typeof timeout !== 'number' || timeout < 0) {\n      throw TypeError('timeout must be a number >= 0: ' + timeout)\n    }\n\n    if (typeof pollTimeout !== 'number' || pollTimeout < 0) {\n      throw TypeError('pollTimeout must be a number >= 0: ' + pollTimeout)\n    }\n\n    if (promise.isPromise(condition)) {\n      return new Promise((resolve, reject) => {\n        if (!timeout) {\n          resolve(condition)\n          return\n        }\n\n        let start = Date.now()\n        let timer = setTimeout(function () {\n          timer = null\n          try {\n            let timeoutMessage = resolveWaitMessage(message)\n            reject(\n              new error.TimeoutError(\n                `${timeoutMessage}Timed out waiting for promise to resolve after ${Date.now() - start}ms`,\n              ),\n            )\n          } catch (ex) {\n            reject(\n              new error.TimeoutError(\n                `${ex.message}\\nTimed out waiting for promise to resolve after ${Date.now() - start}ms`,\n              ),\n            )\n          }\n        }, timeout)\n        const clearTimer = () => timer && clearTimeout(timer)\n\n        /** @type {!IThenable} */ condition.then(\n          function (value) {\n            clearTimer()\n            resolve(value)\n          },\n          function (error) {\n            clearTimer()\n            reject(error)\n          },\n        )\n      })\n    }\n\n    let fn = /** @type {!Function} */ (condition)\n    if (condition instanceof Condition) {\n      message = message || condition.description()\n      fn = condition.fn\n    }\n\n    if (typeof fn !== 'function') {\n      throw TypeError('Wait condition must be a promise-like object, function, or a ' + 'Condition object')\n    }\n\n    const driver = this\n\n    function evaluateCondition() {\n      return new Promise((resolve, reject) => {\n        try {\n          resolve(fn(driver))\n        } catch (ex) {\n          reject(ex)\n        }\n      })\n    }\n\n    let result = new Promise((resolve, reject) => {\n      const startTime = Date.now()\n      const pollCondition = async () => {\n        evaluateCondition().then(function (value) {\n          const elapsed = Date.now() - startTime\n          if (value) {\n            resolve(value)\n          } else if (timeout && elapsed >= timeout) {\n            try {\n              let timeoutMessage = resolveWaitMessage(message)\n              reject(new error.TimeoutError(`${timeoutMessage}Wait timed out after ${elapsed}ms`))\n            } catch (ex) {\n              reject(new error.TimeoutError(`${ex.message}\\nWait timed out after ${elapsed}ms`))\n            }\n          } else {\n            setTimeout(pollCondition, pollTimeout)\n          }\n        }, reject)\n      }\n      pollCondition()\n    })\n\n    if (condition instanceof WebElementCondition) {\n      result = new WebElementPromise(\n        this,\n        result.then(function (value) {\n          if (!(value instanceof WebElement)) {\n            throw TypeError(\n              'WebElementCondition did not resolve to a WebElement: ' + Object.prototype.toString.call(value),\n            )\n          }\n          return value\n        }),\n      )\n    }\n    return result\n  }\n\n  /** @override */\n  sleep(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms))\n  }\n\n  /** @override */\n  getWindowHandle() {\n    return this.execute(new command.Command(command.Name.GET_CURRENT_WINDOW_HANDLE))\n  }\n\n  /** @override */\n  getAllWindowHandles() {\n    return this.execute(new command.Command(command.Name.GET_WINDOW_HANDLES))\n  }\n\n  /** @override */\n  getPageSource() {\n    return this.execute(new command.Command(command.Name.GET_PAGE_SOURCE))\n  }\n\n  /** @override */\n  close() {\n    return this.execute(new command.Command(command.Name.CLOSE))\n  }\n\n  /** @override */\n  get(url) {\n    return this.navigate().to(url)\n  }\n\n  /** @override */\n  getCurrentUrl() {\n    return this.execute(new command.Command(command.Name.GET_CURRENT_URL))\n  }\n\n  /** @override */\n  getTitle() {\n    return this.execute(new command.Command(command.Name.GET_TITLE))\n  }\n\n  /** @override */\n  findElement(locator) {\n    let id\n    let cmd = null\n\n    if (locator instanceof RelativeBy) {\n      cmd = new command.Command(command.Name.FIND_ELEMENTS_RELATIVE).setParameter('args', locator.marshall())\n    } else {\n      locator = by.checkedLocator(locator)\n    }\n\n    if (typeof locator === 'function') {\n      id = this.findElementInternal_(locator, this)\n      return new WebElementPromise(this, id)\n    } else if (cmd === null) {\n      cmd = new command.Command(command.Name.FIND_ELEMENT)\n        .setParameter('using', locator.using)\n        .setParameter('value', locator.value)\n    }\n\n    id = this.execute(cmd)\n    if (locator instanceof RelativeBy) {\n      return this.normalize_(id)\n    } else {\n      return new WebElementPromise(this, id)\n    }\n  }\n\n  /**\n   * @param {!Function} webElementPromise The webElement in unresolved state\n   * @return {!Promise<!WebElement>} First single WebElement from array of resolved promises\n   */\n  async normalize_(webElementPromise) {\n    let result = await webElementPromise\n    if (result.length === 0) {\n      throw new NoSuchElementError('Cannot locate an element with provided parameters')\n    } else {\n      return result[0]\n    }\n  }\n\n  /**\n   * @param {!Function} locatorFn The locator function to use.\n   * @param {!(WebDriver|WebElement)} context The search context.\n   * @return {!Promise<!WebElement>} A promise that will resolve to a list of\n   *     WebElements.\n   * @private\n   */\n  async findElementInternal_(locatorFn, context) {\n    let result = await locatorFn(context)\n    if (Array.isArray(result)) {\n      result = result[0]\n    }\n    if (!(result instanceof WebElement)) {\n      throw new TypeError('Custom locator did not return a WebElement')\n    }\n    return result\n  }\n\n  /** @override */\n  async findElements(locator) {\n    let cmd = null\n    if (locator instanceof RelativeBy) {\n      cmd = new command.Command(command.Name.FIND_ELEMENTS_RELATIVE).setParameter('args', locator.marshall())\n    } else {\n      locator = by.checkedLocator(locator)\n    }\n\n    if (typeof locator === 'function') {\n      return this.findElementsInternal_(locator, this)\n    } else if (cmd === null) {\n      cmd = new command.Command(command.Name.FIND_ELEMENTS)\n        .setParameter('using', locator.using)\n        .setParameter('value', locator.value)\n    }\n    try {\n      let res = await this.execute(cmd)\n      return Array.isArray(res) ? res : []\n    } catch (ex) {\n      if (ex instanceof error.NoSuchElementError) {\n        return []\n      }\n      throw ex\n    }\n  }\n\n  /**\n   * @param {!Function} locatorFn The locator function to use.\n   * @param {!(WebDriver|WebElement)} context The search context.\n   * @return {!Promise<!Array<!WebElement>>} A promise that will resolve to an\n   *     array of WebElements.\n   * @private\n   */\n  async findElementsInternal_(locatorFn, context) {\n    const result = await locatorFn(context)\n    if (result instanceof WebElement) {\n      return [result]\n    }\n\n    if (!Array.isArray(result)) {\n      return []\n    }\n\n    return result.filter(function (item) {\n      return item instanceof WebElement\n    })\n  }\n\n  /** @override */\n  takeScreenshot() {\n    return this.execute(new command.Command(command.Name.SCREENSHOT))\n  }\n\n  /** @override */\n  manage() {\n    return new Options(this)\n  }\n\n  /** @override */\n  navigate() {\n    return new Navigation(this)\n  }\n\n  /** @override */\n  switchTo() {\n    return new TargetLocator(this)\n  }\n\n  script() {\n    // The Script calls the LogInspector which maintains state of the callbacks.\n    // Returning a new instance of the same driver will not work while removing callbacks.\n    if (this.#script === undefined) {\n      this.#script = new Script(this)\n    }\n\n    return this.#script\n  }\n\n  network() {\n    // The Network maintains state of the callbacks.\n    // Returning a new instance of the same driver will not work while removing callbacks.\n    if (this.#network === undefined) {\n      this.#network = new Network(this)\n    }\n\n    return this.#network\n  }\n\n  validatePrintPageParams(keys, object) {\n    let page = {}\n    let margin = {}\n    let data\n    Object.keys(keys).forEach(function (key) {\n      data = keys[key]\n      let obj = {\n        orientation: function () {\n          object.orientation = data\n        },\n\n        scale: function () {\n          object.scale = data\n        },\n\n        background: function () {\n          object.background = data\n        },\n\n        width: function () {\n          page.width = data\n          object.page = page\n        },\n\n        height: function () {\n          page.height = data\n          object.page = page\n        },\n\n        top: function () {\n          margin.top = data\n          object.margin = margin\n        },\n\n        left: function () {\n          margin.left = data\n          object.margin = margin\n        },\n\n        bottom: function () {\n          margin.bottom = data\n          object.margin = margin\n        },\n\n        right: function () {\n          margin.right = data\n          object.margin = margin\n        },\n\n        shrinkToFit: function () {\n          object.shrinkToFit = data\n        },\n\n        pageRanges: function () {\n          object.pageRanges = data\n        },\n      }\n\n      if (!Object.prototype.hasOwnProperty.call(obj, key)) {\n        throw new error.InvalidArgumentError(`Invalid Argument '${key}'`)\n      } else {\n        obj[key]()\n      }\n    })\n\n    return object\n  }\n\n  /** @override */\n  printPage(options = {}) {\n    let keys = options\n    let params = {}\n    let resultObj\n\n    let self = this\n    resultObj = self.validatePrintPageParams(keys, params)\n\n    return this.execute(new command.Command(command.Name.PRINT_PAGE).setParameters(resultObj))\n  }\n\n  /**\n   * Creates a new WebSocket connection.\n   * @return {!Promise<resolved>} A new CDP instance.\n   */\n  async createCDPConnection(target) {\n    let debuggerUrl = null\n\n    const caps = await this.getCapabilities()\n\n    if (process.env.SELENIUM_REMOTE_URL) {\n      const host = new URL(process.env.SELENIUM_REMOTE_URL).host\n      const sessionId = await this.getSession().then((session) => session.getId())\n      debuggerUrl = `ws://${host}/session/${sessionId}/se/cdp`\n    } else {\n      const seCdp = caps['map_'].get('se:cdp')\n      const vendorInfo =\n        caps['map_'].get('goog:chromeOptions') ||\n        caps['map_'].get('ms:edgeOptions') ||\n        caps['map_'].get('moz:debuggerAddress') ||\n        new Map()\n      debuggerUrl = seCdp || vendorInfo['debuggerAddress'] || vendorInfo\n    }\n    this._wsUrl = await this.getWsUrl(debuggerUrl, target, caps)\n    return new Promise((resolve, reject) => {\n      try {\n        this._wsConnection = new WebSocket(this._wsUrl.replace('localhost', '127.0.0.1'))\n        this._cdpConnection = new cdp.CdpConnection(this._wsConnection)\n      } catch (err) {\n        reject(err)\n        return\n      }\n\n      this._wsConnection.on('open', async () => {\n        await this.getCdpTargets()\n      })\n\n      this._wsConnection.on('message', async (message) => {\n        const params = JSON.parse(message)\n        if (params.result) {\n          if (params.result.targetInfos) {\n            const targets = params.result.targetInfos\n            const page = targets.find((info) => info.type === 'page')\n            if (page) {\n              this.targetID = page.targetId\n              this._cdpConnection.execute('Target.attachToTarget', { targetId: this.targetID, flatten: true }, null)\n            } else {\n              reject('Unable to find Page target.')\n            }\n          }\n          if (params.result.sessionId) {\n            this.sessionId = params.result.sessionId\n            this._cdpConnection.sessionId = this.sessionId\n            resolve(this._cdpConnection)\n          }\n        }\n      })\n\n      this._wsConnection.on('error', (error) => {\n        reject(error)\n      })\n    })\n  }\n\n  async getCdpTargets() {\n    this._cdpConnection.execute('Target.getTargets')\n  }\n\n  /**\n   * Initiates bidi connection using 'webSocketUrl'\n   * @returns {BIDI}\n   */\n  async getBidi() {\n    const caps = await this.getCapabilities()\n    let WebSocketUrl = caps['map_'].get('webSocketUrl')\n    return new BIDI(WebSocketUrl.replace('localhost', '127.0.0.1'))\n  }\n\n  /**\n   * Retrieves 'webSocketDebuggerUrl' by sending a http request using debugger address\n   * @param {string} debuggerAddress\n   * @param target\n   * @param caps\n   * @return {string} Returns parsed webSocketDebuggerUrl obtained from the http request\n   */\n  async getWsUrl(debuggerAddress, target, caps) {\n    if (target && cdpTargets.indexOf(target.toLowerCase()) === -1) {\n      throw new error.InvalidArgumentError('invalid target value')\n    }\n\n    if (debuggerAddress.match(/\\/se\\/cdp/)) {\n      return debuggerAddress\n    }\n\n    let path\n    if (target === 'page' && caps['map_'].get('browserName') !== 'firefox') {\n      path = '/json'\n    } else if (target === 'page' && caps['map_'].get('browserName') === 'firefox') {\n      path = '/json/list'\n    } else {\n      path = '/json/version'\n    }\n\n    let request = new http.Request('GET', path)\n    let client = new http.HttpClient('http://' + debuggerAddress)\n    let response = await client.send(request)\n\n    if (target.toLowerCase() === 'page') {\n      return JSON.parse(response.body)[0]['webSocketDebuggerUrl']\n    } else {\n      return JSON.parse(response.body)['webSocketDebuggerUrl']\n    }\n  }\n\n  /**\n   * Sets a listener for Fetch.authRequired event from CDP\n   * If event is triggered, it enters username and password\n   * and allows the test to move forward\n   * @param {string} username\n   * @param {string} password\n   * @param connection CDP Connection\n   */\n  async register(username, password, connection) {\n    this._wsConnection.on('message', (message) => {\n      const params = JSON.parse(message)\n\n      if (params.method === 'Fetch.authRequired') {\n        const requestParams = params['params']\n        connection.execute('Fetch.continueWithAuth', {\n          requestId: requestParams['requestId'],\n          authChallengeResponse: {\n            response: 'ProvideCredentials',\n            username: username,\n            password: password,\n          },\n        })\n      } else if (params.method === 'Fetch.requestPaused') {\n        const requestPausedParams = params['params']\n        connection.execute('Fetch.continueRequest', {\n          requestId: requestPausedParams['requestId'],\n        })\n      }\n    })\n\n    await connection.execute(\n      'Fetch.enable',\n      {\n        handleAuthRequests: true,\n      },\n      null,\n    )\n    await connection.execute(\n      'Network.setCacheDisabled',\n      {\n        cacheDisabled: true,\n      },\n      null,\n    )\n  }\n\n  /**\n   * Handle Network interception requests\n   * @param connection WebSocket connection to the browser\n   * @param httpResponse Object representing what we are intercepting\n   *                     as well as what should be returned.\n   * @param callback callback called when we intercept requests.\n   */\n  async onIntercept(connection, httpResponse, callback) {\n    this._wsConnection.on('message', (message) => {\n      const params = JSON.parse(message)\n      if (params.method === 'Fetch.requestPaused') {\n        const requestPausedParams = params['params']\n        if (requestPausedParams.request.url == httpResponse.urlToIntercept) {\n          connection.execute('Fetch.fulfillRequest', {\n            requestId: requestPausedParams['requestId'],\n            responseCode: httpResponse.status,\n            responseHeaders: httpResponse.headers,\n            body: httpResponse.body,\n          })\n          callback()\n        } else {\n          connection.execute('Fetch.continueRequest', {\n            requestId: requestPausedParams['requestId'],\n          })\n        }\n      }\n    })\n\n    await connection.execute('Fetch.enable', {}, null)\n    await connection.execute(\n      'Network.setCacheDisabled',\n      {\n        cacheDisabled: true,\n      },\n      null,\n    )\n  }\n\n  /**\n   *\n   * @param connection\n   * @param callback\n   * @returns {Promise<void>}\n   */\n  async onLogEvent(connection, callback) {\n    this._wsConnection.on('message', (message) => {\n      const params = JSON.parse(message)\n      if (params.method === 'Runtime.consoleAPICalled') {\n        const consoleEventParams = params['params']\n        let event = {\n          type: consoleEventParams['type'],\n          timestamp: new Date(consoleEventParams['timestamp']),\n          args: consoleEventParams['args'],\n        }\n\n        callback(event)\n      }\n\n      if (params.method === 'Log.entryAdded') {\n        const logEventParams = params['params']\n        const logEntry = logEventParams['entry']\n        let event = {\n          level: logEntry['level'],\n          timestamp: new Date(logEntry['timestamp']),\n          message: logEntry['text'],\n        }\n\n        callback(event)\n      }\n    })\n    await connection.execute('Runtime.enable', {}, null)\n  }\n\n  /**\n   *\n   * @param connection\n   * @param callback\n   * @returns {Promise<void>}\n   */\n  async onLogException(connection, callback) {\n    await connection.execute('Runtime.enable', {}, null)\n\n    this._wsConnection.on('message', (message) => {\n      const params = JSON.parse(message)\n\n      if (params.method === 'Runtime.exceptionThrown') {\n        const exceptionEventParams = params['params']\n        let event = {\n          exceptionDetails: exceptionEventParams['exceptionDetails'],\n          timestamp: new Date(exceptionEventParams['timestamp']),\n        }\n\n        callback(event)\n      }\n    })\n  }\n\n  /**\n   * @param connection\n   * @param callback\n   * @returns {Promise<void>}\n   */\n  async logMutationEvents(connection, callback) {\n    await connection.execute('Runtime.enable', {}, null)\n    await connection.execute('Page.enable', {}, null)\n\n    await connection.execute(\n      'Runtime.addBinding',\n      {\n        name: '__webdriver_attribute',\n      },\n      null,\n    )\n\n    let mutationListener = ''\n    try {\n      // Depending on what is running the code it could appear in 2 different places which is why we try\n      // here and then the other location\n      mutationListener = fs\n        .readFileSync('./javascript/node/selenium-webdriver/lib/atoms/mutation-listener.js', 'utf-8')\n        .toString()\n    } catch {\n      mutationListener = fs.readFileSync(path.resolve(__dirname, './atoms/mutation-listener.js'), 'utf-8').toString()\n    }\n\n    this.executeScript(mutationListener)\n\n    await connection.execute(\n      'Page.addScriptToEvaluateOnNewDocument',\n      {\n        source: mutationListener,\n      },\n      null,\n    )\n\n    this._wsConnection.on('message', async (message) => {\n      const params = JSON.parse(message)\n      if (params.method === 'Runtime.bindingCalled') {\n        let payload = JSON.parse(params['params']['payload'])\n        let elements = await this.findElements({\n          css: '*[data-__webdriver_id=' + by.escapeCss(payload['target']) + ']',\n        })\n\n        if (elements.length === 0) {\n          return\n        }\n\n        let event = {\n          element: elements[0],\n          attribute_name: payload['name'],\n          current_value: payload['value'],\n          old_value: payload['oldValue'],\n        }\n        callback(event)\n      }\n    })\n  }\n\n  async pinScript(script) {\n    let pinnedScript = new PinnedScript(script)\n    let connection\n    if (Object.is(this._cdpConnection, undefined)) {\n      connection = await this.createCDPConnection('page')\n    } else {\n      connection = this._cdpConnection\n    }\n\n    await connection.execute('Page.enable', {}, null)\n\n    await connection.execute(\n      'Runtime.evaluate',\n      {\n        expression: pinnedScript.creationScript(),\n      },\n      null,\n    )\n\n    let result = await connection.send('Page.addScriptToEvaluateOnNewDocument', {\n      source: pinnedScript.creationScript(),\n    })\n\n    pinnedScript.scriptId = result['result']['identifier']\n\n    this.pinnedScripts_[pinnedScript.handle] = pinnedScript\n\n    return pinnedScript\n  }\n\n  async unpinScript(script) {\n    if (script && !(script instanceof PinnedScript)) {\n      throw Error(`Pass valid PinnedScript object. Received: ${script}`)\n    }\n\n    if (script.handle in this.pinnedScripts_) {\n      let connection\n      if (Object.is(this._cdpConnection, undefined)) {\n        connection = this.createCDPConnection('page')\n      } else {\n        connection = this._cdpConnection\n      }\n\n      await connection.execute('Page.enable', {}, null)\n\n      await connection.execute(\n        'Runtime.evaluate',\n        {\n          expression: script.removalScript(),\n        },\n        null,\n      )\n\n      await connection.execute(\n        'Page.removeScriptToEvaluateOnLoad',\n        {\n          identifier: script.scriptId,\n        },\n        null,\n      )\n\n      delete this.pinnedScripts_[script.handle]\n    }\n  }\n\n  /**\n   *\n   * @returns The value of authenticator ID added\n   */\n  virtualAuthenticatorId() {\n    return this.authenticatorId_\n  }\n\n  /**\n   * Adds a virtual authenticator with the given options.\n   * @param options VirtualAuthenticatorOptions object to set authenticator options.\n   */\n  async addVirtualAuthenticator(options) {\n    this.authenticatorId_ = await this.execute(\n      new command.Command(command.Name.ADD_VIRTUAL_AUTHENTICATOR).setParameters(options.toDict()),\n    )\n  }\n\n  /**\n   * Removes a previously added virtual authenticator. The authenticator is no\n   * longer valid after removal, so no methods may be called.\n   */\n  async removeVirtualAuthenticator() {\n    await this.execute(\n      new command.Command(command.Name.REMOVE_VIRTUAL_AUTHENTICATOR).setParameter(\n        'authenticatorId',\n        this.authenticatorId_,\n      ),\n    )\n    this.authenticatorId_ = null\n  }\n\n  /**\n   * Injects a credential into the authenticator.\n   * @param credential Credential to be added\n   */\n  async addCredential(credential) {\n    credential = credential.toDict()\n    credential['authenticatorId'] = this.authenticatorId_\n    await this.execute(new command.Command(command.Name.ADD_CREDENTIAL).setParameters(credential))\n  }\n\n  /**\n   *\n   * @returns The list of credentials owned by the authenticator.\n   */\n  async getCredentials() {\n    let credential_data = await this.execute(\n      new command.Command(command.Name.GET_CREDENTIALS).setParameter('authenticatorId', this.virtualAuthenticatorId()),\n    )\n    var credential_list = []\n    for (var i = 0; i < credential_data.length; i++) {\n      credential_list.push(new Credential().fromDict(credential_data[i]))\n    }\n    return credential_list\n  }\n\n  /**\n   * Removes a credential from the authenticator.\n   * @param credential_id The ID of the credential to be removed.\n   */\n  async removeCredential(credential_id) {\n    // If credential_id is not a base64url, then convert it to base64url.\n    if (Array.isArray(credential_id)) {\n      credential_id = Buffer.from(credential_id).toString('base64url')\n    }\n\n    await this.execute(\n      new command.Command(command.Name.REMOVE_CREDENTIAL)\n        .setParameter('credentialId', credential_id)\n        .setParameter('authenticatorId', this.authenticatorId_),\n    )\n  }\n\n  /**\n   * Removes all the credentials from the authenticator.\n   */\n  async removeAllCredentials() {\n    await this.execute(\n      new command.Command(command.Name.REMOVE_ALL_CREDENTIALS).setParameter('authenticatorId', this.authenticatorId_),\n    )\n  }\n\n  /**\n   * Sets whether the authenticator will simulate success or fail on user verification.\n   * @param verified true if the authenticator will pass user verification, false otherwise.\n   */\n  async setUserVerified(verified) {\n    await this.execute(\n      new command.Command(command.Name.SET_USER_VERIFIED)\n        .setParameter('authenticatorId', this.authenticatorId_)\n        .setParameter('isUserVerified', verified),\n    )\n  }\n\n  async getDownloadableFiles() {\n    const caps = await this.getCapabilities()\n    if (!caps['map_'].get('se:downloadsEnabled')) {\n      throw new error.WebDriverError('Downloads must be enabled in options')\n    }\n\n    return (await this.execute(new command.Command(command.Name.GET_DOWNLOADABLE_FILES))).names\n  }\n\n  async downloadFile(fileName, targetDirectory) {\n    const caps = await this.getCapabilities()\n    if (!caps['map_'].get('se:downloadsEnabled')) {\n      throw new Error('Downloads must be enabled in options')\n    }\n\n    const response = await this.execute(new command.Command(command.Name.DOWNLOAD_FILE).setParameter('name', fileName))\n\n    const base64Content = response.contents\n\n    if (!targetDirectory.endsWith('/')) {\n      targetDirectory += '/'\n    }\n\n    fs.mkdirSync(targetDirectory, { recursive: true })\n    const zipFilePath = path.join(targetDirectory, `${fileName}.zip`)\n    fs.writeFileSync(zipFilePath, Buffer.from(base64Content, 'base64'))\n\n    const zipData = fs.readFileSync(zipFilePath)\n    await JSZip.loadAsync(zipData)\n      .then((zip) => {\n        // Iterate through each file in the zip archive\n        Object.keys(zip.files).forEach(async (fileName) => {\n          const fileData = await zip.files[fileName].async('nodebuffer')\n          fs.writeFileSync(`${targetDirectory}/${fileName}`, fileData)\n          console.log(`File extracted: ${fileName}`)\n        })\n      })\n      .catch((error) => {\n        console.error('Error unzipping file:', error)\n      })\n  }\n\n  async deleteDownloadableFiles() {\n    const caps = await this.getCapabilities()\n    if (!caps['map_'].get('se:downloadsEnabled')) {\n      throw new error.WebDriverError('Downloads must be enabled in options')\n    }\n\n    return await this.execute(new command.Command(command.Name.DELETE_DOWNLOADABLE_FILES))\n  }\n}\n\n/**\n * Interface for navigating back and forth in the browser history.\n *\n * This class should never be instantiated directly. Instead, obtain an instance\n * with\n *\n *    webdriver.navigate()\n *\n * @see WebDriver#navigate()\n */\nclass Navigation {\n  /**\n   * @param {!WebDriver} driver The parent driver.\n   * @private\n   */\n  constructor(driver) {\n    /** @private {!WebDriver} */\n    this.driver_ = driver\n  }\n\n  /**\n   * Navigates to a new URL.\n   *\n   * @param {string} url The URL to navigate to.\n   * @return {!Promise<void>} A promise that will be resolved when the URL\n   *     has been loaded.\n   */\n  to(url) {\n    return this.driver_.execute(new command.Command(command.Name.GET).setParameter('url', url))\n  }\n\n  /**\n   * Moves backwards in the browser history.\n   *\n   * @return {!Promise<void>} A promise that will be resolved when the\n   *     navigation event has completed.\n   */\n  back() {\n    return this.driver_.execute(new command.Command(command.Name.GO_BACK))\n  }\n\n  /**\n   * Moves forwards in the browser history.\n   *\n   * @return {!Promise<void>} A promise that will be resolved when the\n   *     navigation event has completed.\n   */\n  forward() {\n    return this.driver_.execute(new command.Command(command.Name.GO_FORWARD))\n  }\n\n  /**\n   * Refreshes the current page.\n   *\n   * @return {!Promise<void>} A promise that will be resolved when the\n   *     navigation event has completed.\n   */\n  refresh() {\n    return this.driver_.execute(new command.Command(command.Name.REFRESH))\n  }\n}\n\n/**\n * Provides methods for managing browser and driver state.\n *\n * This class should never be instantiated directly. Instead, obtain an instance\n * with {@linkplain WebDriver#manage() webdriver.manage()}.\n */\nclass Options {\n  /**\n   * @param {!WebDriver} driver The parent driver.\n   * @private\n   */\n  constructor(driver) {\n    /** @private {!WebDriver} */\n    this.driver_ = driver\n  }\n\n  /**\n   * Adds a cookie.\n   *\n   * __Sample Usage:__\n   *\n   *     // Set a basic cookie.\n   *     driver.manage().addCookie({name: 'foo', value: 'bar'});\n   *\n   *     // Set a cookie that expires in 10 minutes.\n   *     let expiry = new Date(Date.now() + (10 * 60 * 1000));\n   *     driver.manage().addCookie({name: 'foo', value: 'bar', expiry});\n   *\n   *     // The cookie expiration may also be specified in seconds since epoch.\n   *     driver.manage().addCookie({\n   *       name: 'foo',\n   *       value: 'bar',\n   *       expiry: Math.floor(Date.now() / 1000)\n   *     });\n   *\n   * @param {!Options.Cookie} spec Defines the cookie to add.\n   * @return {!Promise<void>} A promise that will be resolved\n   *     when the cookie has been added to the page.\n   * @throws {error.InvalidArgumentError} if any of the cookie parameters are\n   *     invalid.\n   * @throws {TypeError} if `spec` is not a cookie object.\n   */\n  addCookie({ name, value, path, domain, secure, httpOnly, expiry, sameSite }) {\n    // We do not allow '=' or ';' in the name.\n    if (/[;=]/.test(name)) {\n      throw new error.InvalidArgumentError('Invalid cookie name \"' + name + '\"')\n    }\n\n    // We do not allow ';' in value.\n    if (/;/.test(value)) {\n      throw new error.InvalidArgumentError('Invalid cookie value \"' + value + '\"')\n    }\n\n    if (typeof expiry === 'number') {\n      expiry = Math.floor(expiry)\n    } else if (expiry instanceof Date) {\n      let date = /** @type {!Date} */ (expiry)\n      expiry = Math.floor(date.getTime() / 1000)\n    }\n\n    if (sameSite && !['Strict', 'Lax', 'None'].includes(sameSite)) {\n      throw new error.InvalidArgumentError(\n        `Invalid sameSite cookie value '${sameSite}'. It should be one of \"Lax\", \"Strict\" or \"None\"`,\n      )\n    }\n\n    if (sameSite === 'None' && !secure) {\n      throw new error.InvalidArgumentError('Invalid cookie configuration: SameSite=None must be Secure')\n    }\n\n    return this.driver_.execute(\n      new command.Command(command.Name.ADD_COOKIE).setParameter('cookie', {\n        name: name,\n        value: value,\n        path: path,\n        domain: domain,\n        secure: !!secure,\n        httpOnly: !!httpOnly,\n        expiry: expiry,\n        sameSite: sameSite,\n      }),\n    )\n  }\n\n  /**\n   * Deletes all cookies visible to the current page.\n   *\n   * @return {!Promise<void>} A promise that will be resolved\n   *     when all cookies have been deleted.\n   */\n  deleteAllCookies() {\n    return this.driver_.execute(new command.Command(command.Name.DELETE_ALL_COOKIES))\n  }\n\n  /**\n   * Deletes the cookie with the given name. This command is a no-op if there is\n   * no cookie with the given name visible to the current page.\n   *\n   * @param {string} name The name of the cookie to delete.\n   * @return {!Promise<void>} A promise that will be resolved\n   *     when the cookie has been deleted.\n   */\n  deleteCookie(name) {\n    return this.driver_.execute(new command.Command(command.Name.DELETE_COOKIE).setParameter('name', name))\n  }\n\n  /**\n   * Retrieves all cookies visible to the current page. Each cookie will be\n   * returned as a JSON object as described by the WebDriver wire protocol.\n   *\n   * @return {!Promise<!Array<!Options.Cookie>>} A promise that will be\n   *     resolved with the cookies visible to the current browsing context.\n   */\n  getCookies() {\n    return this.driver_.execute(new command.Command(command.Name.GET_ALL_COOKIES))\n  }\n\n  /**\n   * Retrieves the cookie with the given name. Returns null if there is no such\n   * cookie. The cookie will be returned as a JSON object as described by the\n   * WebDriver wire protocol.\n   *\n   * @param {string} name The name of the cookie to retrieve.\n   * @return {!Promise<?Options.Cookie>} A promise that will be resolved\n   *     with the named cookie\n   * @throws {error.NoSuchCookieError} if there is no such cookie.\n   */\n  async getCookie(name) {\n    try {\n      const cookie = await this.driver_.execute(new command.Command(command.Name.GET_COOKIE).setParameter('name', name))\n      return cookie\n    } catch (err) {\n      if (!(err instanceof error.UnknownCommandError) && !(err instanceof error.UnsupportedOperationError)) {\n        throw err\n      }\n\n      const cookies = await this.getCookies()\n      for (let cookie of cookies) {\n        if (cookie && cookie['name'] === name) {\n          return cookie\n        }\n      }\n      return null\n    }\n  }\n\n  /**\n   * Fetches the timeouts currently configured for the current session.\n   *\n   * @return {!Promise<{script: number,\n   *                             pageLoad: number,\n   *                             implicit: number}>} A promise that will be\n   *     resolved with the timeouts currently configured for the current\n   *     session.\n   * @see #setTimeouts()\n   */\n  getTimeouts() {\n    return this.driver_.execute(new command.Command(command.Name.GET_TIMEOUT))\n  }\n\n  /**\n   * Sets the timeout durations associated with the current session.\n   *\n   * The following timeouts are supported (all timeouts are specified in\n   * milliseconds):\n   *\n   * -  `implicit` specifies the maximum amount of time to wait for an element\n   *    locator to succeed when {@linkplain WebDriver#findElement locating}\n   *    {@linkplain WebDriver#findElements elements} on the page.\n   *    Defaults to 0 milliseconds.\n   *\n   * -  `pageLoad` specifies the maximum amount of time to wait for a page to\n   *    finishing loading. Defaults to 300000 milliseconds.\n   *\n   * -  `script` specifies the maximum amount of time to wait for an\n   *    {@linkplain WebDriver#executeScript evaluated script} to run. If set to\n   *    `null`, the script timeout will be indefinite.\n   *    Defaults to 30000 milliseconds.\n   *\n   * @param {{script: (number|null|undefined),\n   *          pageLoad: (number|null|undefined),\n   *          implicit: (number|null|undefined)}} conf\n   *     The desired timeout configuration.\n   * @return {!Promise<void>} A promise that will be resolved when the timeouts\n   *     have been set.\n   * @throws {!TypeError} if an invalid options object is provided.\n   * @see #getTimeouts()\n   * @see <https://w3c.github.io/webdriver/webdriver-spec.html#dfn-set-timeouts>\n   */\n  setTimeouts({ script, pageLoad, implicit } = {}) {\n    let cmd = new command.Command(command.Name.SET_TIMEOUT)\n\n    let valid = false\n\n    function setParam(key, value) {\n      if (value === null || typeof value === 'number') {\n        valid = true\n        cmd.setParameter(key, value)\n      } else if (typeof value !== 'undefined') {\n        throw TypeError('invalid timeouts configuration:' + ` expected \"${key}\" to be a number, got ${typeof value}`)\n      }\n    }\n\n    setParam('implicit', implicit)\n    setParam('pageLoad', pageLoad)\n    setParam('script', script)\n\n    if (valid) {\n      return this.driver_.execute(cmd).catch(() => {\n        // Fallback to the legacy method.\n        let cmds = []\n        if (typeof script === 'number') {\n          cmds.push(legacyTimeout(this.driver_, 'script', script))\n        }\n        if (typeof implicit === 'number') {\n          cmds.push(legacyTimeout(this.driver_, 'implicit', implicit))\n        }\n        if (typeof pageLoad === 'number') {\n          cmds.push(legacyTimeout(this.driver_, 'page load', pageLoad))\n        }\n        return Promise.all(cmds)\n      })\n    }\n    throw TypeError('no timeouts specified')\n  }\n\n  /**\n   * @return {!Logs} The interface for managing driver logs.\n   */\n  logs() {\n    return new Logs(this.driver_)\n  }\n\n  /**\n   * @return {!Window} The interface for managing the current window.\n   */\n  window() {\n    return new Window(this.driver_)\n  }\n}\n\n/**\n * @param {!WebDriver} driver\n * @param {string} type\n * @param {number} ms\n * @return {!Promise<void>}\n */\nfunction legacyTimeout(driver, type, ms) {\n  return driver.execute(new command.Command(command.Name.SET_TIMEOUT).setParameter('type', type).setParameter('ms', ms))\n}\n\n/**\n * A record object describing a browser cookie.\n *\n * @record\n */\nOptions.Cookie = function () {}\n\n/**\n * The name of the cookie.\n *\n * @type {string}\n */\nOptions.Cookie.prototype.name\n\n/**\n * The cookie value.\n *\n * @type {string}\n */\nOptions.Cookie.prototype.value\n\n/**\n * The cookie path. Defaults to \"/\" when adding a cookie.\n *\n * @type {(string|undefined)}\n */\nOptions.Cookie.prototype.path\n\n/**\n * The domain the cookie is visible to. Defaults to the current browsing\n * context's document's URL when adding a cookie.\n *\n * @type {(string|undefined)}\n */\nOptions.Cookie.prototype.domain\n\n/**\n * Whether the cookie is a secure cookie. Defaults to false when adding a new\n * cookie.\n *\n * @type {(boolean|undefined)}\n */\nOptions.Cookie.prototype.secure\n\n/**\n * Whether the cookie is an HTTP only cookie. Defaults to false when adding a\n * new cookie.\n *\n * @type {(boolean|undefined)}\n */\nOptions.Cookie.prototype.httpOnly\n\n/**\n * When the cookie expires.\n *\n * When {@linkplain Options#addCookie() adding a cookie}, this may be specified\n * as a {@link Date} object, or in _seconds_ since Unix epoch (January 1, 1970).\n *\n * The expiry is always returned in seconds since epoch when\n * {@linkplain Options#getCookies() retrieving cookies} from the browser.\n *\n * @type {(!Date|number|undefined)}\n */\nOptions.Cookie.prototype.expiry\n\n/**\n * When the cookie applies to a SameSite policy.\n *\n * When {@linkplain Options#addCookie() adding a cookie}, this may be specified\n * as a {@link string} object which is one of 'Lax', 'Strict' or 'None'.\n *\n *\n * @type {(string|undefined)}\n */\nOptions.Cookie.prototype.sameSite\n\n/**\n * An interface for managing the current window.\n *\n * This class should never be instantiated directly. Instead, obtain an instance\n * with\n *\n *    webdriver.manage().window()\n *\n * @see WebDriver#manage()\n * @see Options#window()\n */\nclass Window {\n  /**\n   * @param {!WebDriver} driver The parent driver.\n   * @private\n   */\n  constructor(driver) {\n    /** @private {!WebDriver} */\n    this.driver_ = driver\n    /** @private {!Logger} */\n    this.log_ = logging.getLogger(logging.Type.DRIVER)\n  }\n\n  /**\n   * Retrieves a rect describing the current top-level window's size and\n   * position.\n   *\n   * @return {!Promise<{x: number, y: number, width: number, height: number}>}\n   *     A promise that will resolve to the window rect of the current window.\n   */\n  getRect() {\n    return this.driver_.execute(new command.Command(command.Name.GET_WINDOW_RECT))\n  }\n\n  /**\n   * Sets the current top-level window's size and position. You may update just\n   * the size by omitting `x` & `y`, or just the position by omitting\n   * `width` & `height` options.\n   *\n   * @param {{x: (number|undefined),\n   *          y: (number|undefined),\n   *          width: (number|undefined),\n   *          height: (number|undefined)}} options\n   *     The desired window size and position.\n   * @return {!Promise<{x: number, y: number, width: number, height: number}>}\n   *     A promise that will resolve to the current window's updated window\n   *     rect.\n   */\n  setRect({ x, y, width, height }) {\n    return this.driver_.execute(\n      new command.Command(command.Name.SET_WINDOW_RECT).setParameters({\n        x,\n        y,\n        width,\n        height,\n      }),\n    )\n  }\n\n  /**\n   * Maximizes the current window. The exact behavior of this command is\n   * specific to individual window managers, but typically involves increasing\n   * the window to the maximum available size without going full-screen.\n   *\n   * @return {!Promise<void>} A promise that will be resolved when the command\n   *     has completed.\n   */\n  maximize() {\n    return this.driver_.execute(\n      new command.Command(command.Name.MAXIMIZE_WINDOW).setParameter('windowHandle', 'current'),\n    )\n  }\n\n  /**\n   * Minimizes the current window. The exact behavior of this command is\n   * specific to individual window managers, but typically involves hiding\n   * the window in the system tray.\n   *\n   * @return {!Promise<void>} A promise that will be resolved when the command\n   *     has completed.\n   */\n  minimize() {\n    return this.driver_.execute(new command.Command(command.Name.MINIMIZE_WINDOW))\n  }\n\n  /**\n   * Invokes the \"full screen\" operation on the current window. The exact\n   * behavior of this command is specific to individual window managers, but\n   * this will typically increase the window size to the size of the physical\n   * display and hide the browser chrome.\n   *\n   * @return {!Promise<void>} A promise that will be resolved when the command\n   *     has completed.\n   * @see <https://fullscreen.spec.whatwg.org/#fullscreen-an-element>\n   */\n  fullscreen() {\n    return this.driver_.execute(new command.Command(command.Name.FULLSCREEN_WINDOW))\n  }\n\n  /**\n   * Gets the width and height of the current window\n   * @param windowHandle\n   * @returns {Promise<{width: *, height: *}>}\n   */\n  async getSize(windowHandle = 'current') {\n    if (windowHandle !== 'current') {\n      this.log_.warning(`Only 'current' window is supported for W3C compatible browsers.`)\n    }\n\n    const rect = await this.getRect()\n    return { height: rect.height, width: rect.width }\n  }\n\n  /**\n   * Sets the width and height of the current window. (window.resizeTo)\n   * @param x\n   * @param y\n   * @param width\n   * @param height\n   * @param windowHandle\n   * @returns {Promise<void>}\n   */\n  async setSize({ x = 0, y = 0, width = 0, height = 0 }, windowHandle = 'current') {\n    if (windowHandle !== 'current') {\n      this.log_.warning(`Only 'current' window is supported for W3C compatible browsers.`)\n    }\n\n    await this.setRect({ x, y, width, height })\n  }\n}\n\n/**\n * Interface for managing WebDriver log records.\n *\n * This class should never be instantiated directly. Instead, obtain an\n * instance with\n *\n *     webdriver.manage().logs()\n *\n * @see WebDriver#manage()\n * @see Options#logs()\n */\nclass Logs {\n  /**\n   * @param {!WebDriver} driver The parent driver.\n   * @private\n   */\n  constructor(driver) {\n    /** @private {!WebDriver} */\n    this.driver_ = driver\n  }\n\n  /**\n   * Fetches available log entries for the given type.\n   *\n   * Note that log buffers are reset after each call, meaning that available\n   * log entries correspond to those entries not yet returned for a given log\n   * type. In practice, this means that this call will return the available log\n   * entries since the last call, or from the start of the session.\n   *\n   * @param {!logging.Type} type The desired log type.\n   * @return {!Promise<!Array.<!logging.Entry>>} A\n   *   promise that will resolve to a list of log entries for the specified\n   *   type.\n   */\n  get(type) {\n    let cmd = new command.Command(command.Name.GET_LOG).setParameter('type', type)\n    return this.driver_.execute(cmd).then(function (entries) {\n      return entries.map(function (entry) {\n        if (!(entry instanceof logging.Entry)) {\n          return new logging.Entry(entry['level'], entry['message'], entry['timestamp'], entry['type'])\n        }\n        return entry\n      })\n    })\n  }\n\n  /**\n   * Retrieves the log types available to this driver.\n   * @return {!Promise<!Array<!logging.Type>>} A\n   *     promise that will resolve to a list of available log types.\n   */\n  getAvailableLogTypes() {\n    return this.driver_.execute(new command.Command(command.Name.GET_AVAILABLE_LOG_TYPES))\n  }\n}\n\n/**\n * An interface for changing the focus of the driver to another frame or window.\n *\n * This class should never be instantiated directly. Instead, obtain an\n * instance with\n *\n *     webdriver.switchTo()\n *\n * @see WebDriver#switchTo()\n */\nclass TargetLocator {\n  /**\n   * @param {!WebDriver} driver The parent driver.\n   * @private\n   */\n  constructor(driver) {\n    /** @private {!WebDriver} */\n    this.driver_ = driver\n  }\n\n  /**\n   * Locates the DOM element on the current page that corresponds to\n   * `document.activeElement` or `document.body` if the active element is not\n   * available.\n   *\n   * @return {!WebElementPromise} The active element.\n   */\n  activeElement() {\n    const id = this.driver_.execute(new command.Command(command.Name.GET_ACTIVE_ELEMENT))\n    return new WebElementPromise(this.driver_, id)\n  }\n\n  /**\n   * Switches focus of all future commands to the topmost frame in the current\n   * window.\n   *\n   * @return {!Promise<void>} A promise that will be resolved\n   *     when the driver has changed focus to the default content.\n   */\n  defaultContent() {\n    return this.driver_.execute(new command.Command(command.Name.SWITCH_TO_FRAME).setParameter('id', null))\n  }\n\n  /**\n   * Changes the focus of all future commands to another frame on the page. The\n   * target frame may be specified as one of the following:\n   *\n   * - A number that specifies a (zero-based) index into [window.frames](\n   *   https://developer.mozilla.org/en-US/docs/Web/API/Window.frames).\n   * - A {@link WebElement} reference, which correspond to a `frame` or `iframe`\n   *   DOM element.\n   * - The `null` value, to select the topmost frame on the page. Passing `null`\n   *   is the same as calling {@link #defaultContent defaultContent()}.\n   *\n   * If the specified frame can not be found, the returned promise will be\n   * rejected with a {@linkplain error.NoSuchFrameError}.\n   *\n   * @param {(number|string|WebElement|null)} id The frame locator.\n   * @return {!Promise<void>} A promise that will be resolved\n   *     when the driver has changed focus to the specified frame.\n   */\n  frame(id) {\n    let frameReference = id\n    if (typeof id === 'string') {\n      frameReference = this.driver_.findElement({ id }).catch((_) => this.driver_.findElement({ name: id }))\n    }\n\n    return this.driver_.execute(new command.Command(command.Name.SWITCH_TO_FRAME).setParameter('id', frameReference))\n  }\n\n  /**\n   * Changes the focus of all future commands to the parent frame of the\n   * currently selected frame. This command has no effect if the driver is\n   * already focused on the top-level browsing context.\n   *\n   * @return {!Promise<void>} A promise that will be resolved when the command\n   *     has completed.\n   */\n  parentFrame() {\n    return this.driver_.execute(new command.Command(command.Name.SWITCH_TO_FRAME_PARENT))\n  }\n\n  /**\n   * Changes the focus of all future commands to another window. Windows may be\n   * specified by their {@code window.name} attribute or by its handle\n   * (as returned by {@link WebDriver#getWindowHandles}).\n   *\n   * If the specified window cannot be found, the returned promise will be\n   * rejected with a {@linkplain error.NoSuchWindowError}.\n   *\n   * @param {string} nameOrHandle The name or window handle of the window to\n   *     switch focus to.\n   * @return {!Promise<void>} A promise that will be resolved\n   *     when the driver has changed focus to the specified window.\n   */\n  window(nameOrHandle) {\n    return this.driver_.execute(\n      new command.Command(command.Name.SWITCH_TO_WINDOW)\n        // \"name\" supports the legacy drivers. \"handle\" is the W3C\n        // compliant parameter.\n        .setParameter('name', nameOrHandle)\n        .setParameter('handle', nameOrHandle),\n    )\n  }\n\n  /**\n   * Creates a new browser window and switches the focus for future\n   * commands of this driver to the new window.\n   *\n   * @param {string} typeHint 'window' or 'tab'. The created window is not\n   *     guaranteed to be of the requested type; if the driver does not support\n   *     the requested type, a new browser window will be created of whatever type\n   *     the driver does support.\n   * @return {!Promise<void>} A promise that will be resolved\n   *     when the driver has changed focus to the new window.\n   */\n  newWindow(typeHint) {\n    const driver = this.driver_\n    return this.driver_\n      .execute(new command.Command(command.Name.SWITCH_TO_NEW_WINDOW).setParameter('type', typeHint))\n      .then(function (response) {\n        return driver.switchTo().window(response.handle)\n      })\n  }\n\n  /**\n   * Changes focus to the active modal dialog, such as those opened by\n   * `window.alert()`, `window.confirm()`, and `window.prompt()`. The returned\n   * promise will be rejected with a\n   * {@linkplain error.NoSuchAlertError} if there are no open alerts.\n   *\n   * @return {!AlertPromise} The open alert.\n   */\n  alert() {\n    const text = this.driver_.execute(new command.Command(command.Name.GET_ALERT_TEXT))\n    const driver = this.driver_\n    return new AlertPromise(\n      driver,\n      text.then(function (text) {\n        return new Alert(driver, text)\n      }),\n    )\n  }\n}\n\n//////////////////////////////////////////////////////////////////////////////\n//\n//  WebElement\n//\n//////////////////////////////////////////////////////////////////////////////\n\nconst LEGACY_ELEMENT_ID_KEY = 'ELEMENT'\nconst ELEMENT_ID_KEY = 'element-6066-11e4-a52e-4f735466cecf'\nconst SHADOW_ROOT_ID_KEY = 'shadow-6066-11e4-a52e-4f735466cecf'\n\n/**\n * Represents a DOM element. WebElements can be found by searching from the\n * document root using a {@link WebDriver} instance, or by searching\n * under another WebElement:\n *\n *     driver.get('http://www.google.com');\n *     var searchForm = driver.findElement(By.tagName('form'));\n *     var searchBox = searchForm.findElement(By.name('q'));\n *     searchBox.sendKeys('webdriver');\n */\nclass WebElement {\n  /**\n   * @param {!WebDriver} driver the parent WebDriver instance for this element.\n   * @param {(!IThenable<string>|string)} id The server-assigned opaque ID for\n   *     the underlying DOM element.\n   */\n  constructor(driver, id) {\n    /** @private {!WebDriver} */\n    this.driver_ = driver\n\n    /** @private {!Promise<string>} */\n    this.id_ = Promise.resolve(id)\n\n    /** @private {!Logger} */\n    this.log_ = logging.getLogger(logging.Type.DRIVER)\n  }\n\n  /**\n   * @param {string} id The raw ID.\n   * @param {boolean=} noLegacy Whether to exclude the legacy element key.\n   * @return {!Object} The element ID for use with WebDriver's wire protocol.\n   */\n  static buildId(id, noLegacy = false) {\n    return noLegacy ? { [ELEMENT_ID_KEY]: id } : { [ELEMENT_ID_KEY]: id, [LEGACY_ELEMENT_ID_KEY]: id }\n  }\n\n  /**\n   * Extracts the encoded WebElement ID from the object.\n   *\n   * @param {?} obj The object to extract the ID from.\n   * @return {string} the extracted ID.\n   * @throws {TypeError} if the object is not a valid encoded ID.\n   */\n  static extractId(obj) {\n    return webElement.extractId(obj)\n  }\n\n  /**\n   * @param {?} obj the object to test.\n   * @return {boolean} whether the object is a valid encoded WebElement ID.\n   */\n  static isId(obj) {\n    return webElement.isId(obj)\n  }\n\n  /**\n   * Compares two WebElements for equality.\n   *\n   * @param {!WebElement} a A WebElement.\n   * @param {!WebElement} b A WebElement.\n   * @return {!Promise<boolean>} A promise that will be\n   *     resolved to whether the two WebElements are equal.\n   */\n  static async equals(a, b) {\n    if (a === b) {\n      return true\n    }\n    return a.driver_.executeScript('return arguments[0] === arguments[1]', a, b)\n  }\n\n  /** @return {!WebDriver} The parent driver for this instance. */\n  getDriver() {\n    return this.driver_\n  }\n\n  /**\n   * @return {!Promise<string>} A promise that resolves to\n   *     the server-assigned opaque ID assigned to this element.\n   */\n  getId() {\n    return this.id_\n  }\n\n  /**\n   * @return {!Object} Returns the serialized representation of this WebElement.\n   */\n  [Symbols.serialize]() {\n    return this.getId().then(WebElement.buildId)\n  }\n\n  /**\n   * Schedules a command that targets this element with the parent WebDriver\n   * instance. Will ensure this element's ID is included in the command\n   * parameters under the \"id\" key.\n   *\n   * @param {!command.Command} command The command to schedule.\n   * @return {!Promise<T>} A promise that will be resolved with the result.\n   * @template T\n   * @see WebDriver#schedule\n   * @private\n   */\n  execute_(command) {\n    command.setParameter('id', this)\n    return this.driver_.execute(command)\n  }\n\n  /**\n   * Schedule a command to find a descendant of this element. If the element\n   * cannot be found, the returned promise will be rejected with a\n   * {@linkplain error.NoSuchElementError NoSuchElementError}.\n   *\n   * The search criteria for an element may be defined using one of the static\n   * factories on the {@link by.By} class, or as a short-hand\n   * {@link ./by.ByHash} object. For example, the following two statements\n   * are equivalent:\n   *\n   *     var e1 = element.findElement(By.id('foo'));\n   *     var e2 = element.findElement({id:'foo'});\n   *\n   * You may also provide a custom locator function, which takes as input this\n   * instance and returns a {@link WebElement}, or a promise that will resolve\n   * to a WebElement. If the returned promise resolves to an array of\n   * WebElements, WebDriver will use the first element. For example, to find the\n   * first visible link on a page, you could write:\n   *\n   *     var link = element.findElement(firstVisibleLink);\n   *\n   *     function firstVisibleLink(element) {\n   *       var links = element.findElements(By.tagName('a'));\n   *       return promise.filter(links, function(link) {\n   *         return link.isDisplayed();\n   *       });\n   *     }\n   *\n   * @param {!(by.By|Function)} locator The locator strategy to use when\n   *     searching for the element.\n   * @return {!WebElementPromise} A WebElement that can be used to issue\n   *     commands against the located element. If the element is not found, the\n   *     element will be invalidated and all scheduled commands aborted.\n   */\n  findElement(locator) {\n    locator = by.checkedLocator(locator)\n    let id\n    if (typeof locator === 'function') {\n      id = this.driver_.findElementInternal_(locator, this)\n    } else {\n      let cmd = new command.Command(command.Name.FIND_CHILD_ELEMENT)\n        .setParameter('using', locator.using)\n        .setParameter('value', locator.value)\n      id = this.execute_(cmd)\n    }\n    return new WebElementPromise(this.driver_, id)\n  }\n\n  /**\n   * Locates all the descendants of this element that match the given search\n   * criteria.\n   *\n   * @param {!(by.By|Function)} locator The locator strategy to use when\n   *     searching for the element.\n   * @return {!Promise<!Array<!WebElement>>} A promise that will resolve to an\n   *     array of WebElements.\n   */\n  async findElements(locator) {\n    locator = by.checkedLocator(locator)\n    if (typeof locator === 'function') {\n      return this.driver_.findElementsInternal_(locator, this)\n    } else {\n      let cmd = new command.Command(command.Name.FIND_CHILD_ELEMENTS)\n        .setParameter('using', locator.using)\n        .setParameter('value', locator.value)\n      let result = await this.execute_(cmd)\n      return Array.isArray(result) ? result : []\n    }\n  }\n\n  /**\n   * Clicks on this element.\n   *\n   * @return {!Promise<void>} A promise that will be resolved when the click\n   *     command has completed.\n   */\n  click() {\n    return this.execute_(new command.Command(command.Name.CLICK_ELEMENT))\n  }\n\n  /**\n   * Types a key sequence on the DOM element represented by this instance.\n   *\n   * Modifier keys (SHIFT, CONTROL, ALT, META) are stateful; once a modifier is\n   * processed in the key sequence, that key state is toggled until one of the\n   * following occurs:\n   *\n   * - The modifier key is encountered again in the sequence. At this point the\n   *   state of the key is toggled (along with the appropriate keyup/down\n   *   events).\n   * - The {@link input.Key.NULL} key is encountered in the sequence. When\n   *   this key is encountered, all modifier keys current in the down state are\n   *   released (with accompanying keyup events). The NULL key can be used to\n   *   simulate common keyboard shortcuts:\n   *\n   *         element.sendKeys(\"text was\",\n   *                          Key.CONTROL, \"a\", Key.NULL,\n   *                          \"now text is\");\n   *         // Alternatively:\n   *         element.sendKeys(\"text was\",\n   *                          Key.chord(Key.CONTROL, \"a\"),\n   *                          \"now text is\");\n   *\n   * - The end of the key sequence is encountered. When there are no more keys\n   *   to type, all depressed modifier keys are released (with accompanying\n   *   keyup events).\n   *\n   * If this element is a file input ({@code <input type=\"file\">}), the\n   * specified key sequence should specify the path to the file to attach to\n   * the element. This is analogous to the user clicking \"Browse...\" and entering\n   * the path into the file select dialog.\n   *\n   *     var form = driver.findElement(By.css('form'));\n   *     var element = form.findElement(By.css('input[type=file]'));\n   *     element.sendKeys('/path/to/file.txt');\n   *     form.submit();\n   *\n   * For uploads to function correctly, the entered path must reference a file\n   * on the _browser's_ machine, not the local machine running this script. When\n   * running against a remote Selenium server, a {@link input.FileDetector}\n   * may be used to transparently copy files to the remote machine before\n   * attempting to upload them in the browser.\n   *\n   * __Note:__ On browsers where native keyboard events are not supported\n   * (e.g. Firefox on OS X), key events will be synthesized. Special\n   * punctuation keys will be synthesized according to a standard QWERTY en-us\n   * keyboard layout.\n   *\n   * @param {...(number|string|!IThenable<(number|string)>)} args The\n   *     sequence of keys to type. Number keys may be referenced numerically or\n   *     by string (1 or '1'). All arguments will be joined into a single\n   *     sequence.\n   * @return {!Promise<void>} A promise that will be resolved when all keys\n   *     have been typed.\n   */\n  async sendKeys(...args) {\n    let keys = []\n    ;(await Promise.all(args)).forEach((key) => {\n      let type = typeof key\n      if (type === 'number') {\n        key = String(key)\n      } else if (type !== 'string') {\n        throw TypeError('each key must be a number or string; got ' + type)\n      }\n\n      // The W3C protocol requires keys to be specified as an array where\n      // each element is a single key.\n      keys.push(...key)\n    })\n\n    if (!this.driver_.fileDetector_) {\n      return this.execute_(\n        new command.Command(command.Name.SEND_KEYS_TO_ELEMENT)\n          .setParameter('text', keys.join(''))\n          .setParameter('value', keys),\n      )\n    }\n\n    try {\n      keys = await this.driver_.fileDetector_.handleFile(this.driver_, keys.join(''))\n    } catch (ex) {\n      this.log_.severe('Error trying parse string as a file with file detector; sending keys instead' + ex)\n    }\n\n    return this.execute_(\n      new command.Command(command.Name.SEND_KEYS_TO_ELEMENT)\n        .setParameter('text', keys)\n        .setParameter('value', keys.split('')),\n    )\n  }\n\n  /**\n   * Retrieves the element's tag name.\n   *\n   * @return {!Promise<string>} A promise that will be resolved with the\n   *     element's tag name.\n   */\n  getTagName() {\n    return this.execute_(new command.Command(command.Name.GET_ELEMENT_TAG_NAME))\n  }\n\n  /**\n   * Retrieves the value of a computed style property for this instance. If\n   * the element inherits the named style from its parent, the parent will be\n   * queried for its value.  Where possible, color values will be converted to\n   * their hex representation (e.g. #00ff00 instead of rgb(0, 255, 0)).\n   *\n   * _Warning:_ the value returned will be as the browser interprets it, so\n   * it may be tricky to form a proper assertion.\n   *\n   * @param {string} cssStyleProperty The name of the CSS style property to look\n   *     up.\n   * @return {!Promise<string>} A promise that will be resolved with the\n   *     requested CSS value.\n   */\n  getCssValue(cssStyleProperty) {\n    const name = command.Name.GET_ELEMENT_VALUE_OF_CSS_PROPERTY\n    return this.execute_(new command.Command(name).setParameter('propertyName', cssStyleProperty))\n  }\n\n  /**\n   * Retrieves the current value of the given attribute of this element.\n   * Will return the current value, even if it has been modified after the page\n   * has been loaded. More exactly, this method will return the value\n   * of the given attribute, unless that attribute is not present, in which case\n   * the value of the property with the same name is returned. If neither value\n   * is set, null is returned (for example, the \"value\" property of a textarea\n   * element). The \"style\" attribute is converted as best can be to a\n   * text representation with a trailing semicolon. The following are deemed to\n   * be \"boolean\" attributes and will return either \"true\" or null:\n   *\n   * async, autofocus, autoplay, checked, compact, complete, controls, declare,\n   * defaultchecked, defaultselected, defer, disabled, draggable, ended,\n   * formnovalidate, hidden, indeterminate, iscontenteditable, ismap, itemscope,\n   * loop, multiple, muted, nohref, noresize, noshade, novalidate, nowrap, open,\n   * paused, pubdate, readonly, required, reversed, scoped, seamless, seeking,\n   * selected, spellcheck, truespeed, willvalidate\n   *\n   * Finally, the following commonly mis-capitalized attribute/property names\n   * are evaluated as expected:\n   *\n   * - \"class\"\n   * - \"readonly\"\n   *\n   * @param {string} attributeName The name of the attribute to query.\n   * @return {!Promise<?string>} A promise that will be\n   *     resolved with the attribute's value. The returned value will always be\n   *     either a string or null.\n   */\n  getAttribute(attributeName) {\n    return this.execute_(new command.Command(command.Name.GET_ELEMENT_ATTRIBUTE).setParameter('name', attributeName))\n  }\n\n  /**\n   * Get the value of the given attribute of the element.\n   * <p>\n   * This method, unlike {@link #getAttribute(String)}, returns the value of the attribute with the\n   * given name but not the property with the same name.\n   * <p>\n   * The following are deemed to be \"boolean\" attributes, and will return either \"true\" or null:\n   * <p>\n   * async, autofocus, autoplay, checked, compact, complete, controls, declare, defaultchecked,\n   * defaultselected, defer, disabled, draggable, ended, formnovalidate, hidden, indeterminate,\n   * iscontenteditable, ismap, itemscope, loop, multiple, muted, nohref, noresize, noshade,\n   * novalidate, nowrap, open, paused, pubdate, readonly, required, reversed, scoped, seamless,\n   * seeking, selected, truespeed, willvalidate\n   * <p>\n   * See <a href=\"https://w3c.github.io/webdriver/#get-element-attribute\">W3C WebDriver specification</a>\n   * for more details.\n   *\n   * @param attributeName The name of the attribute.\n   * @return The attribute's value or null if the value is not set.\n   */\n\n  getDomAttribute(attributeName) {\n    return this.execute_(new command.Command(command.Name.GET_DOM_ATTRIBUTE).setParameter('name', attributeName))\n  }\n\n  /**\n   * Get the given property of the referenced web element\n   * @param {string} propertyName The name of the attribute to query.\n   * @return {!Promise<string>} A promise that will be\n   *     resolved with the element's property value\n   */\n  getProperty(propertyName) {\n    return this.execute_(new command.Command(command.Name.GET_ELEMENT_PROPERTY).setParameter('name', propertyName))\n  }\n\n  /**\n   * Get the shadow root of the current web element.\n   * @returns {!Promise<ShadowRoot>} A promise that will be\n   *      resolved with the elements shadow root or rejected\n   *      with {@link NoSuchShadowRootError}\n   */\n  getShadowRoot() {\n    return this.execute_(new command.Command(command.Name.GET_SHADOW_ROOT))\n  }\n\n  /**\n   * Get the visible (i.e. not hidden by CSS) innerText of this element,\n   * including sub-elements, without any leading or trailing whitespace.\n   *\n   * @return {!Promise<string>} A promise that will be\n   *     resolved with the element's visible text.\n   */\n  getText() {\n    return this.execute_(new command.Command(command.Name.GET_ELEMENT_TEXT))\n  }\n\n  /**\n   * Get the computed WAI-ARIA role of element.\n   *\n   * @return {!Promise<string>} A promise that will be\n   *     resolved with the element's computed role.\n   */\n  getAriaRole() {\n    return this.execute_(new command.Command(command.Name.GET_COMPUTED_ROLE))\n  }\n\n  /**\n   * Get the computed WAI-ARIA label of element.\n   *\n   * @return {!Promise<string>} A promise that will be\n   *     resolved with the element's computed label.\n   */\n  getAccessibleName() {\n    return this.execute_(new command.Command(command.Name.GET_COMPUTED_LABEL))\n  }\n\n  /**\n   * Returns an object describing an element's location, in pixels relative to\n   * the document element, and the element's size in pixels.\n   *\n   * @return {!Promise<{width: number, height: number, x: number, y: number}>}\n   *     A promise that will resolve with the element's rect.\n   */\n  getRect() {\n    return this.execute_(new command.Command(command.Name.GET_ELEMENT_RECT))\n  }\n\n  /**\n   * Tests whether this element is enabled, as dictated by the `disabled`\n   * attribute.\n   *\n   * @return {!Promise<boolean>} A promise that will be\n   *     resolved with whether this element is currently enabled.\n   */\n  isEnabled() {\n    return this.execute_(new command.Command(command.Name.IS_ELEMENT_ENABLED))\n  }\n\n  /**\n   * Tests whether this element is selected.\n   *\n   * @return {!Promise<boolean>} A promise that will be\n   *     resolved with whether this element is currently selected.\n   */\n  isSelected() {\n    return this.execute_(new command.Command(command.Name.IS_ELEMENT_SELECTED))\n  }\n\n  /**\n   * Submits the form containing this element (or this element if it is itself\n   * a FORM element). his command is a no-op if the element is not contained in\n   * a form.\n   *\n   * @return {!Promise<void>} A promise that will be resolved\n   *     when the form has been submitted.\n   */\n  submit() {\n    const script =\n      '/* submitForm */var form = arguments[0];\\n' +\n      'while (form.nodeName != \"FORM\" && form.parentNode) {\\n' +\n      '  form = form.parentNode;\\n' +\n      '}\\n' +\n      \"if (!form) { throw Error('Unable to find containing form element'); }\\n\" +\n      \"if (!form.ownerDocument) { throw Error('Unable to find owning document'); }\\n\" +\n      \"var e = form.ownerDocument.createEvent('Event');\\n\" +\n      \"e.initEvent('submit', true, true);\\n\" +\n      'if (form.dispatchEvent(e)) { HTMLFormElement.prototype.submit.call(form) }\\n'\n\n    return this.driver_.executeScript(script, this)\n  }\n\n  /**\n   * Clear the `value` of this element. This command has no effect if the\n   * underlying DOM element is neither a text INPUT element nor a TEXTAREA\n   * element.\n   *\n   * @return {!Promise<void>} A promise that will be resolved\n   *     when the element has been cleared.\n   */\n  clear() {\n    return this.execute_(new command.Command(command.Name.CLEAR_ELEMENT))\n  }\n\n  /**\n   * Test whether this element is currently displayed.\n   *\n   * @return {!Promise<boolean>} A promise that will be\n   *     resolved with whether this element is currently visible on the page.\n   */\n  isDisplayed() {\n    return this.execute_(new command.Command(command.Name.IS_ELEMENT_DISPLAYED))\n  }\n\n  /**\n   * Take a screenshot of the visible region encompassed by this element's\n   * bounding rectangle.\n   *\n   * @return {!Promise<string>} A promise that will be\n   *     resolved to the screenshot as a base-64 encoded PNG.\n   */\n  takeScreenshot() {\n    return this.execute_(new command.Command(command.Name.TAKE_ELEMENT_SCREENSHOT))\n  }\n}\n\n/**\n * WebElementPromise is a promise that will be fulfilled with a WebElement.\n * This serves as a forward proxy on WebElement, allowing calls to be\n * scheduled without directly on this instance before the underlying\n * WebElement has been fulfilled. In other words, the following two statements\n * are equivalent:\n *\n *     driver.findElement({id: 'my-button'}).click();\n *     driver.findElement({id: 'my-button'}).then(function(el) {\n *       return el.click();\n *     });\n *\n * @implements {IThenable<!WebElement>}\n * @final\n */\nclass WebElementPromise extends WebElement {\n  /**\n   * @param {!WebDriver} driver The parent WebDriver instance for this\n   *     element.\n   * @param {!Promise<!WebElement>} el A promise\n   *     that will resolve to the promised element.\n   */\n  constructor(driver, el) {\n    super(driver, 'unused')\n\n    /** @override */\n    this.then = el.then.bind(el)\n\n    /** @override */\n    this.catch = el.catch.bind(el)\n\n    /**\n     * Defers returning the element ID until the wrapped WebElement has been\n     * resolved.\n     * @override\n     */\n    this.getId = function () {\n      return el.then(function (el) {\n        return el.getId()\n      })\n    }\n  }\n}\n\n//////////////////////////////////////////////////////////////////////////////\n//\n//  ShadowRoot\n//\n//////////////////////////////////////////////////////////////////////////////\n\n/**\n * Represents a ShadowRoot of a {@link WebElement}. Provides functions to\n * retrieve elements that live in the DOM below the ShadowRoot.\n */\nclass ShadowRoot {\n  constructor(driver, id) {\n    this.driver_ = driver\n    this.id_ = id\n  }\n\n  /**\n   * Extracts the encoded ShadowRoot ID from the object.\n   *\n   * @param {?} obj The object to extract the ID from.\n   * @return {string} the extracted ID.\n   * @throws {TypeError} if the object is not a valid encoded ID.\n   */\n  static extractId(obj) {\n    if (obj && typeof obj === 'object') {\n      if (typeof obj[SHADOW_ROOT_ID_KEY] === 'string') {\n        return obj[SHADOW_ROOT_ID_KEY]\n      }\n    }\n    throw new TypeError('object is not a ShadowRoot ID')\n  }\n\n  /**\n   * @param {?} obj the object to test.\n   * @return {boolean} whether the object is a valid encoded WebElement ID.\n   */\n  static isId(obj) {\n    return obj && typeof obj === 'object' && typeof obj[SHADOW_ROOT_ID_KEY] === 'string'\n  }\n\n  /**\n   * @return {!Object} Returns the serialized representation of this ShadowRoot.\n   */\n  [Symbols.serialize]() {\n    return this.getId()\n  }\n\n  /**\n   * Schedules a command that targets this element with the parent WebDriver\n   * instance. Will ensure this element's ID is included in the command\n   * parameters under the \"id\" key.\n   *\n   * @param {!command.Command} command The command to schedule.\n   * @return {!Promise<T>} A promise that will be resolved with the result.\n   * @template T\n   * @see WebDriver#schedule\n   * @private\n   */\n  execute_(command) {\n    command.setParameter('id', this)\n    return this.driver_.execute(command)\n  }\n\n  /**\n   * Schedule a command to find a descendant of this ShadowROot. If the element\n   * cannot be found, the returned promise will be rejected with a\n   * {@linkplain error.NoSuchElementError NoSuchElementError}.\n   *\n   * The search criteria for an element may be defined using one of the static\n   * factories on the {@link by.By} class, or as a short-hand\n   * {@link ./by.ByHash} object. For example, the following two statements\n   * are equivalent:\n   *\n   *     var e1 = shadowroot.findElement(By.id('foo'));\n   *     var e2 = shadowroot.findElement({id:'foo'});\n   *\n   * You may also provide a custom locator function, which takes as input this\n   * instance and returns a {@link WebElement}, or a promise that will resolve\n   * to a WebElement. If the returned promise resolves to an array of\n   * WebElements, WebDriver will use the first element. For example, to find the\n   * first visible link on a page, you could write:\n   *\n   *     var link = element.findElement(firstVisibleLink);\n   *\n   *     function firstVisibleLink(shadowRoot) {\n   *       var links = shadowRoot.findElements(By.tagName('a'));\n   *       return promise.filter(links, function(link) {\n   *         return link.isDisplayed();\n   *       });\n   *     }\n   *\n   * @param {!(by.By|Function)} locator The locator strategy to use when\n   *     searching for the element.\n   * @return {!WebElementPromise} A WebElement that can be used to issue\n   *     commands against the located element. If the element is not found, the\n   *     element will be invalidated and all scheduled commands aborted.\n   */\n  findElement(locator) {\n    locator = by.checkedLocator(locator)\n    let id\n    if (typeof locator === 'function') {\n      id = this.driver_.findElementInternal_(locator, this)\n    } else {\n      let cmd = new command.Command(command.Name.FIND_ELEMENT_FROM_SHADOWROOT)\n        .setParameter('using', locator.using)\n        .setParameter('value', locator.value)\n      id = this.execute_(cmd)\n    }\n    return new ShadowRootPromise(this.driver_, id)\n  }\n\n  /**\n   * Locates all the descendants of this element that match the given search\n   * criteria.\n   *\n   * @param {!(by.By|Function)} locator The locator strategy to use when\n   *     searching for the element.\n   * @return {!Promise<!Array<!WebElement>>} A promise that will resolve to an\n   *     array of WebElements.\n   */\n  async findElements(locator) {\n    locator = by.checkedLocator(locator)\n    if (typeof locator === 'function') {\n      return this.driver_.findElementsInternal_(locator, this)\n    } else {\n      let cmd = new command.Command(command.Name.FIND_ELEMENTS_FROM_SHADOWROOT)\n        .setParameter('using', locator.using)\n        .setParameter('value', locator.value)\n      let result = await this.execute_(cmd)\n      return Array.isArray(result) ? result : []\n    }\n  }\n\n  getId() {\n    return this.id_\n  }\n}\n\n/**\n * ShadowRootPromise is a promise that will be fulfilled with a WebElement.\n * This serves as a forward proxy on ShadowRoot, allowing calls to be\n * scheduled without directly on this instance before the underlying\n * ShadowRoot has been fulfilled.\n *\n * @implements { IThenable<!ShadowRoot>}\n * @final\n */\nclass ShadowRootPromise extends ShadowRoot {\n  /**\n   * @param {!WebDriver} driver The parent WebDriver instance for this\n   *     element.\n   * @param {!Promise<!ShadowRoot>} shadow A promise\n   *     that will resolve to the promised element.\n   */\n  constructor(driver, shadow) {\n    super(driver, 'unused')\n\n    /** @override */\n    this.then = shadow.then.bind(shadow)\n\n    /** @override */\n    this.catch = shadow.catch.bind(shadow)\n\n    /**\n     * Defers returning the ShadowRoot ID until the wrapped WebElement has been\n     * resolved.\n     * @override\n     */\n    this.getId = function () {\n      return shadow.then(function (shadow) {\n        return shadow.getId()\n      })\n    }\n  }\n}\n\n//////////////////////////////////////////////////////////////////////////////\n//\n//  Alert\n//\n//////////////////////////////////////////////////////////////////////////////\n\n/**\n * Represents a modal dialog such as {@code alert}, {@code confirm}, or\n * {@code prompt}. Provides functions to retrieve the message displayed with\n * the alert, accept or dismiss the alert, and set the response text (in the\n * case of {@code prompt}).\n */\nclass Alert {\n  /**\n   * @param {!WebDriver} driver The driver controlling the browser this alert\n   *     is attached to.\n   * @param {string} text The message text displayed with this alert.\n   */\n  constructor(driver, text) {\n    /** @private {!WebDriver} */\n    this.driver_ = driver\n\n    /** @private {!Promise<string>} */\n    this.text_ = Promise.resolve(text)\n  }\n\n  /**\n   * Retrieves the message text displayed with this alert. For instance, if the\n   * alert were opened with alert(\"hello\"), then this would return \"hello\".\n   *\n   * @return {!Promise<string>} A promise that will be\n   *     resolved to the text displayed with this alert.\n   */\n  getText() {\n    return this.text_\n  }\n\n  /**\n   * Accepts this alert.\n   *\n   * @return {!Promise<void>} A promise that will be resolved\n   *     when this command has completed.\n   */\n  accept() {\n    return this.driver_.execute(new command.Command(command.Name.ACCEPT_ALERT))\n  }\n\n  /**\n   * Dismisses this alert.\n   *\n   * @return {!Promise<void>} A promise that will be resolved\n   *     when this command has completed.\n   */\n  dismiss() {\n    return this.driver_.execute(new command.Command(command.Name.DISMISS_ALERT))\n  }\n\n  /**\n   * Sets the response text on this alert. This command will return an error if\n   * the underlying alert does not support response text (e.g. window.alert and\n   * window.confirm).\n   *\n   * @param {string} text The text to set.\n   * @return {!Promise<void>} A promise that will be resolved\n   *     when this command has completed.\n   */\n  sendKeys(text) {\n    return this.driver_.execute(new command.Command(command.Name.SET_ALERT_TEXT).setParameter('text', text))\n  }\n}\n\n/**\n * AlertPromise is a promise that will be fulfilled with an Alert. This promise\n * serves as a forward proxy on an Alert, allowing calls to be scheduled\n * directly on this instance before the underlying Alert has been fulfilled. In\n * other words, the following two statements are equivalent:\n *\n *     driver.switchTo().alert().dismiss();\n *     driver.switchTo().alert().then(function(alert) {\n *       return alert.dismiss();\n *     });\n *\n * @implements {IThenable<!Alert>}\n * @final\n */\nclass AlertPromise extends Alert {\n  /**\n   * @param {!WebDriver} driver The driver controlling the browser this\n   *     alert is attached to.\n   * @param {!Promise<!Alert>} alert A thenable\n   *     that will be fulfilled with the promised alert.\n   */\n  constructor(driver, alert) {\n    super(driver, 'unused')\n\n    /** @override */\n    this.then = alert.then.bind(alert)\n\n    /** @override */\n    this.catch = alert.catch.bind(alert)\n\n    /**\n     * Defer returning text until the promised alert has been resolved.\n     * @override\n     */\n    this.getText = function () {\n      return alert.then(function (alert) {\n        return alert.getText()\n      })\n    }\n\n    /**\n     * Defers action until the alert has been located.\n     * @override\n     */\n    this.accept = function () {\n      return alert.then(function (alert) {\n        return alert.accept()\n      })\n    }\n\n    /**\n     * Defers action until the alert has been located.\n     * @override\n     */\n    this.dismiss = function () {\n      return alert.then(function (alert) {\n        return alert.dismiss()\n      })\n    }\n\n    /**\n     * Defers action until the alert has been located.\n     * @override\n     */\n    this.sendKeys = function (text) {\n      return alert.then(function (alert) {\n        return alert.sendKeys(text)\n      })\n    }\n  }\n}\n\n// PUBLIC API\n\nmodule.exports = {\n  Alert,\n  AlertPromise,\n  Condition,\n  Logs,\n  Navigation,\n  Options,\n  ShadowRoot,\n  TargetLocator,\n  IWebDriver,\n  WebDriver,\n  WebElement,\n  WebElementCondition,\n  WebElementPromise,\n  Window,\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/lib/webdriver.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/lib/webelement.js":
/*!***********************************************************!*\
  !*** ./node_modules/selenium-webdriver/lib/webelement.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\nconst { isObject } = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/selenium-webdriver/lib/util.js\")\n\n/**\n * @fileoverview Defines some common methods used for WebElements.\n */\n\nconst LEGACY_ELEMENT_ID_KEY = 'ELEMENT'\nconst ELEMENT_ID_KEY = 'element-6066-11e4-a52e-4f735466cecf'\n\n/**\n * Contains logic about WebElements.\n */\n/**\n * @param {?} obj the object to test.\n * @return {boolean} whether the object is a valid encoded WebElement ID.\n */\nfunction isId(obj) {\n  return isObject(obj) && (typeof obj[ELEMENT_ID_KEY] === 'string' || typeof obj[LEGACY_ELEMENT_ID_KEY] === 'string')\n}\n\n/**\n * Extracts the encoded WebElement ID from the object.\n *\n * @param {?} obj The object to extract the ID from.\n * @return {string} the extracted ID.\n * @throws {TypeError} if the object is not a valid encoded ID.\n */\nfunction extractId(obj) {\n  if (isObject(obj)) {\n    if (typeof obj[ELEMENT_ID_KEY] === 'string') {\n      return obj[ELEMENT_ID_KEY]\n    } else if (typeof obj[LEGACY_ELEMENT_ID_KEY] === 'string') {\n      return obj[LEGACY_ELEMENT_ID_KEY]\n    }\n  }\n  throw new TypeError('object is not a WebElement ID')\n}\n\n// PUBLIC API\n\nmodule.exports = {\n  isId,\n  extractId,\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc2VsZW5pdW0td2ViZHJpdmVyL2xpYi93ZWJlbGVtZW50LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRVk7QUFDWixRQUFRLFdBQVcsRUFBRSxtQkFBTyxDQUFDLG1FQUFROztBQUVyQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsR0FBRztBQUNkLFlBQVksU0FBUztBQUNyQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEdBQUc7QUFDZCxZQUFZLFFBQVE7QUFDcEIsWUFBWSxXQUFXO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2dvb2dsZS1zaGVldHMtc2VsZW5pdW0tYXV0b21hdGlvbi8uL25vZGVfbW9kdWxlcy9zZWxlbml1bS13ZWJkcml2ZXIvbGliL3dlYmVsZW1lbnQuanM/MjZiOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgU29mdHdhcmUgRnJlZWRvbSBDb25zZXJ2YW5jeSAoU0ZDKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIFNGQyBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4ndXNlIHN0cmljdCdcbmNvbnN0IHsgaXNPYmplY3QgfSA9IHJlcXVpcmUoJy4vdXRpbCcpXG5cbi8qKlxuICogQGZpbGVvdmVydmlldyBEZWZpbmVzIHNvbWUgY29tbW9uIG1ldGhvZHMgdXNlZCBmb3IgV2ViRWxlbWVudHMuXG4gKi9cblxuY29uc3QgTEVHQUNZX0VMRU1FTlRfSURfS0VZID0gJ0VMRU1FTlQnXG5jb25zdCBFTEVNRU5UX0lEX0tFWSA9ICdlbGVtZW50LTYwNjYtMTFlNC1hNTJlLTRmNzM1NDY2Y2VjZidcblxuLyoqXG4gKiBDb250YWlucyBsb2dpYyBhYm91dCBXZWJFbGVtZW50cy5cbiAqL1xuLyoqXG4gKiBAcGFyYW0gez99IG9iaiB0aGUgb2JqZWN0IHRvIHRlc3QuXG4gKiBAcmV0dXJuIHtib29sZWFufSB3aGV0aGVyIHRoZSBvYmplY3QgaXMgYSB2YWxpZCBlbmNvZGVkIFdlYkVsZW1lbnQgSUQuXG4gKi9cbmZ1bmN0aW9uIGlzSWQob2JqKSB7XG4gIHJldHVybiBpc09iamVjdChvYmopICYmICh0eXBlb2Ygb2JqW0VMRU1FTlRfSURfS0VZXSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIG9ialtMRUdBQ1lfRUxFTUVOVF9JRF9LRVldID09PSAnc3RyaW5nJylcbn1cblxuLyoqXG4gKiBFeHRyYWN0cyB0aGUgZW5jb2RlZCBXZWJFbGVtZW50IElEIGZyb20gdGhlIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0gez99IG9iaiBUaGUgb2JqZWN0IHRvIGV4dHJhY3QgdGhlIElEIGZyb20uXG4gKiBAcmV0dXJuIHtzdHJpbmd9IHRoZSBleHRyYWN0ZWQgSUQuXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IGlmIHRoZSBvYmplY3QgaXMgbm90IGEgdmFsaWQgZW5jb2RlZCBJRC5cbiAqL1xuZnVuY3Rpb24gZXh0cmFjdElkKG9iaikge1xuICBpZiAoaXNPYmplY3Qob2JqKSkge1xuICAgIGlmICh0eXBlb2Ygb2JqW0VMRU1FTlRfSURfS0VZXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBvYmpbRUxFTUVOVF9JRF9LRVldXG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqW0xFR0FDWV9FTEVNRU5UX0lEX0tFWV0gPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gb2JqW0xFR0FDWV9FTEVNRU5UX0lEX0tFWV1cbiAgICB9XG4gIH1cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcignb2JqZWN0IGlzIG5vdCBhIFdlYkVsZW1lbnQgSUQnKVxufVxuXG4vLyBQVUJMSUMgQVBJXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc0lkLFxuICBleHRyYWN0SWQsXG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/lib/webelement.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/net/index.js":
/*!******************************************************!*\
  !*** ./node_modules/selenium-webdriver/net/index.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\n\nconst os = __webpack_require__(/*! node:os */ \"node:os\")\n\nfunction getLoInterface() {\n  let name\n  if (process.platform === 'darwin') {\n    name = 'lo0'\n  } else if (process.platform === 'linux') {\n    name = 'lo'\n  }\n  return name ? os.networkInterfaces()[name] : null\n}\n\n/**\n * Queries the system network interfaces for an IP address.\n * @param {boolean} loopback Whether to find a loopback address.\n * @param {string} family The IP family (IPv4 or IPv6). Defaults to IPv4.\n * @return {(string|undefined)} The located IP address or undefined.\n */\nfunction getIPAddress(loopback, family) {\n  let interfaces\n  if (loopback) {\n    const lo = getLoInterface()\n    interfaces = lo ? [lo] : null\n  }\n  interfaces = interfaces || os.networkInterfaces()\n  for (let key in interfaces) {\n    if (!Object.prototype.hasOwnProperty.call(interfaces, key)) {\n      continue\n    }\n\n    for (let ipAddress of interfaces[key]) {\n      if ((ipAddress.family === family || `IPv${ipAddress.family}` === family) && ipAddress.internal === loopback) {\n        return ipAddress.address\n      }\n    }\n  }\n  return undefined\n}\n\n// PUBLIC API\n\n/**\n * Retrieves the external IP address for this host.\n * @param {string=} family The IP family to retrieve. Defaults to \"IPv4\".\n * @return {(string|undefined)} The IP address or undefined if not available.\n */\nfunction getAddress(family = 'IPv4') {\n  return getIPAddress(false, family)\n}\n\n/**\n * Retrieves a loopback address for this machine.\n * @param {string=} family The IP family to retrieve. Defaults to \"IPv4\".\n * @return {(string|undefined)} The IP address or undefined if not available.\n */\nfunction getLoopbackAddress(family = 'IPv4') {\n  return getIPAddress(true, family)\n}\n\n/**\n * Splits a hostport string, e.g. \"www.example.com:80\", into its component\n * parts.\n *\n * @param {string} hostport The string to split.\n * @return {{host: string, port: ?number}} A host and port. If no port is\n *     present in the argument `hostport`, port is null.\n */\nfunction splitHostAndPort(hostport) {\n  let lastIndex = hostport.lastIndexOf(':')\n  if (lastIndex < 0) {\n    return { host: hostport, port: null }\n  }\n\n  let firstIndex = hostport.indexOf(':')\n  if (firstIndex != lastIndex && !hostport.includes('[')) {\n    // Multiple colons but no brackets, so assume the string is an IPv6 address\n    // with no port (e.g. \"1234:5678:9:0:1234:5678:9:0\").\n    return { host: hostport, port: null }\n  }\n\n  let host = hostport.slice(0, lastIndex)\n  if (host.startsWith('[') && host.endsWith(']')) {\n    host = host.slice(1, -1)\n  }\n\n  let port = parseInt(hostport.slice(lastIndex + 1), 10)\n  return { host, port }\n}\n\n// PUBLIC API\nmodule.exports = {\n  splitHostAndPort,\n  getLoopbackAddress,\n  getAddress,\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc2VsZW5pdW0td2ViZHJpdmVyL25ldC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVZOztBQUVaLFdBQVcsbUJBQU8sQ0FBQyx3QkFBUzs7QUFFNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQixXQUFXLFFBQVE7QUFDbkIsWUFBWSxvQkFBb0I7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZ0RBQWdELGlCQUFpQjtBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQixZQUFZLG9CQUFvQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCLFlBQVksb0JBQW9CO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLGFBQWEsOEJBQThCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXO0FBQ1g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ29vZ2xlLXNoZWV0cy1zZWxlbml1bS1hdXRvbWF0aW9uLy4vbm9kZV9tb2R1bGVzL3NlbGVuaXVtLXdlYmRyaXZlci9uZXQvaW5kZXguanM/YmViNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgU29mdHdhcmUgRnJlZWRvbSBDb25zZXJ2YW5jeSAoU0ZDKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIFNGQyBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4ndXNlIHN0cmljdCdcblxuY29uc3Qgb3MgPSByZXF1aXJlKCdub2RlOm9zJylcblxuZnVuY3Rpb24gZ2V0TG9JbnRlcmZhY2UoKSB7XG4gIGxldCBuYW1lXG4gIGlmIChwcm9jZXNzLnBsYXRmb3JtID09PSAnZGFyd2luJykge1xuICAgIG5hbWUgPSAnbG8wJ1xuICB9IGVsc2UgaWYgKHByb2Nlc3MucGxhdGZvcm0gPT09ICdsaW51eCcpIHtcbiAgICBuYW1lID0gJ2xvJ1xuICB9XG4gIHJldHVybiBuYW1lID8gb3MubmV0d29ya0ludGVyZmFjZXMoKVtuYW1lXSA6IG51bGxcbn1cblxuLyoqXG4gKiBRdWVyaWVzIHRoZSBzeXN0ZW0gbmV0d29yayBpbnRlcmZhY2VzIGZvciBhbiBJUCBhZGRyZXNzLlxuICogQHBhcmFtIHtib29sZWFufSBsb29wYmFjayBXaGV0aGVyIHRvIGZpbmQgYSBsb29wYmFjayBhZGRyZXNzLlxuICogQHBhcmFtIHtzdHJpbmd9IGZhbWlseSBUaGUgSVAgZmFtaWx5IChJUHY0IG9yIElQdjYpLiBEZWZhdWx0cyB0byBJUHY0LlxuICogQHJldHVybiB7KHN0cmluZ3x1bmRlZmluZWQpfSBUaGUgbG9jYXRlZCBJUCBhZGRyZXNzIG9yIHVuZGVmaW5lZC5cbiAqL1xuZnVuY3Rpb24gZ2V0SVBBZGRyZXNzKGxvb3BiYWNrLCBmYW1pbHkpIHtcbiAgbGV0IGludGVyZmFjZXNcbiAgaWYgKGxvb3BiYWNrKSB7XG4gICAgY29uc3QgbG8gPSBnZXRMb0ludGVyZmFjZSgpXG4gICAgaW50ZXJmYWNlcyA9IGxvID8gW2xvXSA6IG51bGxcbiAgfVxuICBpbnRlcmZhY2VzID0gaW50ZXJmYWNlcyB8fCBvcy5uZXR3b3JrSW50ZXJmYWNlcygpXG4gIGZvciAobGV0IGtleSBpbiBpbnRlcmZhY2VzKSB7XG4gICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaW50ZXJmYWNlcywga2V5KSkge1xuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpcEFkZHJlc3Mgb2YgaW50ZXJmYWNlc1trZXldKSB7XG4gICAgICBpZiAoKGlwQWRkcmVzcy5mYW1pbHkgPT09IGZhbWlseSB8fCBgSVB2JHtpcEFkZHJlc3MuZmFtaWx5fWAgPT09IGZhbWlseSkgJiYgaXBBZGRyZXNzLmludGVybmFsID09PSBsb29wYmFjaykge1xuICAgICAgICByZXR1cm4gaXBBZGRyZXNzLmFkZHJlc3NcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZFxufVxuXG4vLyBQVUJMSUMgQVBJXG5cbi8qKlxuICogUmV0cmlldmVzIHRoZSBleHRlcm5hbCBJUCBhZGRyZXNzIGZvciB0aGlzIGhvc3QuXG4gKiBAcGFyYW0ge3N0cmluZz19IGZhbWlseSBUaGUgSVAgZmFtaWx5IHRvIHJldHJpZXZlLiBEZWZhdWx0cyB0byBcIklQdjRcIi5cbiAqIEByZXR1cm4geyhzdHJpbmd8dW5kZWZpbmVkKX0gVGhlIElQIGFkZHJlc3Mgb3IgdW5kZWZpbmVkIGlmIG5vdCBhdmFpbGFibGUuXG4gKi9cbmZ1bmN0aW9uIGdldEFkZHJlc3MoZmFtaWx5ID0gJ0lQdjQnKSB7XG4gIHJldHVybiBnZXRJUEFkZHJlc3MoZmFsc2UsIGZhbWlseSlcbn1cblxuLyoqXG4gKiBSZXRyaWV2ZXMgYSBsb29wYmFjayBhZGRyZXNzIGZvciB0aGlzIG1hY2hpbmUuXG4gKiBAcGFyYW0ge3N0cmluZz19IGZhbWlseSBUaGUgSVAgZmFtaWx5IHRvIHJldHJpZXZlLiBEZWZhdWx0cyB0byBcIklQdjRcIi5cbiAqIEByZXR1cm4geyhzdHJpbmd8dW5kZWZpbmVkKX0gVGhlIElQIGFkZHJlc3Mgb3IgdW5kZWZpbmVkIGlmIG5vdCBhdmFpbGFibGUuXG4gKi9cbmZ1bmN0aW9uIGdldExvb3BiYWNrQWRkcmVzcyhmYW1pbHkgPSAnSVB2NCcpIHtcbiAgcmV0dXJuIGdldElQQWRkcmVzcyh0cnVlLCBmYW1pbHkpXG59XG5cbi8qKlxuICogU3BsaXRzIGEgaG9zdHBvcnQgc3RyaW5nLCBlLmcuIFwid3d3LmV4YW1wbGUuY29tOjgwXCIsIGludG8gaXRzIGNvbXBvbmVudFxuICogcGFydHMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGhvc3Rwb3J0IFRoZSBzdHJpbmcgdG8gc3BsaXQuXG4gKiBAcmV0dXJuIHt7aG9zdDogc3RyaW5nLCBwb3J0OiA/bnVtYmVyfX0gQSBob3N0IGFuZCBwb3J0LiBJZiBubyBwb3J0IGlzXG4gKiAgICAgcHJlc2VudCBpbiB0aGUgYXJndW1lbnQgYGhvc3Rwb3J0YCwgcG9ydCBpcyBudWxsLlxuICovXG5mdW5jdGlvbiBzcGxpdEhvc3RBbmRQb3J0KGhvc3Rwb3J0KSB7XG4gIGxldCBsYXN0SW5kZXggPSBob3N0cG9ydC5sYXN0SW5kZXhPZignOicpXG4gIGlmIChsYXN0SW5kZXggPCAwKSB7XG4gICAgcmV0dXJuIHsgaG9zdDogaG9zdHBvcnQsIHBvcnQ6IG51bGwgfVxuICB9XG5cbiAgbGV0IGZpcnN0SW5kZXggPSBob3N0cG9ydC5pbmRleE9mKCc6JylcbiAgaWYgKGZpcnN0SW5kZXggIT0gbGFzdEluZGV4ICYmICFob3N0cG9ydC5pbmNsdWRlcygnWycpKSB7XG4gICAgLy8gTXVsdGlwbGUgY29sb25zIGJ1dCBubyBicmFja2V0cywgc28gYXNzdW1lIHRoZSBzdHJpbmcgaXMgYW4gSVB2NiBhZGRyZXNzXG4gICAgLy8gd2l0aCBubyBwb3J0IChlLmcuIFwiMTIzNDo1Njc4Ojk6MDoxMjM0OjU2Nzg6OTowXCIpLlxuICAgIHJldHVybiB7IGhvc3Q6IGhvc3Rwb3J0LCBwb3J0OiBudWxsIH1cbiAgfVxuXG4gIGxldCBob3N0ID0gaG9zdHBvcnQuc2xpY2UoMCwgbGFzdEluZGV4KVxuICBpZiAoaG9zdC5zdGFydHNXaXRoKCdbJykgJiYgaG9zdC5lbmRzV2l0aCgnXScpKSB7XG4gICAgaG9zdCA9IGhvc3Quc2xpY2UoMSwgLTEpXG4gIH1cblxuICBsZXQgcG9ydCA9IHBhcnNlSW50KGhvc3Rwb3J0LnNsaWNlKGxhc3RJbmRleCArIDEpLCAxMClcbiAgcmV0dXJuIHsgaG9zdCwgcG9ydCB9XG59XG5cbi8vIFBVQkxJQyBBUElcbm1vZHVsZS5leHBvcnRzID0ge1xuICBzcGxpdEhvc3RBbmRQb3J0LFxuICBnZXRMb29wYmFja0FkZHJlc3MsXG4gIGdldEFkZHJlc3MsXG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/net/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/net/portprober.js":
/*!***********************************************************!*\
  !*** ./node_modules/selenium-webdriver/net/portprober.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\n\nconst net = __webpack_require__(/*! node:net */ \"node:net\")\n\n/**\n * Tests if a port is free.\n * @param {number} port The port to test.\n * @param {string=} opt_host The bound host to test the {@code port} against.\n *     Defaults to {@code INADDR_ANY}.\n * @return {!Promise<boolean>} A promise that will resolve with whether the port\n *     is free.\n */\nfunction isFree(port, opt_host) {\n  return new Promise((resolve, reject) => {\n    const server = net.createServer().on('error', function (e) {\n      if (e.code === 'EADDRINUSE' || e.code === 'EACCES') {\n        resolve(false)\n      } else {\n        reject(e)\n      }\n    })\n\n    server.listen(port, opt_host, function () {\n      server.close(() => resolve(true))\n    })\n  })\n}\n\n/**\n * @param {string=} opt_host The bound host to test the {@code port} against.\n *     Defaults to {@code INADDR_ANY}.\n * @return {!Promise<number>} A promise that will resolve to a free port. If a\n *     port cannot be found, the promise will be rejected.\n */\n\nfunction findFreePort(opt_host) {\n  return new Promise((resolve, reject) => {\n    const server = net.createServer()\n    server.on('listening', function () {\n      resolve(server.address().port)\n      server.close()\n    })\n    server.on('error', (e) => {\n      if (e.code === 'EADDRINUSE' || e.code === 'EACCES') {\n        resolve('Unable to find a free port')\n      } else {\n        reject(e)\n      }\n    })\n    // By providing 0 we let the operative system find an arbitrary port\n    server.listen(0, opt_host)\n  })\n}\n\n// PUBLIC API\nmodule.exports = {\n  findFreePort,\n  isFree,\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc2VsZW5pdW0td2ViZHJpdmVyL25ldC9wb3J0cHJvYmVyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRVk7O0FBRVosWUFBWSxtQkFBTyxDQUFDLDBCQUFVOztBQUU5QjtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsU0FBUyxxQ0FBcUMsWUFBWTtBQUNyRSxvQkFBb0IsaUJBQWlCO0FBQ3JDLFlBQVksbUJBQW1CO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUVBO0FBQ0EsV0FBVyxTQUFTLHFDQUFxQyxZQUFZO0FBQ3JFLG9CQUFvQixpQkFBaUI7QUFDckMsWUFBWSxrQkFBa0I7QUFDOUI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ29vZ2xlLXNoZWV0cy1zZWxlbml1bS1hdXRvbWF0aW9uLy4vbm9kZV9tb2R1bGVzL3NlbGVuaXVtLXdlYmRyaXZlci9uZXQvcG9ydHByb2Jlci5qcz8xYWM4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBTb2Z0d2FyZSBGcmVlZG9tIENvbnNlcnZhbmN5IChTRkMpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgU0ZDIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbid1c2Ugc3RyaWN0J1xuXG5jb25zdCBuZXQgPSByZXF1aXJlKCdub2RlOm5ldCcpXG5cbi8qKlxuICogVGVzdHMgaWYgYSBwb3J0IGlzIGZyZWUuXG4gKiBAcGFyYW0ge251bWJlcn0gcG9ydCBUaGUgcG9ydCB0byB0ZXN0LlxuICogQHBhcmFtIHtzdHJpbmc9fSBvcHRfaG9zdCBUaGUgYm91bmQgaG9zdCB0byB0ZXN0IHRoZSB7QGNvZGUgcG9ydH0gYWdhaW5zdC5cbiAqICAgICBEZWZhdWx0cyB0byB7QGNvZGUgSU5BRERSX0FOWX0uXG4gKiBAcmV0dXJuIHshUHJvbWlzZTxib29sZWFuPn0gQSBwcm9taXNlIHRoYXQgd2lsbCByZXNvbHZlIHdpdGggd2hldGhlciB0aGUgcG9ydFxuICogICAgIGlzIGZyZWUuXG4gKi9cbmZ1bmN0aW9uIGlzRnJlZShwb3J0LCBvcHRfaG9zdCkge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IHNlcnZlciA9IG5ldC5jcmVhdGVTZXJ2ZXIoKS5vbignZXJyb3InLCBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKGUuY29kZSA9PT0gJ0VBRERSSU5VU0UnIHx8IGUuY29kZSA9PT0gJ0VBQ0NFUycpIHtcbiAgICAgICAgcmVzb2x2ZShmYWxzZSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlamVjdChlKVxuICAgICAgfVxuICAgIH0pXG5cbiAgICBzZXJ2ZXIubGlzdGVuKHBvcnQsIG9wdF9ob3N0LCBmdW5jdGlvbiAoKSB7XG4gICAgICBzZXJ2ZXIuY2xvc2UoKCkgPT4gcmVzb2x2ZSh0cnVlKSlcbiAgICB9KVxuICB9KVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nPX0gb3B0X2hvc3QgVGhlIGJvdW5kIGhvc3QgdG8gdGVzdCB0aGUge0Bjb2RlIHBvcnR9IGFnYWluc3QuXG4gKiAgICAgRGVmYXVsdHMgdG8ge0Bjb2RlIElOQUREUl9BTll9LlxuICogQHJldHVybiB7IVByb21pc2U8bnVtYmVyPn0gQSBwcm9taXNlIHRoYXQgd2lsbCByZXNvbHZlIHRvIGEgZnJlZSBwb3J0LiBJZiBhXG4gKiAgICAgcG9ydCBjYW5ub3QgYmUgZm91bmQsIHRoZSBwcm9taXNlIHdpbGwgYmUgcmVqZWN0ZWQuXG4gKi9cblxuZnVuY3Rpb24gZmluZEZyZWVQb3J0KG9wdF9ob3N0KSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3Qgc2VydmVyID0gbmV0LmNyZWF0ZVNlcnZlcigpXG4gICAgc2VydmVyLm9uKCdsaXN0ZW5pbmcnLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXNvbHZlKHNlcnZlci5hZGRyZXNzKCkucG9ydClcbiAgICAgIHNlcnZlci5jbG9zZSgpXG4gICAgfSlcbiAgICBzZXJ2ZXIub24oJ2Vycm9yJywgKGUpID0+IHtcbiAgICAgIGlmIChlLmNvZGUgPT09ICdFQUREUklOVVNFJyB8fCBlLmNvZGUgPT09ICdFQUNDRVMnKSB7XG4gICAgICAgIHJlc29sdmUoJ1VuYWJsZSB0byBmaW5kIGEgZnJlZSBwb3J0JylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlamVjdChlKVxuICAgICAgfVxuICAgIH0pXG4gICAgLy8gQnkgcHJvdmlkaW5nIDAgd2UgbGV0IHRoZSBvcGVyYXRpdmUgc3lzdGVtIGZpbmQgYW4gYXJiaXRyYXJ5IHBvcnRcbiAgICBzZXJ2ZXIubGlzdGVuKDAsIG9wdF9ob3N0KVxuICB9KVxufVxuXG4vLyBQVUJMSUMgQVBJXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZmluZEZyZWVQb3J0LFxuICBpc0ZyZWUsXG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/net/portprober.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/remote/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/selenium-webdriver/remote/index.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\n\nconst url = __webpack_require__(/*! node:url */ \"node:url\")\n\nconst httpUtil = __webpack_require__(/*! ../http/util */ \"(rsc)/./node_modules/selenium-webdriver/http/util.js\")\nconst io = __webpack_require__(/*! ../io */ \"(rsc)/./node_modules/selenium-webdriver/io/index.js\")\nconst { exec } = __webpack_require__(/*! ../io/exec */ \"(rsc)/./node_modules/selenium-webdriver/io/exec.js\")\nconst { Zip } = __webpack_require__(/*! ../io/zip */ \"(rsc)/./node_modules/selenium-webdriver/io/zip.js\")\nconst cmd = __webpack_require__(/*! ../lib/command */ \"(rsc)/./node_modules/selenium-webdriver/lib/command.js\")\nconst input = __webpack_require__(/*! ../lib/input */ \"(rsc)/./node_modules/selenium-webdriver/lib/input.js\")\nconst net = __webpack_require__(/*! ../net */ \"(rsc)/./node_modules/selenium-webdriver/net/index.js\")\nconst portprober = __webpack_require__(/*! ../net/portprober */ \"(rsc)/./node_modules/selenium-webdriver/net/portprober.js\")\nconst logging = __webpack_require__(/*! ../lib/logging */ \"(rsc)/./node_modules/selenium-webdriver/lib/logging.js\")\n\nconst { getJavaPath, formatSpawnArgs } = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/selenium-webdriver/remote/util.js\")\n\n/**\n * @typedef {(string|!Array<string|number|!stream.Stream|null|undefined>)}\n */\nlet StdIoOptions // eslint-disable-line\n\n/**\n * @typedef {(string|!IThenable<string>)}\n */\nlet CommandLineFlag // eslint-disable-line\n\n/**\n * A record object that defines the configuration options for a DriverService\n * instance.\n *\n * @record\n */\nfunction ServiceOptions() {}\n\n/**\n * Whether the service should only be accessed on this host's loopback address.\n *\n * @type {(boolean|undefined)}\n */\nServiceOptions.prototype.loopback\n\n/**\n * The host name to access the server on. If this option is specified, the\n * {@link #loopback} option will be ignored.\n *\n * @type {(string|undefined)}\n */\nServiceOptions.prototype.hostname\n\n/**\n * The port to start the server on (must be > 0). If the port is provided as a\n * promise, the service will wait for the promise to resolve before starting.\n *\n * @type {(number|!IThenable<number>)}\n */\nServiceOptions.prototype.port\n\n/**\n * The arguments to pass to the service. If a promise is provided, the service\n * will wait for it to resolve before starting.\n *\n * @type {!(Array<CommandLineFlag>|IThenable<!Array<CommandLineFlag>>)}\n */\nServiceOptions.prototype.args\n\n/**\n * The base path on the server for the WebDriver wire protocol (e.g. '/wd/hub').\n * Defaults to '/'.\n *\n * @type {(string|undefined|null)}\n */\nServiceOptions.prototype.path\n\n/**\n * The environment variables that should be visible to the server process.\n * Defaults to inheriting the current process's environment.\n *\n * @type {(Object<string, string>|undefined)}\n */\nServiceOptions.prototype.env\n\n/**\n * IO configuration for the spawned server process. For more information, refer\n * to the documentation of `child_process.spawn`.\n *\n * @type {(StdIoOptions|undefined)}\n * @see https://nodejs.org/dist/latest-v4.x/docs/api/child_process.html#child_process_options_stdio\n */\nServiceOptions.prototype.stdio\n\n/**\n * Manages the life and death of a native executable WebDriver server.\n *\n * It is expected that the driver server implements the\n * https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol.\n * Furthermore, the managed server should support multiple concurrent sessions,\n * so that this class may be reused for multiple clients.\n */\nclass DriverService {\n  /**\n   * @param {string} executable Path to the executable to run.\n   * @param {!ServiceOptions} options Configuration options for the service.\n   */\n  constructor(executable, options) {\n    /** @private @const */\n    this.log_ = logging.getLogger(`${logging.Type.DRIVER}.DriverService`)\n    /** @private {string} */\n    this.executable_ = executable\n\n    /** @private {boolean} */\n    this.loopbackOnly_ = !!options.loopback\n\n    /** @private {(string|undefined)} */\n    this.hostname_ = options.hostname\n\n    /** @private {(number|!IThenable<number>)} */\n    this.port_ = options.port\n\n    /**\n     * @private {!(Array<CommandLineFlag>|\n     *             IThenable<!Array<CommandLineFlag>>)}\n     */\n    this.args_ = options.args\n\n    /** @private {string} */\n    this.path_ = options.path || '/'\n\n    /** @private {!Object<string, string>} */\n    this.env_ = options.env || process.env\n\n    /**\n     * @private {(string|!Array<string|number|!stream.Stream|null|undefined>)}\n     */\n    this.stdio_ = options.stdio || 'ignore'\n\n    /**\n     * A promise for the managed subprocess, or null if the server has not been\n     * started yet. This promise will never be rejected.\n     * @private {Promise<!exec.Command>}\n     */\n    this.command_ = null\n\n    /**\n     * Promise that resolves to the server's address or null if the server has\n     * not been started. This promise will be rejected if the server terminates\n     * before it starts accepting WebDriver requests.\n     * @private {Promise<string>}\n     */\n    this.address_ = null\n  }\n\n  getExecutable() {\n    return this.executable_\n  }\n\n  setExecutable(value) {\n    this.executable_ = value\n  }\n\n  /**\n   * @return {!Promise<string>} A promise that resolves to the server's address.\n   * @throws {Error} If the server has not been started.\n   */\n  address() {\n    if (this.address_) {\n      return this.address_\n    }\n    throw Error('Server has not been started.')\n  }\n\n  /**\n   * Returns whether the underlying process is still running. This does not take\n   * into account whether the process is in the process of shutting down.\n   * @return {boolean} Whether the underlying service process is running.\n   */\n  isRunning() {\n    return !!this.address_\n  }\n\n  /**\n   * Starts the server if it is not already running.\n   * @param {number=} opt_timeoutMs How long to wait, in milliseconds, for the\n   *     server to start accepting requests. Defaults to 30 seconds.\n   * @return {!Promise<string>} A promise that will resolve to the server's base\n   *     URL when it has started accepting requests. If the timeout expires\n   *     before the server has started, the promise will be rejected.\n   */\n  start(opt_timeoutMs) {\n    if (this.address_) {\n      return this.address_\n    }\n\n    const timeout = opt_timeoutMs || DriverService.DEFAULT_START_TIMEOUT_MS\n    const self = this\n\n    let resolveCommand\n    this.command_ = new Promise((resolve) => (resolveCommand = resolve))\n\n    this.address_ = new Promise((resolveAddress, rejectAddress) => {\n      resolveAddress(\n        Promise.resolve(this.port_).then((port) => {\n          if (port <= 0) {\n            throw Error('Port must be > 0: ' + port)\n          }\n\n          return resolveCommandLineFlags(this.args_).then((args) => {\n            const command = exec(self.executable_, {\n              args: args,\n              env: self.env_,\n              stdio: self.stdio_,\n            })\n\n            resolveCommand(command)\n\n            const earlyTermination = command.result().then(function (result) {\n              const error =\n                result.code == null\n                  ? Error('Server was killed with ' + result.signal)\n                  : Error('Server terminated early with status ' + result.code)\n              rejectAddress(error)\n              self.address_ = null\n              self.command_ = null\n              throw error\n            })\n\n            let hostname = self.hostname_\n            if (!hostname) {\n              hostname = (!self.loopbackOnly_ && net.getAddress()) || net.getLoopbackAddress()\n            }\n\n            const serverUrl = url.format({\n              protocol: 'http',\n              hostname: hostname,\n              port: port + '',\n              pathname: self.path_,\n            })\n\n            return new Promise((fulfill, reject) => {\n              let cancelToken = earlyTermination.catch((e) => reject(Error(e.message)))\n\n              httpUtil.waitForServer(serverUrl, timeout, cancelToken).then(\n                (_) => fulfill(serverUrl),\n                (err) => {\n                  if (err instanceof httpUtil.CancellationError) {\n                    fulfill(serverUrl)\n                  } else {\n                    reject(err)\n                  }\n                },\n              )\n            })\n          })\n        }),\n      )\n    })\n\n    return this.address_\n  }\n\n  /**\n   * Stops the service if it is not currently running. This function will kill\n   * the server immediately. To synchronize with the active control flow, use\n   * {@link #stop()}.\n   * @return {!Promise} A promise that will be resolved when the server has been\n   *     stopped.\n   */\n  kill() {\n    if (!this.address_ || !this.command_) {\n      return Promise.resolve() // Not currently running.\n    }\n    let cmd = this.command_\n    this.address_ = null\n    this.command_ = null\n    return cmd.then((c) => c.kill('SIGTERM'))\n  }\n}\n\n/**\n * @param {!(Array<CommandLineFlag>|IThenable<!Array<CommandLineFlag>>)} args\n * @return {!Promise<!Array<string>>}\n */\nfunction resolveCommandLineFlags(args) {\n  // Resolve the outer array, then the individual flags.\n  return Promise.resolve(args).then(/** !Array<CommandLineFlag> */ (args) => Promise.all(args))\n}\n\n/**\n * The default amount of time, in milliseconds, to wait for the server to\n * start.\n * @const {number}\n */\nDriverService.DEFAULT_START_TIMEOUT_MS = 30 * 1000\n\n/**\n * Creates {@link DriverService} objects that manage a WebDriver server in a\n * child process.\n */\nDriverService.Builder = class {\n  /**\n   * @param {string} exe Path to the executable to use. This executable must\n   *     accept the `--port` flag for defining the port to start the server on.\n   * @throws {Error} If the provided executable path does not exist.\n   */\n  constructor(exe) {\n    /** @private @const {string} */\n    this.exe_ = exe\n\n    /** @private {!ServiceOptions} */\n    this.options_ = {\n      args: [],\n      port: 0,\n      env: null,\n      stdio: 'ignore',\n    }\n  }\n\n  /**\n   * Define additional command line arguments to use when starting the server.\n   *\n   * @param {...CommandLineFlag} var_args The arguments to include.\n   * @return {!THIS} A self reference.\n   * @this {THIS}\n   * @template THIS\n   */\n  addArguments(...arguments_) {\n    this.options_.args = this.options_.args.concat(arguments_)\n    return this\n  }\n\n  /**\n   * Sets the host name to access the server on. If specified, the\n   * {@linkplain #setLoopback() loopback} setting will be ignored.\n   *\n   * @param {string} hostname\n   * @return {!DriverService.Builder} A self reference.\n   */\n  setHostname(hostname) {\n    this.options_.hostname = hostname\n    return this\n  }\n\n  /**\n   * Sets whether the service should be accessed at this host's loopback\n   * address.\n   *\n   * @param {boolean} loopback\n   * @return {!DriverService.Builder} A self reference.\n   */\n  setLoopback(loopback) {\n    this.options_.loopback = loopback\n    return this\n  }\n\n  /**\n   * Sets the base path for WebDriver REST commands (e.g. \"/wd/hub\").\n   * By default, the driver will accept commands relative to \"/\".\n   *\n   * @param {?string} basePath The base path to use, or `null` to use the\n   *     default.\n   * @return {!DriverService.Builder} A self reference.\n   */\n  setPath(basePath) {\n    this.options_.path = basePath\n    return this\n  }\n\n  /**\n   * Sets the port to start the server on.\n   *\n   * @param {number} port The port to use, or 0 for any free port.\n   * @return {!DriverService.Builder} A self reference.\n   * @throws {Error} If an invalid port is specified.\n   */\n  setPort(port) {\n    if (port < 0) {\n      throw Error(`port must be >= 0: ${port}`)\n    }\n    this.options_.port = port\n    return this\n  }\n\n  /**\n   * Defines the environment to start the server under. This setting will be\n   * inherited by every browser session started by the server. By default, the\n   * server will inherit the enviroment of the current process.\n   *\n   * @param {(Map<string, string>|Object<string, string>|null)} env The desired\n   *     environment to use, or `null` if the server should inherit the\n   *     current environment.\n   * @return {!DriverService.Builder} A self reference.\n   */\n  setEnvironment(env) {\n    if (env instanceof Map) {\n      let tmp = {}\n      env.forEach((value, key) => (tmp[key] = value))\n      env = tmp\n    }\n    this.options_.env = env\n    return this\n  }\n\n  /**\n   * IO configuration for the spawned server process. For more information,\n   * refer to the documentation of `child_process.spawn`.\n   *\n   * @param {StdIoOptions} config The desired IO configuration.\n   * @return {!DriverService.Builder} A self reference.\n   * @see https://nodejs.org/dist/latest-v4.x/docs/api/child_process.html#child_process_options_stdio\n   */\n  setStdio(config) {\n    this.options_.stdio = config\n    return this\n  }\n\n  /**\n   * Creates a new DriverService using this instance's current configuration.\n   *\n   * @return {!DriverService} A new driver service.\n   */\n  build() {\n    let port = this.options_.port || portprober.findFreePort()\n    let args = Promise.resolve(port).then((port) => {\n      return this.options_.args.concat('--port=' + port)\n    })\n\n    let options =\n      /** @type {!ServiceOptions} */\n      (Object.assign({}, this.options_, { args, port }))\n    return new DriverService(this.exe_, options)\n  }\n}\n\n/**\n * Manages the life and death of the\n * <a href=\"https://www.selenium.dev/downloads/\">\n * standalone Selenium server</a>.\n */\nclass SeleniumServer extends DriverService {\n  /**\n   * @param {string} jar Path to the Selenium server jar.\n   * @param {SeleniumServer.Options=} opt_options Configuration options for the\n   *     server.\n   * @throws {Error} If the path to the Selenium jar is not specified or if an\n   *     invalid port is specified.\n   */\n  constructor(jar, opt_options) {\n    if (!jar) {\n      throw Error('Path to the Selenium jar not specified')\n    }\n\n    const options = opt_options || {}\n\n    if (options.port < 0) {\n      throw Error('Port must be >= 0: ' + options.port)\n    }\n\n    let port = options.port || portprober.findFreePort()\n    let args = Promise.all([port, options.jvmArgs || [], options.args || []]).then((resolved) => {\n      let port = resolved[0]\n      let jvmArgs = resolved[1]\n      let args = resolved[2]\n\n      const fullArgsList = jvmArgs.concat('-jar', jar, '-port', port).concat(args)\n\n      return formatSpawnArgs(jar, fullArgsList)\n    })\n\n    const java = getJavaPath()\n\n    super(java, {\n      loopback: options.loopback,\n      port: port,\n      args: args,\n      path: '/wd/hub',\n      env: options.env,\n      stdio: options.stdio,\n    })\n  }\n}\n\n/**\n * A record object describing configuration options for a {@link SeleniumServer}\n * instance.\n *\n * @record\n */\nSeleniumServer.Options = class {\n  constructor() {\n    /**\n     * Whether the server should only be accessible on this host's loopback\n     * address.\n     *\n     * @type {(boolean|undefined)}\n     */\n    this.loopback\n\n    /**\n     * The port to start the server on (must be > 0). If the port is provided as\n     * a promise, the service will wait for the promise to resolve before\n     * starting.\n     *\n     * @type {(number|!IThenable<number>)}\n     */\n    this.port\n\n    /**\n     * The arguments to pass to the service. If a promise is provided,\n     * the service will wait for it to resolve before starting.\n     *\n     * @type {!(Array<string>|IThenable<!Array<string>>)}\n     */\n    this.args\n\n    /**\n     * The arguments to pass to the JVM. If a promise is provided,\n     * the service will wait for it to resolve before starting.\n     *\n     * @type {(!Array<string>|!IThenable<!Array<string>>|undefined)}\n     */\n    this.jvmArgs\n\n    /**\n     * The environment variables that should be visible to the server\n     * process. Defaults to inheriting the current process's environment.\n     *\n     * @type {(!Object<string, string>|undefined)}\n     */\n    this.env\n\n    /**\n     * IO configuration for the spawned server process. If unspecified, IO will\n     * be ignored.\n     *\n     * @type {(string|!Array<string|number|!stream.Stream|null|undefined>|\n     *         undefined)}\n     * @see <https://nodejs.org/dist/latest-v8.x/docs/api/child_process.html#child_process_options_stdio>\n     */\n    this.stdio\n  }\n}\n\n/**\n * A {@link webdriver.FileDetector} that may be used when running\n * against a remote\n * [Selenium server](https://www.selenium.dev/downloads/).\n *\n * When a file path on the local machine running this script is entered with\n * {@link webdriver.WebElement#sendKeys WebElement#sendKeys}, this file detector\n * will transfer the specified file to the Selenium server's host; the sendKeys\n * command will be updated to use the transferred file's path.\n *\n * __Note:__ This class depends on a non-standard command supported on the\n * Java Selenium server. The file detector will fail if used with a server that\n * only supports standard WebDriver commands (such as the ChromeDriver).\n *\n * @final\n */\nclass FileDetector extends input.FileDetector {\n  /**\n   * Prepares a `file` for use with the remote browser. If the provided path\n   * does not reference a normal file (i.e. it does not exist or is a\n   * directory), then the promise returned by this method will be resolved with\n   * the original file path. Otherwise, this method will upload the file to the\n   * remote server, which will return the file's path on the remote system so\n   * it may be referenced in subsequent commands.\n   *\n   * @override\n   */\n  handleFile(driver, file) {\n    return io.stat(file).then(\n      function (stats) {\n        if (stats.isDirectory()) {\n          return file // Not a valid file, return original input.\n        }\n\n        let zip = new Zip()\n        return zip\n          .addFile(file)\n          .then(() => zip.toBuffer())\n          .then((buf) => buf.toString('base64'))\n          .then((encodedZip) => {\n            let command = new cmd.Command(cmd.Name.UPLOAD_FILE).setParameter('file', encodedZip)\n            return driver.execute(command)\n          })\n      },\n      function (err) {\n        if (err.code === 'ENOENT') {\n          return file // Not a file; return original input.\n        }\n        throw err\n      },\n    )\n  }\n}\n\n// PUBLIC API\n\nmodule.exports = {\n  DriverService,\n  FileDetector,\n  SeleniumServer,\n  // Exported for API docs.\n  ServiceOptions,\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/remote/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/remote/util.js":
/*!********************************************************!*\
  !*** ./node_modules/selenium-webdriver/remote/util.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n\n\nconst path = __webpack_require__(/*! node:path */ \"node:path\")\nconst cp = __webpack_require__(/*! node:child_process */ \"node:child_process\")\nconst logging = __webpack_require__(/*! ../lib/logging */ \"(rsc)/./node_modules/selenium-webdriver/lib/logging.js\")\n\n/**\n * returns path to java or 'java' string if JAVA_HOME does not exist in env obj\n * @returns {string}\n */\nfunction getJavaPath() {\n  return process.env['JAVA_HOME'] ? path.join(process.env['JAVA_HOME'], 'bin/java') : 'java'\n}\n\n/**\n * @param {string} seleniumStandalonePath path to standalone server\n * @returns {boolean}\n */\nfunction isSelenium3x(seleniumStandalonePath) {\n  const javaPath = getJavaPath()\n\n  const execRes = cp.execFileSync(javaPath, ['-jar', seleniumStandalonePath, '--version'])\n\n  return execRes.toString().trim().startsWith('Selenium server version: 3')\n}\n\n/**\n * @param {string} seleniumStandalonePath path to standalone server\n * @param {Array.<string>} args spawn arguments array\n * returns formatted args based on selenium standalone server version\n * @returns {Array.<string>}\n */\nfunction formatSpawnArgs(seleniumStandalonePath, args) {\n  if (isSelenium3x(seleniumStandalonePath)) {\n    logging\n      .getLogger(logging.Type.SERVER)\n      .warning('Deprecation: Support for Standalone Server 3.x will be removed soon. Please update to version 4.x')\n    return args\n  }\n\n  const standaloneArg = 'standalone'\n  const port3xArgFormat = '-port'\n  const port4xArgFormat = '--port'\n\n  let formattedArgs = Array.from(args)\n\n  const standaloneArgIndex = formattedArgs.findIndex((arg) => arg === seleniumStandalonePath)\n  const v3portArgFormat = formattedArgs.findIndex((arg) => arg === port3xArgFormat)\n\n  // old v3x port arg format was -port, new v4x port arg format is --port\n  if (v3portArgFormat !== -1) {\n    formattedArgs[v3portArgFormat] = port4xArgFormat\n  }\n\n  // 'standalone' arg should be right after jar file path\n  // in case if it is already in place - returns args\n  if (formattedArgs[standaloneArgIndex + 1] === standaloneArg) return formattedArgs\n\n  // insert 'standalone' right after jar file path\n  formattedArgs.splice(standaloneArgIndex + 1, 0, standaloneArg)\n\n  return formattedArgs\n}\n\n// PUBLIC API\nmodule.exports = {\n  getJavaPath,\n  isSelenium3x,\n  formatSpawnArgs,\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc2VsZW5pdW0td2ViZHJpdmVyL3JlbW90ZS91dGlsLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRVk7O0FBRVosYUFBYSxtQkFBTyxDQUFDLDRCQUFXO0FBQ2hDLFdBQVcsbUJBQU8sQ0FBQyw4Q0FBb0I7QUFDdkMsZ0JBQWdCLG1CQUFPLENBQUMsOEVBQWdCOztBQUV4QztBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLGFBQWE7QUFDYjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLGdCQUFnQjtBQUMzQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ29vZ2xlLXNoZWV0cy1zZWxlbml1bS1hdXRvbWF0aW9uLy4vbm9kZV9tb2R1bGVzL3NlbGVuaXVtLXdlYmRyaXZlci9yZW1vdGUvdXRpbC5qcz9hNzY2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBTb2Z0d2FyZSBGcmVlZG9tIENvbnNlcnZhbmN5IChTRkMpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgU0ZDIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbid1c2Ugc3RyaWN0J1xuXG5jb25zdCBwYXRoID0gcmVxdWlyZSgnbm9kZTpwYXRoJylcbmNvbnN0IGNwID0gcmVxdWlyZSgnbm9kZTpjaGlsZF9wcm9jZXNzJylcbmNvbnN0IGxvZ2dpbmcgPSByZXF1aXJlKCcuLi9saWIvbG9nZ2luZycpXG5cbi8qKlxuICogcmV0dXJucyBwYXRoIHRvIGphdmEgb3IgJ2phdmEnIHN0cmluZyBpZiBKQVZBX0hPTUUgZG9lcyBub3QgZXhpc3QgaW4gZW52IG9ialxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZ2V0SmF2YVBhdGgoKSB7XG4gIHJldHVybiBwcm9jZXNzLmVudlsnSkFWQV9IT01FJ10gPyBwYXRoLmpvaW4ocHJvY2Vzcy5lbnZbJ0pBVkFfSE9NRSddLCAnYmluL2phdmEnKSA6ICdqYXZhJ1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlbml1bVN0YW5kYWxvbmVQYXRoIHBhdGggdG8gc3RhbmRhbG9uZSBzZXJ2ZXJcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc1NlbGVuaXVtM3goc2VsZW5pdW1TdGFuZGFsb25lUGF0aCkge1xuICBjb25zdCBqYXZhUGF0aCA9IGdldEphdmFQYXRoKClcblxuICBjb25zdCBleGVjUmVzID0gY3AuZXhlY0ZpbGVTeW5jKGphdmFQYXRoLCBbJy1qYXInLCBzZWxlbml1bVN0YW5kYWxvbmVQYXRoLCAnLS12ZXJzaW9uJ10pXG5cbiAgcmV0dXJuIGV4ZWNSZXMudG9TdHJpbmcoKS50cmltKCkuc3RhcnRzV2l0aCgnU2VsZW5pdW0gc2VydmVyIHZlcnNpb246IDMnKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlbml1bVN0YW5kYWxvbmVQYXRoIHBhdGggdG8gc3RhbmRhbG9uZSBzZXJ2ZXJcbiAqIEBwYXJhbSB7QXJyYXkuPHN0cmluZz59IGFyZ3Mgc3Bhd24gYXJndW1lbnRzIGFycmF5XG4gKiByZXR1cm5zIGZvcm1hdHRlZCBhcmdzIGJhc2VkIG9uIHNlbGVuaXVtIHN0YW5kYWxvbmUgc2VydmVyIHZlcnNpb25cbiAqIEByZXR1cm5zIHtBcnJheS48c3RyaW5nPn1cbiAqL1xuZnVuY3Rpb24gZm9ybWF0U3Bhd25BcmdzKHNlbGVuaXVtU3RhbmRhbG9uZVBhdGgsIGFyZ3MpIHtcbiAgaWYgKGlzU2VsZW5pdW0zeChzZWxlbml1bVN0YW5kYWxvbmVQYXRoKSkge1xuICAgIGxvZ2dpbmdcbiAgICAgIC5nZXRMb2dnZXIobG9nZ2luZy5UeXBlLlNFUlZFUilcbiAgICAgIC53YXJuaW5nKCdEZXByZWNhdGlvbjogU3VwcG9ydCBmb3IgU3RhbmRhbG9uZSBTZXJ2ZXIgMy54IHdpbGwgYmUgcmVtb3ZlZCBzb29uLiBQbGVhc2UgdXBkYXRlIHRvIHZlcnNpb24gNC54JylcbiAgICByZXR1cm4gYXJnc1xuICB9XG5cbiAgY29uc3Qgc3RhbmRhbG9uZUFyZyA9ICdzdGFuZGFsb25lJ1xuICBjb25zdCBwb3J0M3hBcmdGb3JtYXQgPSAnLXBvcnQnXG4gIGNvbnN0IHBvcnQ0eEFyZ0Zvcm1hdCA9ICctLXBvcnQnXG5cbiAgbGV0IGZvcm1hdHRlZEFyZ3MgPSBBcnJheS5mcm9tKGFyZ3MpXG5cbiAgY29uc3Qgc3RhbmRhbG9uZUFyZ0luZGV4ID0gZm9ybWF0dGVkQXJncy5maW5kSW5kZXgoKGFyZykgPT4gYXJnID09PSBzZWxlbml1bVN0YW5kYWxvbmVQYXRoKVxuICBjb25zdCB2M3BvcnRBcmdGb3JtYXQgPSBmb3JtYXR0ZWRBcmdzLmZpbmRJbmRleCgoYXJnKSA9PiBhcmcgPT09IHBvcnQzeEFyZ0Zvcm1hdClcblxuICAvLyBvbGQgdjN4IHBvcnQgYXJnIGZvcm1hdCB3YXMgLXBvcnQsIG5ldyB2NHggcG9ydCBhcmcgZm9ybWF0IGlzIC0tcG9ydFxuICBpZiAodjNwb3J0QXJnRm9ybWF0ICE9PSAtMSkge1xuICAgIGZvcm1hdHRlZEFyZ3NbdjNwb3J0QXJnRm9ybWF0XSA9IHBvcnQ0eEFyZ0Zvcm1hdFxuICB9XG5cbiAgLy8gJ3N0YW5kYWxvbmUnIGFyZyBzaG91bGQgYmUgcmlnaHQgYWZ0ZXIgamFyIGZpbGUgcGF0aFxuICAvLyBpbiBjYXNlIGlmIGl0IGlzIGFscmVhZHkgaW4gcGxhY2UgLSByZXR1cm5zIGFyZ3NcbiAgaWYgKGZvcm1hdHRlZEFyZ3Nbc3RhbmRhbG9uZUFyZ0luZGV4ICsgMV0gPT09IHN0YW5kYWxvbmVBcmcpIHJldHVybiBmb3JtYXR0ZWRBcmdzXG5cbiAgLy8gaW5zZXJ0ICdzdGFuZGFsb25lJyByaWdodCBhZnRlciBqYXIgZmlsZSBwYXRoXG4gIGZvcm1hdHRlZEFyZ3Muc3BsaWNlKHN0YW5kYWxvbmVBcmdJbmRleCArIDEsIDAsIHN0YW5kYWxvbmVBcmcpXG5cbiAgcmV0dXJuIGZvcm1hdHRlZEFyZ3Ncbn1cblxuLy8gUFVCTElDIEFQSVxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldEphdmFQYXRoLFxuICBpc1NlbGVuaXVtM3gsXG4gIGZvcm1hdFNwYXduQXJncyxcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/remote/util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/safari.js":
/*!***************************************************!*\
  !*** ./node_modules/selenium-webdriver/safari.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("// Licensed to the Software Freedom Conservancy (SFC) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The SFC licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/**\n * @fileoverview Defines a WebDriver client for Safari.\n *\n * @module selenium-webdriver/safari\n */\n\n\n\nconst http = __webpack_require__(/*! ./http */ \"(rsc)/./node_modules/selenium-webdriver/http/index.js\")\nconst remote = __webpack_require__(/*! ./remote */ \"(rsc)/./node_modules/selenium-webdriver/remote/index.js\")\nconst webdriver = __webpack_require__(/*! ./lib/webdriver */ \"(rsc)/./node_modules/selenium-webdriver/lib/webdriver.js\")\nconst { Browser, Capabilities } = __webpack_require__(/*! ./lib/capabilities */ \"(rsc)/./node_modules/selenium-webdriver/lib/capabilities.js\")\nconst { getBinaryPaths } = __webpack_require__(/*! ./common/driverFinder */ \"(rsc)/./node_modules/selenium-webdriver/common/driverFinder.js\")\n\n/**\n * Creates {@link remote.DriverService} instances that manage\n * a [safaridriver] server in a child process.\n *\n * [safaridriver]: https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_10_0.html#//apple_ref/doc/uid/TP40014305-CH11-DontLinkElementID_28\n */\nclass ServiceBuilder extends remote.DriverService.Builder {\n  /**\n   * @param {string=} opt_exe Path to the server executable to use. If omitted,\n   *     the builder will attempt to locate the safaridriver on the system PATH.\n   */\n  constructor(opt_exe) {\n    super(opt_exe)\n    this.setLoopback(true) // Required.\n  }\n}\n\nconst OPTIONS_CAPABILITY_KEY = 'safari:options'\nconst TECHNOLOGY_PREVIEW_OPTIONS_KEY = 'technologyPreview'\n\n/**\n * Configuration options specific to the {@link Driver SafariDriver}.\n */\nclass Options extends Capabilities {\n  /**\n   * @param {(Capabilities|Map<string, ?>|Object)=} other Another set of\n   *     capabilities to initialize this instance from.\n   */\n  constructor(other = undefined) {\n    super(other)\n\n    /** @private {!Object} */\n    this.options_ = this.get(OPTIONS_CAPABILITY_KEY) || {}\n\n    this.set(OPTIONS_CAPABILITY_KEY, this.options_)\n    this.setBrowserName(Browser.SAFARI)\n  }\n\n  /**\n   * Instruct the SafariDriver to use the Safari Technology Preview if true.\n   * Otherwise, use the release version of Safari. Defaults to using the release version of Safari.\n   *\n   * @param {boolean} useTechnologyPreview\n   * @return {!Options} A self reference.\n   */\n  setTechnologyPreview(useTechnologyPreview) {\n    this.options_[TECHNOLOGY_PREVIEW_OPTIONS_KEY] = !!useTechnologyPreview\n    return this\n  }\n}\n\n/**\n * @param  {(Capabilities|Object<string, *>)=} o The options object\n * @return {boolean}\n */\nfunction useTechnologyPreview(o) {\n  if (o instanceof Capabilities) {\n    let options = o.get(OPTIONS_CAPABILITY_KEY)\n    return !!(options && options[TECHNOLOGY_PREVIEW_OPTIONS_KEY])\n  }\n\n  if (o && typeof o === 'object') {\n    return !!o[TECHNOLOGY_PREVIEW_OPTIONS_KEY]\n  }\n\n  return false\n}\n\nconst SAFARIDRIVER_TECHNOLOGY_PREVIEW_EXE = '/Applications/Safari Technology Preview.app/Contents/MacOS/safaridriver'\n\n/**\n * A WebDriver client for Safari. This class should never be instantiated\n * directly; instead, use the {@linkplain ./builder.Builder Builder}:\n *\n *     var driver = new Builder()\n *         .forBrowser('safari')\n *         .build();\n *\n */\nclass Driver extends webdriver.WebDriver {\n  /**\n   * Creates a new Safari session.\n   *\n   * @param {(Options|Capabilities)=} options The configuration options.\n   * @return {!Driver} A new driver instance.\n   */\n  static createSession(options) {\n    let caps = options || new Options()\n\n    let exe\n    if (useTechnologyPreview(caps.get(OPTIONS_CAPABILITY_KEY))) {\n      exe = SAFARIDRIVER_TECHNOLOGY_PREVIEW_EXE\n    }\n\n    let service = new ServiceBuilder(exe).build()\n    if (!service.getExecutable()) {\n      service.setExecutable(getBinaryPaths(caps).driverPath)\n    }\n    let executor = new http.Executor(service.start().then((url) => new http.HttpClient(url)))\n\n    return /** @type {!Driver} */ (super.createSession(executor, caps, () => service.kill()))\n  }\n}\n\n// Public API\n\nexports.Driver = Driver\nexports.Options = Options\nexports.ServiceBuilder = ServiceBuilder\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc2VsZW5pdW0td2ViZHJpdmVyL3NhZmFyaS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRVk7O0FBRVosYUFBYSxtQkFBTyxDQUFDLHFFQUFRO0FBQzdCLGVBQWUsbUJBQU8sQ0FBQyx5RUFBVTtBQUNqQyxrQkFBa0IsbUJBQU8sQ0FBQyxpRkFBaUI7QUFDM0MsUUFBUSx3QkFBd0IsRUFBRSxtQkFBTyxDQUFDLHVGQUFvQjtBQUM5RCxRQUFRLGlCQUFpQixFQUFFLG1CQUFPLENBQUMsNkZBQXVCOztBQUUxRDtBQUNBLFlBQVksNEJBQTRCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsMENBQTBDLDBCQUEwQjtBQUNwRTtBQUNBO0FBQ0E7QUFDQSxhQUFhLHVDQUF1QztBQUNwRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxrQkFBa0IsU0FBUztBQUMzQjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFNBQVM7QUFDdEIsY0FBYyxVQUFVO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFlBQVksbUNBQW1DO0FBQy9DLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLGFBQWEsa0JBQWtCLHFDQUFxQztBQUNwRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEseUJBQXlCO0FBQ3RDLGNBQWMsU0FBUztBQUN2QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxzQkFBc0IsU0FBUztBQUMvQjtBQUNBOztBQUVBOztBQUVBLGNBQWM7QUFDZCxlQUFlO0FBQ2Ysc0JBQXNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ29vZ2xlLXNoZWV0cy1zZWxlbml1bS1hdXRvbWF0aW9uLy4vbm9kZV9tb2R1bGVzL3NlbGVuaXVtLXdlYmRyaXZlci9zYWZhcmkuanM/NGFlNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgU29mdHdhcmUgRnJlZWRvbSBDb25zZXJ2YW5jeSAoU0ZDKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIFNGQyBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4vKipcbiAqIEBmaWxlb3ZlcnZpZXcgRGVmaW5lcyBhIFdlYkRyaXZlciBjbGllbnQgZm9yIFNhZmFyaS5cbiAqXG4gKiBAbW9kdWxlIHNlbGVuaXVtLXdlYmRyaXZlci9zYWZhcmlcbiAqL1xuXG4ndXNlIHN0cmljdCdcblxuY29uc3QgaHR0cCA9IHJlcXVpcmUoJy4vaHR0cCcpXG5jb25zdCByZW1vdGUgPSByZXF1aXJlKCcuL3JlbW90ZScpXG5jb25zdCB3ZWJkcml2ZXIgPSByZXF1aXJlKCcuL2xpYi93ZWJkcml2ZXInKVxuY29uc3QgeyBCcm93c2VyLCBDYXBhYmlsaXRpZXMgfSA9IHJlcXVpcmUoJy4vbGliL2NhcGFiaWxpdGllcycpXG5jb25zdCB7IGdldEJpbmFyeVBhdGhzIH0gPSByZXF1aXJlKCcuL2NvbW1vbi9kcml2ZXJGaW5kZXInKVxuXG4vKipcbiAqIENyZWF0ZXMge0BsaW5rIHJlbW90ZS5Ecml2ZXJTZXJ2aWNlfSBpbnN0YW5jZXMgdGhhdCBtYW5hZ2VcbiAqIGEgW3NhZmFyaWRyaXZlcl0gc2VydmVyIGluIGEgY2hpbGQgcHJvY2Vzcy5cbiAqXG4gKiBbc2FmYXJpZHJpdmVyXTogaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2xpYnJhcnkvcHJlcmVsZWFzZS9jb250ZW50L3JlbGVhc2Vub3Rlcy9HZW5lcmFsL1doYXRzTmV3SW5TYWZhcmkvQXJ0aWNsZXMvU2FmYXJpXzEwXzAuaHRtbCMvL2FwcGxlX3JlZi9kb2MvdWlkL1RQNDAwMTQzMDUtQ0gxMS1Eb250TGlua0VsZW1lbnRJRF8yOFxuICovXG5jbGFzcyBTZXJ2aWNlQnVpbGRlciBleHRlbmRzIHJlbW90ZS5Ecml2ZXJTZXJ2aWNlLkJ1aWxkZXIge1xuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmc9fSBvcHRfZXhlIFBhdGggdG8gdGhlIHNlcnZlciBleGVjdXRhYmxlIHRvIHVzZS4gSWYgb21pdHRlZCxcbiAgICogICAgIHRoZSBidWlsZGVyIHdpbGwgYXR0ZW1wdCB0byBsb2NhdGUgdGhlIHNhZmFyaWRyaXZlciBvbiB0aGUgc3lzdGVtIFBBVEguXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRfZXhlKSB7XG4gICAgc3VwZXIob3B0X2V4ZSlcbiAgICB0aGlzLnNldExvb3BiYWNrKHRydWUpIC8vIFJlcXVpcmVkLlxuICB9XG59XG5cbmNvbnN0IE9QVElPTlNfQ0FQQUJJTElUWV9LRVkgPSAnc2FmYXJpOm9wdGlvbnMnXG5jb25zdCBURUNITk9MT0dZX1BSRVZJRVdfT1BUSU9OU19LRVkgPSAndGVjaG5vbG9neVByZXZpZXcnXG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBvcHRpb25zIHNwZWNpZmljIHRvIHRoZSB7QGxpbmsgRHJpdmVyIFNhZmFyaURyaXZlcn0uXG4gKi9cbmNsYXNzIE9wdGlvbnMgZXh0ZW5kcyBDYXBhYmlsaXRpZXMge1xuICAvKipcbiAgICogQHBhcmFtIHsoQ2FwYWJpbGl0aWVzfE1hcDxzdHJpbmcsID8+fE9iamVjdCk9fSBvdGhlciBBbm90aGVyIHNldCBvZlxuICAgKiAgICAgY2FwYWJpbGl0aWVzIHRvIGluaXRpYWxpemUgdGhpcyBpbnN0YW5jZSBmcm9tLlxuICAgKi9cbiAgY29uc3RydWN0b3Iob3RoZXIgPSB1bmRlZmluZWQpIHtcbiAgICBzdXBlcihvdGhlcilcblxuICAgIC8qKiBAcHJpdmF0ZSB7IU9iamVjdH0gKi9cbiAgICB0aGlzLm9wdGlvbnNfID0gdGhpcy5nZXQoT1BUSU9OU19DQVBBQklMSVRZX0tFWSkgfHwge31cblxuICAgIHRoaXMuc2V0KE9QVElPTlNfQ0FQQUJJTElUWV9LRVksIHRoaXMub3B0aW9uc18pXG4gICAgdGhpcy5zZXRCcm93c2VyTmFtZShCcm93c2VyLlNBRkFSSSlcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnN0cnVjdCB0aGUgU2FmYXJpRHJpdmVyIHRvIHVzZSB0aGUgU2FmYXJpIFRlY2hub2xvZ3kgUHJldmlldyBpZiB0cnVlLlxuICAgKiBPdGhlcndpc2UsIHVzZSB0aGUgcmVsZWFzZSB2ZXJzaW9uIG9mIFNhZmFyaS4gRGVmYXVsdHMgdG8gdXNpbmcgdGhlIHJlbGVhc2UgdmVyc2lvbiBvZiBTYWZhcmkuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gdXNlVGVjaG5vbG9neVByZXZpZXdcbiAgICogQHJldHVybiB7IU9wdGlvbnN9IEEgc2VsZiByZWZlcmVuY2UuXG4gICAqL1xuICBzZXRUZWNobm9sb2d5UHJldmlldyh1c2VUZWNobm9sb2d5UHJldmlldykge1xuICAgIHRoaXMub3B0aW9uc19bVEVDSE5PTE9HWV9QUkVWSUVXX09QVElPTlNfS0VZXSA9ICEhdXNlVGVjaG5vbG9neVByZXZpZXdcbiAgICByZXR1cm4gdGhpc1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtICB7KENhcGFiaWxpdGllc3xPYmplY3Q8c3RyaW5nLCAqPik9fSBvIFRoZSBvcHRpb25zIG9iamVjdFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gdXNlVGVjaG5vbG9neVByZXZpZXcobykge1xuICBpZiAobyBpbnN0YW5jZW9mIENhcGFiaWxpdGllcykge1xuICAgIGxldCBvcHRpb25zID0gby5nZXQoT1BUSU9OU19DQVBBQklMSVRZX0tFWSlcbiAgICByZXR1cm4gISEob3B0aW9ucyAmJiBvcHRpb25zW1RFQ0hOT0xPR1lfUFJFVklFV19PUFRJT05TX0tFWV0pXG4gIH1cblxuICBpZiAobyAmJiB0eXBlb2YgbyA9PT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gISFvW1RFQ0hOT0xPR1lfUFJFVklFV19PUFRJT05TX0tFWV1cbiAgfVxuXG4gIHJldHVybiBmYWxzZVxufVxuXG5jb25zdCBTQUZBUklEUklWRVJfVEVDSE5PTE9HWV9QUkVWSUVXX0VYRSA9ICcvQXBwbGljYXRpb25zL1NhZmFyaSBUZWNobm9sb2d5IFByZXZpZXcuYXBwL0NvbnRlbnRzL01hY09TL3NhZmFyaWRyaXZlcidcblxuLyoqXG4gKiBBIFdlYkRyaXZlciBjbGllbnQgZm9yIFNhZmFyaS4gVGhpcyBjbGFzcyBzaG91bGQgbmV2ZXIgYmUgaW5zdGFudGlhdGVkXG4gKiBkaXJlY3RseTsgaW5zdGVhZCwgdXNlIHRoZSB7QGxpbmtwbGFpbiAuL2J1aWxkZXIuQnVpbGRlciBCdWlsZGVyfTpcbiAqXG4gKiAgICAgdmFyIGRyaXZlciA9IG5ldyBCdWlsZGVyKClcbiAqICAgICAgICAgLmZvckJyb3dzZXIoJ3NhZmFyaScpXG4gKiAgICAgICAgIC5idWlsZCgpO1xuICpcbiAqL1xuY2xhc3MgRHJpdmVyIGV4dGVuZHMgd2ViZHJpdmVyLldlYkRyaXZlciB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IFNhZmFyaSBzZXNzaW9uLlxuICAgKlxuICAgKiBAcGFyYW0geyhPcHRpb25zfENhcGFiaWxpdGllcyk9fSBvcHRpb25zIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMuXG4gICAqIEByZXR1cm4geyFEcml2ZXJ9IEEgbmV3IGRyaXZlciBpbnN0YW5jZS5cbiAgICovXG4gIHN0YXRpYyBjcmVhdGVTZXNzaW9uKG9wdGlvbnMpIHtcbiAgICBsZXQgY2FwcyA9IG9wdGlvbnMgfHwgbmV3IE9wdGlvbnMoKVxuXG4gICAgbGV0IGV4ZVxuICAgIGlmICh1c2VUZWNobm9sb2d5UHJldmlldyhjYXBzLmdldChPUFRJT05TX0NBUEFCSUxJVFlfS0VZKSkpIHtcbiAgICAgIGV4ZSA9IFNBRkFSSURSSVZFUl9URUNITk9MT0dZX1BSRVZJRVdfRVhFXG4gICAgfVxuXG4gICAgbGV0IHNlcnZpY2UgPSBuZXcgU2VydmljZUJ1aWxkZXIoZXhlKS5idWlsZCgpXG4gICAgaWYgKCFzZXJ2aWNlLmdldEV4ZWN1dGFibGUoKSkge1xuICAgICAgc2VydmljZS5zZXRFeGVjdXRhYmxlKGdldEJpbmFyeVBhdGhzKGNhcHMpLmRyaXZlclBhdGgpXG4gICAgfVxuICAgIGxldCBleGVjdXRvciA9IG5ldyBodHRwLkV4ZWN1dG9yKHNlcnZpY2Uuc3RhcnQoKS50aGVuKCh1cmwpID0+IG5ldyBodHRwLkh0dHBDbGllbnQodXJsKSkpXG5cbiAgICByZXR1cm4gLyoqIEB0eXBlIHshRHJpdmVyfSAqLyAoc3VwZXIuY3JlYXRlU2Vzc2lvbihleGVjdXRvciwgY2FwcywgKCkgPT4gc2VydmljZS5raWxsKCkpKVxuICB9XG59XG5cbi8vIFB1YmxpYyBBUElcblxuZXhwb3J0cy5Ecml2ZXIgPSBEcml2ZXJcbmV4cG9ydHMuT3B0aW9ucyA9IE9wdGlvbnNcbmV4cG9ydHMuU2VydmljZUJ1aWxkZXIgPSBTZXJ2aWNlQnVpbGRlclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/selenium-webdriver/safari.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/selenium-webdriver/package.json":
/*!******************************************************!*\
  !*** ./node_modules/selenium-webdriver/package.json ***!
  \******************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"name":"selenium-webdriver","version":"4.25.0","description":"The official WebDriver JavaScript bindings from the Selenium project","license":"Apache-2.0","keywords":["automation","selenium","testing","webdriver","webdriverjs"],"homepage":"https://github.com/SeleniumHQ/selenium/tree/trunk/javascript/node/selenium-webdriver#readme","bugs":{"url":"https://github.com/SeleniumHQ/selenium/issues"},"main":"./index","repository":{"type":"git","url":"https://github.com/SeleniumHQ/selenium.git"},"engines":{"node":">= 14.21.0"},"dependencies":{"@bazel/runfiles":"^5.8.1","jszip":"^3.10.1","tmp":"^0.2.3","ws":"^8.18.0"},"devDependencies":{"@eslint/js":"^9.8.0","clean-jsdoc-theme":"^4.3.0","eslint":"^9.8.0","eslint-config-prettier":"^9.1.0","eslint-plugin-mocha":"^10.5.0","eslint-plugin-n":"^17.10.1","eslint-plugin-no-only-tests":"^3.1.0","eslint-plugin-prettier":"^5.2.1","express":"^4.19.2","globals":"^15.9.0","has-flag":"^5.0.1","jsdoc":"^4.0.3","mocha":"^10.7.0","mocha-junit-reporter":"^2.2.1","multer":"1.4.5-lts.1","prettier":"^3.3.3","serve-index":"^1.9.1","sinon":"^18.0.0","supports-color":"^9.4.0"},"scripts":{"lint":"eslint .","lint:fix":"eslint . --fix","test":"bazel test //javascript/node/selenium-webdriver/...","generate-docs":"jsdoc --configure jsdoc_conf.json --verbose"},"mocha":{"recursive":true,"timeout":600000},"publishConfig":{"registry":"https://registry.npmjs.org/"}}');

/***/ })

};
;